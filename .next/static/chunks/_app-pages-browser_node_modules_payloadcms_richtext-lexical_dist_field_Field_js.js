/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_payloadcms_richtext-lexical_dist_field_Field_js"],{

/***/ "(app-pages-browser)/./node_modules/prismjs/components/prism-c.js":
/*!****************************************************!*\
  !*** ./node_modules/prismjs/components/prism-c.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Prism.languages.c = Prism.languages.extend('clike', {\n\t'comment': {\n\t\tpattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\tgreedy: true\n\t},\n\t'string': {\n\t\t// https://en.cppreference.com/w/c/language/string_literal\n\t\tpattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n\t\tlookbehind: true\n\t},\n\t'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n\t'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n\t'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n\t'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\n\nPrism.languages.insertBefore('c', 'string', {\n\t'char': {\n\t\t// https://en.cppreference.com/w/c/language/character_constant\n\t\tpattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n\t\tgreedy: true\n\t}\n});\n\nPrism.languages.insertBefore('c', 'string', {\n\t'macro': {\n\t\t// allow for multiline macro definitions\n\t\t// spaces after the # character compile fine with gcc\n\t\tpattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\talias: 'property',\n\t\tinside: {\n\t\t\t'string': [\n\t\t\t\t{\n\t\t\t\t\t// highlight the path of the include statement as a string\n\t\t\t\t\tpattern: /^(#\\s*include\\s*)<[^>]+>/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\tPrism.languages.c['string']\n\t\t\t],\n\t\t\t'char': Prism.languages.c['char'],\n\t\t\t'comment': Prism.languages.c['comment'],\n\t\t\t'macro-name': [\n\t\t\t\t{\n\t\t\t\t\tpattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'function'\n\t\t\t\t}\n\t\t\t],\n\t\t\t// highlight macro directives as keywords\n\t\t\t'directive': {\n\t\t\t\tpattern: /^(#\\s*)[a-z]+/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'keyword'\n\t\t\t},\n\t\t\t'directive-hash': /^#/,\n\t\t\t'punctuation': /##|\\\\(?=[\\r\\n])/,\n\t\t\t'expression': {\n\t\t\t\tpattern: /\\S[\\s\\S]*/,\n\t\t\t\tinside: Prism.languages.c\n\t\t\t}\n\t\t}\n\t}\n});\n\nPrism.languages.insertBefore('c', 'function', {\n\t// highlight predefined macros as constants\n\t'constant': /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n});\n\ndelete Prism.languages.c['boolean'];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tYy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLHdIQUF3SCxJQUFJO0FBQzVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsS0FBSztBQUNuRDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tYy5qcz8xMjg0Il0sInNvdXJjZXNDb250ZW50IjpbIlByaXNtLmxhbmd1YWdlcy5jID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY2xpa2UnLCB7XG5cdCdjb21tZW50Jzoge1xuXHRcdHBhdHRlcm46IC9cXC9cXC8oPzpbXlxcclxcblxcXFxdfFxcXFwoPzpcXHJcXG4/fFxcbnwoPyFbXFxyXFxuXSkpKSp8XFwvXFwqW1xcc1xcU10qPyg/OlxcKlxcL3wkKS8sXG5cdFx0Z3JlZWR5OiB0cnVlXG5cdH0sXG5cdCdzdHJpbmcnOiB7XG5cdFx0Ly8gaHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvYy9sYW5ndWFnZS9zdHJpbmdfbGl0ZXJhbFxuXHRcdHBhdHRlcm46IC9cIig/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfFteXCJcXFxcXFxyXFxuXSkqXCIvLFxuXHRcdGdyZWVkeTogdHJ1ZVxuXHR9LFxuXHQnY2xhc3MtbmFtZSc6IHtcblx0XHRwYXR0ZXJuOiAvKFxcYig/OmVudW18c3RydWN0KVxccysoPzpfX2F0dHJpYnV0ZV9fXFxzKlxcKFxcKFtcXHNcXFNdKj9cXClcXClcXHMqKT8pXFx3K3xcXGJbYS16XVxcdypfdFxcYi8sXG5cdFx0bG9va2JlaGluZDogdHJ1ZVxuXHR9LFxuXHQna2V5d29yZCc6IC9cXGIoPzpfQWxpZ25hc3xfQWxpZ25vZnxfQXRvbWljfF9Cb29sfF9Db21wbGV4fF9HZW5lcmljfF9JbWFnaW5hcnl8X05vcmV0dXJufF9TdGF0aWNfYXNzZXJ0fF9UaHJlYWRfbG9jYWx8X19hdHRyaWJ1dGVfX3xhc218YXV0b3xicmVha3xjYXNlfGNoYXJ8Y29uc3R8Y29udGludWV8ZGVmYXVsdHxkb3xkb3VibGV8ZWxzZXxlbnVtfGV4dGVybnxmbG9hdHxmb3J8Z290b3xpZnxpbmxpbmV8aW50fGxvbmd8cmVnaXN0ZXJ8cmV0dXJufHNob3J0fHNpZ25lZHxzaXplb2Z8c3RhdGljfHN0cnVjdHxzd2l0Y2h8dHlwZWRlZnx0eXBlb2Z8dW5pb258dW5zaWduZWR8dm9pZHx2b2xhdGlsZXx3aGlsZSlcXGIvLFxuXHQnZnVuY3Rpb24nOiAvXFxiW2Etel9dXFx3Kig/PVxccypcXCgpL2ksXG5cdCdudW1iZXInOiAvKD86XFxiMHgoPzpbXFxkYS1mXSsoPzpcXC5bXFxkYS1mXSopP3xcXC5bXFxkYS1mXSspKD86cFsrLV0/XFxkKyk/fCg/OlxcYlxcZCsoPzpcXC5cXGQqKT98XFxCXFwuXFxkKykoPzplWystXT9cXGQrKT8pW2Z1bF17MCw0fS9pLFxuXHQnb3BlcmF0b3InOiAvPj49P3w8PD0/fC0+fChbLSsmfDpdKVxcMXxbPzp+XXxbLSsqLyUmfF4hPTw+XT0/L1xufSk7XG5cblByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2MnLCAnc3RyaW5nJywge1xuXHQnY2hhcic6IHtcblx0XHQvLyBodHRwczovL2VuLmNwcHJlZmVyZW5jZS5jb20vdy9jL2xhbmd1YWdlL2NoYXJhY3Rlcl9jb25zdGFudFxuXHRcdHBhdHRlcm46IC8nKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8W14nXFxcXFxcclxcbl0pezAsMzJ9Jy8sXG5cdFx0Z3JlZWR5OiB0cnVlXG5cdH1cbn0pO1xuXG5QcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdjJywgJ3N0cmluZycsIHtcblx0J21hY3JvJzoge1xuXHRcdC8vIGFsbG93IGZvciBtdWx0aWxpbmUgbWFjcm8gZGVmaW5pdGlvbnNcblx0XHQvLyBzcGFjZXMgYWZ0ZXIgdGhlICMgY2hhcmFjdGVyIGNvbXBpbGUgZmluZSB3aXRoIGdjY1xuXHRcdHBhdHRlcm46IC8oXltcXHQgXSopI1xccypbYS16XSg/OlteXFxyXFxuXFxcXC9dfFxcLyg/IVxcKil8XFwvXFwqKD86W14qXXxcXCooPyFcXC8pKSpcXCpcXC98XFxcXCg/OlxcclxcbnxbXFxzXFxTXSkpKi9pbSxcblx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRhbGlhczogJ3Byb3BlcnR5Jyxcblx0XHRpbnNpZGU6IHtcblx0XHRcdCdzdHJpbmcnOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQvLyBoaWdobGlnaHQgdGhlIHBhdGggb2YgdGhlIGluY2x1ZGUgc3RhdGVtZW50IGFzIGEgc3RyaW5nXG5cdFx0XHRcdFx0cGF0dGVybjogL14oI1xccyppbmNsdWRlXFxzKik8W14+XSs+Lyxcblx0XHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFByaXNtLmxhbmd1YWdlcy5jWydzdHJpbmcnXVxuXHRcdFx0XSxcblx0XHRcdCdjaGFyJzogUHJpc20ubGFuZ3VhZ2VzLmNbJ2NoYXInXSxcblx0XHRcdCdjb21tZW50JzogUHJpc20ubGFuZ3VhZ2VzLmNbJ2NvbW1lbnQnXSxcblx0XHRcdCdtYWNyby1uYW1lJzogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cGF0dGVybjogLyheI1xccypkZWZpbmVcXHMrKVxcdytcXGIoPyFcXCgpL2ksXG5cdFx0XHRcdFx0bG9va2JlaGluZDogdHJ1ZVxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cGF0dGVybjogLyheI1xccypkZWZpbmVcXHMrKVxcdytcXGIoPz1cXCgpL2ksXG5cdFx0XHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdFx0XHRhbGlhczogJ2Z1bmN0aW9uJ1xuXHRcdFx0XHR9XG5cdFx0XHRdLFxuXHRcdFx0Ly8gaGlnaGxpZ2h0IG1hY3JvIGRpcmVjdGl2ZXMgYXMga2V5d29yZHNcblx0XHRcdCdkaXJlY3RpdmUnOiB7XG5cdFx0XHRcdHBhdHRlcm46IC9eKCNcXHMqKVthLXpdKy8sXG5cdFx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRcdGFsaWFzOiAna2V5d29yZCdcblx0XHRcdH0sXG5cdFx0XHQnZGlyZWN0aXZlLWhhc2gnOiAvXiMvLFxuXHRcdFx0J3B1bmN0dWF0aW9uJzogLyMjfFxcXFwoPz1bXFxyXFxuXSkvLFxuXHRcdFx0J2V4cHJlc3Npb24nOiB7XG5cdFx0XHRcdHBhdHRlcm46IC9cXFNbXFxzXFxTXSovLFxuXHRcdFx0XHRpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5jXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxuUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnYycsICdmdW5jdGlvbicsIHtcblx0Ly8gaGlnaGxpZ2h0IHByZWRlZmluZWQgbWFjcm9zIGFzIGNvbnN0YW50c1xuXHQnY29uc3RhbnQnOiAvXFxiKD86RU9GfE5VTEx8U0VFS19DVVJ8U0VFS19FTkR8U0VFS19TRVR8X19EQVRFX198X19GSUxFX198X19MSU5FX198X19USU1FU1RBTVBfX3xfX1RJTUVfX3xfX2Z1bmNfX3xzdGRlcnJ8c3RkaW58c3Rkb3V0KVxcYi9cbn0pO1xuXG5kZWxldGUgUHJpc20ubGFuZ3VhZ2VzLmNbJ2Jvb2xlYW4nXTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prismjs/components/prism-c.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prismjs/components/prism-clike.js":
/*!********************************************************!*\
  !*** ./node_modules/prismjs/components/prism-clike.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Prism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n\t'boolean': /\\b(?:false|true)\\b/,\n\t'function': /\\b\\w+(?=\\()/,\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tY2xpa2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixJQUFJO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tY2xpa2UuanM/YzkwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJQcmlzbS5sYW5ndWFnZXMuY2xpa2UgPSB7XG5cdCdjb21tZW50JzogW1xuXHRcdHtcblx0XHRcdHBhdHRlcm46IC8oXnxbXlxcXFxdKVxcL1xcKltcXHNcXFNdKj8oPzpcXCpcXC98JCkvLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGdyZWVkeTogdHJ1ZVxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0cGF0dGVybjogLyhefFteXFxcXDpdKVxcL1xcLy4qLyxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRncmVlZHk6IHRydWVcblx0XHR9XG5cdF0sXG5cdCdzdHJpbmcnOiB7XG5cdFx0cGF0dGVybjogLyhbXCInXSkoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcblx0XHRncmVlZHk6IHRydWVcblx0fSxcblx0J2NsYXNzLW5hbWUnOiB7XG5cdFx0cGF0dGVybjogLyhcXGIoPzpjbGFzc3xleHRlbmRzfGltcGxlbWVudHN8aW5zdGFuY2VvZnxpbnRlcmZhY2V8bmV3fHRyYWl0KVxccyt8XFxiY2F0Y2hcXHMrXFwoKVtcXHcuXFxcXF0rL2ksXG5cdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRpbnNpZGU6IHtcblx0XHRcdCdwdW5jdHVhdGlvbic6IC9bLlxcXFxdL1xuXHRcdH1cblx0fSxcblx0J2tleXdvcmQnOiAvXFxiKD86YnJlYWt8Y2F0Y2h8Y29udGludWV8ZG98ZWxzZXxmaW5hbGx5fGZvcnxmdW5jdGlvbnxpZnxpbnxpbnN0YW5jZW9mfG5ld3xudWxsfHJldHVybnx0aHJvd3x0cnl8d2hpbGUpXFxiLyxcblx0J2Jvb2xlYW4nOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLFxuXHQnZnVuY3Rpb24nOiAvXFxiXFx3Kyg/PVxcKCkvLFxuXHQnbnVtYmVyJzogL1xcYjB4W1xcZGEtZl0rXFxifCg/OlxcYlxcZCsoPzpcXC5cXGQqKT98XFxCXFwuXFxkKykoPzplWystXT9cXGQrKT8vaSxcblx0J29wZXJhdG9yJzogL1s8Pl09P3xbIT1dPT89P3wtLT98XFwrXFwrP3wmJj98XFx8XFx8P3xbPyovfl4lXS8sXG5cdCdwdW5jdHVhdGlvbic6IC9be31bXFxdOygpLC46XS9cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prismjs/components/prism-clike.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prismjs/components/prism-cpp.js":
/*!******************************************************!*\
  !*** ./node_modules/prismjs/components/prism-cpp.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("(function (Prism) {\n\n\tvar keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n\tvar modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function () { return keyword.source; });\n\n\tPrism.languages.cpp = Prism.languages.extend('c', {\n\t\t'class-name': [\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source\n\t\t\t\t\t.replace(/<keyword>/g, function () { return keyword.source; })),\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t// This is intended to capture the class name of method implementations like:\n\t\t\t//   void foo::bar() const {}\n\t\t\t// However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n\t\t\t// it starts with an uppercase letter. This approximation should give decent results.\n\t\t\t/\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,\n\t\t\t// This will capture the class name before destructors like:\n\t\t\t//   Foo::~Foo() {}\n\t\t\t/\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,\n\t\t\t// This also intends to capture the class name of method implementations but here the class has template\n\t\t\t// parameters, so it can't be a namespace (until C++ adds generic namespaces).\n\t\t\t/\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/\n\t\t],\n\t\t'keyword': keyword,\n\t\t'number': {\n\t\t\tpattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n\t\t\tgreedy: true\n\t\t},\n\t\t'operator': />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n\t\t'boolean': /\\b(?:false|true)\\b/\n\t});\n\n\tPrism.languages.insertBefore('cpp', 'string', {\n\t\t'module': {\n\t\t\t// https://en.cppreference.com/w/cpp/language/modules\n\t\t\tpattern: RegExp(\n\t\t\t\t/(\\b(?:import|module)\\s+)/.source +\n\t\t\t\t'(?:' +\n\t\t\t\t// header-name\n\t\t\t\t/\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source +\n\t\t\t\t'|' +\n\t\t\t\t// module name or partition or both\n\t\t\t\t/<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function () { return modName; }) +\n\t\t\t\t')'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'string': /^[<\"][\\s\\S]+/,\n\t\t\t\t'operator': /:/,\n\t\t\t\t'punctuation': /\\./\n\t\t\t}\n\t\t},\n\t\t'raw-string': {\n\t\t\tpattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n\t\t\talias: 'string',\n\t\t\tgreedy: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('cpp', 'keyword', {\n\t\t'generic-function': {\n\t\t\tpattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n\t\t\tinside: {\n\t\t\t\t'function': /^\\w+/,\n\t\t\t\t'generic': {\n\t\t\t\t\tpattern: /<[\\s\\S]+/,\n\t\t\t\t\talias: 'class-name',\n\t\t\t\t\tinside: Prism.languages.cpp\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('cpp', 'operator', {\n\t\t'double-colon': {\n\t\t\tpattern: /::/,\n\t\t\talias: 'punctuation'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('cpp', 'class-name', {\n\t\t// the base clause is an optional list of parent classes\n\t\t// https://en.cppreference.com/w/cpp/language/class\n\t\t'base-clause': {\n\t\t\tpattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: Prism.languages.extend('cpp', {})\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('inside', 'double-colon', {\n\t\t// All untokenized words that are not namespaces should be class names\n\t\t'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n\t}, Prism.languages.cpp['base-clause']);\n\n}(Prism));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tY3BwLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EsaUdBQWlHLHdCQUF3Qjs7QUFFekg7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsd0JBQXdCO0FBQ2xFO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzSkFBc0osSUFBSTtBQUMxSjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtHQUFrRyxpQkFBaUI7QUFDbkg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EseUJBQXlCLEtBQUs7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELGlCQUFpQixpQkFBaUI7QUFDckY7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tY3BwLmpzPzUwZTciXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChQcmlzbSkge1xuXG5cdHZhciBrZXl3b3JkID0gL1xcYig/OmFsaWduYXN8YWxpZ25vZnxhc218YXV0b3xib29sfGJyZWFrfGNhc2V8Y2F0Y2h8Y2hhcnxjaGFyMTZfdHxjaGFyMzJfdHxjaGFyOF90fGNsYXNzfGNvX2F3YWl0fGNvX3JldHVybnxjb195aWVsZHxjb21wbHxjb25jZXB0fGNvbnN0fGNvbnN0X2Nhc3R8Y29uc3RldmFsfGNvbnN0ZXhwcnxjb25zdGluaXR8Y29udGludWV8ZGVjbHR5cGV8ZGVmYXVsdHxkZWxldGV8ZG98ZG91YmxlfGR5bmFtaWNfY2FzdHxlbHNlfGVudW18ZXhwbGljaXR8ZXhwb3J0fGV4dGVybnxmaW5hbHxmbG9hdHxmb3J8ZnJpZW5kfGdvdG98aWZ8aW1wb3J0fGlubGluZXxpbnR8aW50MTZfdHxpbnQzMl90fGludDY0X3R8aW50OF90fGxvbmd8bW9kdWxlfG11dGFibGV8bmFtZXNwYWNlfG5ld3xub2V4Y2VwdHxudWxscHRyfG9wZXJhdG9yfG92ZXJyaWRlfHByaXZhdGV8cHJvdGVjdGVkfHB1YmxpY3xyZWdpc3RlcnxyZWludGVycHJldF9jYXN0fHJlcXVpcmVzfHJldHVybnxzaG9ydHxzaWduZWR8c2l6ZW9mfHN0YXRpY3xzdGF0aWNfYXNzZXJ0fHN0YXRpY19jYXN0fHN0cnVjdHxzd2l0Y2h8dGVtcGxhdGV8dGhpc3x0aHJlYWRfbG9jYWx8dGhyb3d8dHJ5fHR5cGVkZWZ8dHlwZWlkfHR5cGVuYW1lfHVpbnQxNl90fHVpbnQzMl90fHVpbnQ2NF90fHVpbnQ4X3R8dW5pb258dW5zaWduZWR8dXNpbmd8dmlydHVhbHx2b2lkfHZvbGF0aWxlfHdjaGFyX3R8d2hpbGUpXFxiLztcblx0dmFyIG1vZE5hbWUgPSAvXFxiKD8hPGtleXdvcmQ+KVxcdysoPzpcXHMqXFwuXFxzKlxcdyspKlxcYi8uc291cmNlLnJlcGxhY2UoLzxrZXl3b3JkPi9nLCBmdW5jdGlvbiAoKSB7IHJldHVybiBrZXl3b3JkLnNvdXJjZTsgfSk7XG5cblx0UHJpc20ubGFuZ3VhZ2VzLmNwcCA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2MnLCB7XG5cdFx0J2NsYXNzLW5hbWUnOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBhdHRlcm46IFJlZ0V4cCgvKFxcYig/OmNsYXNzfGNvbmNlcHR8ZW51bXxzdHJ1Y3R8dHlwZW5hbWUpXFxzKykoPyE8a2V5d29yZD4pXFx3Ky8uc291cmNlXG5cdFx0XHRcdFx0LnJlcGxhY2UoLzxrZXl3b3JkPi9nLCBmdW5jdGlvbiAoKSB7IHJldHVybiBrZXl3b3JkLnNvdXJjZTsgfSkpLFxuXHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0XHR9LFxuXHRcdFx0Ly8gVGhpcyBpcyBpbnRlbmRlZCB0byBjYXB0dXJlIHRoZSBjbGFzcyBuYW1lIG9mIG1ldGhvZCBpbXBsZW1lbnRhdGlvbnMgbGlrZTpcblx0XHRcdC8vICAgdm9pZCBmb286OmJhcigpIGNvbnN0IHt9XG5cdFx0XHQvLyBIb3dldmVyISBUaGUgYGZvb2AgaW4gdGhlIGFib3ZlIGV4YW1wbGUgY291bGQgYWxzbyBiZSBhIG5hbWVzcGFjZSwgc28gd2Ugb25seSBjYXB0dXJlIHRoZSBjbGFzcyBuYW1lIGlmXG5cdFx0XHQvLyBpdCBzdGFydHMgd2l0aCBhbiB1cHBlcmNhc2UgbGV0dGVyLiBUaGlzIGFwcHJveGltYXRpb24gc2hvdWxkIGdpdmUgZGVjZW50IHJlc3VsdHMuXG5cdFx0XHQvXFxiW0EtWl1cXHcqKD89XFxzKjo6XFxzKlxcdytcXHMqXFwoKS8sXG5cdFx0XHQvLyBUaGlzIHdpbGwgY2FwdHVyZSB0aGUgY2xhc3MgbmFtZSBiZWZvcmUgZGVzdHJ1Y3RvcnMgbGlrZTpcblx0XHRcdC8vICAgRm9vOjp+Rm9vKCkge31cblx0XHRcdC9cXGJbQS1aX11cXHcqKD89XFxzKjo6XFxzKn5cXHcrXFxzKlxcKCkvaSxcblx0XHRcdC8vIFRoaXMgYWxzbyBpbnRlbmRzIHRvIGNhcHR1cmUgdGhlIGNsYXNzIG5hbWUgb2YgbWV0aG9kIGltcGxlbWVudGF0aW9ucyBidXQgaGVyZSB0aGUgY2xhc3MgaGFzIHRlbXBsYXRlXG5cdFx0XHQvLyBwYXJhbWV0ZXJzLCBzbyBpdCBjYW4ndCBiZSBhIG5hbWVzcGFjZSAodW50aWwgQysrIGFkZHMgZ2VuZXJpYyBuYW1lc3BhY2VzKS5cblx0XHRcdC9cXGJcXHcrKD89XFxzKjwoPzpbXjw+XXw8KD86W148Pl18PFtePD5dKj4pKj4pKj5cXHMqOjpcXHMqXFx3K1xccypcXCgpL1xuXHRcdF0sXG5cdFx0J2tleXdvcmQnOiBrZXl3b3JkLFxuXHRcdCdudW1iZXInOiB7XG5cdFx0XHRwYXR0ZXJuOiAvKD86XFxiMGJbMDEnXSt8XFxiMHgoPzpbXFxkYS1mJ10rKD86XFwuW1xcZGEtZiddKik/fFxcLltcXGRhLWYnXSspKD86cFsrLV0/W1xcZCddKyk/fCg/OlxcYltcXGQnXSsoPzpcXC5bXFxkJ10qKT98XFxCXFwuW1xcZCddKykoPzplWystXT9bXFxkJ10rKT8pW2Z1bF17MCw0fS9pLFxuXHRcdFx0Z3JlZWR5OiB0cnVlXG5cdFx0fSxcblx0XHQnb3BlcmF0b3InOiAvPj49P3w8PD0/fC0+fC0tfFxcK1xcK3wmJnxcXHxcXHx8Wz86fl18PD0+fFstKyovJSZ8XiE9PD5dPT98XFxiKD86YW5kfGFuZF9lcXxiaXRhbmR8Yml0b3J8bm90fG5vdF9lcXxvcnxvcl9lcXx4b3J8eG9yX2VxKVxcYi8sXG5cdFx0J2Jvb2xlYW4nOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvXG5cdH0pO1xuXG5cdFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2NwcCcsICdzdHJpbmcnLCB7XG5cdFx0J21vZHVsZSc6IHtcblx0XHRcdC8vIGh0dHBzOi8vZW4uY3BwcmVmZXJlbmNlLmNvbS93L2NwcC9sYW5ndWFnZS9tb2R1bGVzXG5cdFx0XHRwYXR0ZXJuOiBSZWdFeHAoXG5cdFx0XHRcdC8oXFxiKD86aW1wb3J0fG1vZHVsZSlcXHMrKS8uc291cmNlICtcblx0XHRcdFx0Jyg/OicgK1xuXHRcdFx0XHQvLyBoZWFkZXItbmFtZVxuXHRcdFx0XHQvXCIoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXxbXlwiXFxcXFxcclxcbl0pKlwifDxbXjw+XFxyXFxuXSo+Ly5zb3VyY2UgK1xuXHRcdFx0XHQnfCcgK1xuXHRcdFx0XHQvLyBtb2R1bGUgbmFtZSBvciBwYXJ0aXRpb24gb3IgYm90aFxuXHRcdFx0XHQvPG1vZC1uYW1lPig/Olxccyo6XFxzKjxtb2QtbmFtZT4pP3w6XFxzKjxtb2QtbmFtZT4vLnNvdXJjZS5yZXBsYWNlKC88bW9kLW5hbWU+L2csIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZE5hbWU7IH0pICtcblx0XHRcdFx0JyknXG5cdFx0XHQpLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHQnc3RyaW5nJzogL15bPFwiXVtcXHNcXFNdKy8sXG5cdFx0XHRcdCdvcGVyYXRvcic6IC86Lyxcblx0XHRcdFx0J3B1bmN0dWF0aW9uJzogL1xcLi9cblx0XHRcdH1cblx0XHR9LFxuXHRcdCdyYXctc3RyaW5nJzoge1xuXHRcdFx0cGF0dGVybjogL1JcIihbXigpXFxcXCBdezAsMTZ9KVxcKFtcXHNcXFNdKj9cXClcXDFcIi8sXG5cdFx0XHRhbGlhczogJ3N0cmluZycsXG5cdFx0XHRncmVlZHk6IHRydWVcblx0XHR9XG5cdH0pO1xuXG5cdFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2NwcCcsICdrZXl3b3JkJywge1xuXHRcdCdnZW5lcmljLWZ1bmN0aW9uJzoge1xuXHRcdFx0cGF0dGVybjogL1xcYig/IW9wZXJhdG9yXFxiKVthLXpfXVxcdypcXHMqPCg/OltePD5dfDxbXjw+XSo+KSo+KD89XFxzKlxcKCkvaSxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHQnZnVuY3Rpb24nOiAvXlxcdysvLFxuXHRcdFx0XHQnZ2VuZXJpYyc6IHtcblx0XHRcdFx0XHRwYXR0ZXJuOiAvPFtcXHNcXFNdKy8sXG5cdFx0XHRcdFx0YWxpYXM6ICdjbGFzcy1uYW1lJyxcblx0XHRcdFx0XHRpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5jcHBcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0UHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnY3BwJywgJ29wZXJhdG9yJywge1xuXHRcdCdkb3VibGUtY29sb24nOiB7XG5cdFx0XHRwYXR0ZXJuOiAvOjovLFxuXHRcdFx0YWxpYXM6ICdwdW5jdHVhdGlvbidcblx0XHR9XG5cdH0pO1xuXG5cdFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2NwcCcsICdjbGFzcy1uYW1lJywge1xuXHRcdC8vIHRoZSBiYXNlIGNsYXVzZSBpcyBhbiBvcHRpb25hbCBsaXN0IG9mIHBhcmVudCBjbGFzc2VzXG5cdFx0Ly8gaHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2NsYXNzXG5cdFx0J2Jhc2UtY2xhdXNlJzoge1xuXHRcdFx0cGF0dGVybjogLyhcXGIoPzpjbGFzc3xzdHJ1Y3QpXFxzK1xcdytcXHMqOlxccyopW147e31cIidcXHNdKyg/OlxccytbXjt7fVwiJ1xcc10rKSooPz1cXHMqWzt7XSkvLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY3BwJywge30pXG5cdFx0fVxuXHR9KTtcblxuXHRQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdpbnNpZGUnLCAnZG91YmxlLWNvbG9uJywge1xuXHRcdC8vIEFsbCB1bnRva2VuaXplZCB3b3JkcyB0aGF0IGFyZSBub3QgbmFtZXNwYWNlcyBzaG91bGQgYmUgY2xhc3MgbmFtZXNcblx0XHQnY2xhc3MtbmFtZSc6IC9cXGJbYS16X11cXHcqXFxiKD8hXFxzKjo6KS9pXG5cdH0sIFByaXNtLmxhbmd1YWdlcy5jcHBbJ2Jhc2UtY2xhdXNlJ10pO1xuXG59KFByaXNtKSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prismjs/components/prism-cpp.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prismjs/components/prism-css.js":
/*!******************************************************!*\
  !*** ./node_modules/prismjs/components/prism-css.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("(function (Prism) {\n\n\tvar string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n\n\tPrism.languages.css = {\n\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n\t\t'atrule': {\n\t\t\tpattern: RegExp('@[\\\\w-](?:' + /[^;{\\s\"']|\\s+(?!\\s)/.source + '|' + string.source + ')*?' + /(?:;|(?=\\s*\\{))/.source),\n\t\t\tinside: {\n\t\t\t\t'rule': /^@[\\w-]+/,\n\t\t\t\t'selector-function-argument': {\n\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'selector'\n\t\t\t\t},\n\t\t\t\t'keyword': {\n\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t\t// See rest below\n\t\t\t}\n\t\t},\n\t\t'url': {\n\t\t\t// https://drafts.csswg.org/css-values-3/#urls\n\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^url/i,\n\t\t\t\t'punctuation': /^\\(|\\)$/,\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),\n\t\t\t\t\talias: 'url'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'selector': {\n\t\t\tpattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n\t\t\tlookbehind: true\n\t\t},\n\t\t'string': {\n\t\t\tpattern: string,\n\t\t\tgreedy: true\n\t\t},\n\t\t'property': {\n\t\t\tpattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'important': /!important\\b/i,\n\t\t'function': {\n\t\t\tpattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'punctuation': /[(){};:,]/\n\t};\n\n\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\n\n\tvar markup = Prism.languages.markup;\n\tif (markup) {\n\t\tmarkup.tag.addInlined('style', 'css');\n\t\tmarkup.tag.addAttribute('style', 'css');\n\t}\n\n}(Prism));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tY3NzLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyw2REFBNkQsU0FBUztBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLDBCQUEwQixTQUFTLFlBQVksb0JBQW9CLG9DQUFvQztBQUN2RztBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILHdCQUF3QjtBQUN4Qjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3ByaXNtanMvY29tcG9uZW50cy9wcmlzbS1jc3MuanM/ZDljMCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKFByaXNtKSB7XG5cblx0dmFyIHN0cmluZyA9IC8oPzpcIig/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfFteXCJcXFxcXFxyXFxuXSkqXCJ8Jyg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfFteJ1xcXFxcXHJcXG5dKSonKS87XG5cblx0UHJpc20ubGFuZ3VhZ2VzLmNzcyA9IHtcblx0XHQnY29tbWVudCc6IC9cXC9cXCpbXFxzXFxTXSo/XFwqXFwvLyxcblx0XHQnYXRydWxlJzoge1xuXHRcdFx0cGF0dGVybjogUmVnRXhwKCdAW1xcXFx3LV0oPzonICsgL1teO3tcXHNcIiddfFxccysoPyFcXHMpLy5zb3VyY2UgKyAnfCcgKyBzdHJpbmcuc291cmNlICsgJykqPycgKyAvKD86O3woPz1cXHMqXFx7KSkvLnNvdXJjZSksXG5cdFx0XHRpbnNpZGU6IHtcblx0XHRcdFx0J3J1bGUnOiAvXkBbXFx3LV0rLyxcblx0XHRcdFx0J3NlbGVjdG9yLWZ1bmN0aW9uLWFyZ3VtZW50Jzoge1xuXHRcdFx0XHRcdHBhdHRlcm46IC8oXFxic2VsZWN0b3JcXHMqXFwoXFxzKig/IVtcXHMpXSkpKD86W14oKVxcc118XFxzKyg/IVtcXHMpXSl8XFwoKD86W14oKV18XFwoW14oKV0qXFwpKSpcXCkpKyg/PVxccypcXCkpLyxcblx0XHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0XHRcdGFsaWFzOiAnc2VsZWN0b3InXG5cdFx0XHRcdH0sXG5cdFx0XHRcdCdrZXl3b3JkJzoge1xuXHRcdFx0XHRcdHBhdHRlcm46IC8oXnxbXlxcdy1dKSg/OmFuZHxub3R8b25seXxvcikoPyFbXFx3LV0pLyxcblx0XHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gU2VlIHJlc3QgYmVsb3dcblx0XHRcdH1cblx0XHR9LFxuXHRcdCd1cmwnOiB7XG5cdFx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cdFx0XHRwYXR0ZXJuOiBSZWdFeHAoJ1xcXFxidXJsXFxcXCgoPzonICsgc3RyaW5nLnNvdXJjZSArICd8JyArIC8oPzpbXlxcXFxcXHJcXG4oKVwiJ118XFxcXFtcXHNcXFNdKSovLnNvdXJjZSArICcpXFxcXCknLCAnaScpLFxuXHRcdFx0Z3JlZWR5OiB0cnVlLFxuXHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdCdmdW5jdGlvbic6IC9edXJsL2ksXG5cdFx0XHRcdCdwdW5jdHVhdGlvbic6IC9eXFwofFxcKSQvLFxuXHRcdFx0XHQnc3RyaW5nJzoge1xuXHRcdFx0XHRcdHBhdHRlcm46IFJlZ0V4cCgnXicgKyBzdHJpbmcuc291cmNlICsgJyQnKSxcblx0XHRcdFx0XHRhbGlhczogJ3VybCdcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0J3NlbGVjdG9yJzoge1xuXHRcdFx0cGF0dGVybjogUmVnRXhwKCcoXnxbe31cXFxcc10pW157fVxcXFxzXSg/Oltee307XCJcXCdcXFxcc118XFxcXHMrKD8hW1xcXFxze10pfCcgKyBzdHJpbmcuc291cmNlICsgJykqKD89XFxcXHMqXFxcXHspJyksXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0fSxcblx0XHQnc3RyaW5nJzoge1xuXHRcdFx0cGF0dGVybjogc3RyaW5nLFxuXHRcdFx0Z3JlZWR5OiB0cnVlXG5cdFx0fSxcblx0XHQncHJvcGVydHknOiB7XG5cdFx0XHRwYXR0ZXJuOiAvKF58W14tXFx3XFx4QTAtXFx1RkZGRl0pKD8hXFxzKVstX2EtelxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVstXFx3XFx4QTAtXFx1RkZGRl0pKig/PVxccyo6KS9pLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZVxuXHRcdH0sXG5cdFx0J2ltcG9ydGFudCc6IC8haW1wb3J0YW50XFxiL2ksXG5cdFx0J2Z1bmN0aW9uJzoge1xuXHRcdFx0cGF0dGVybjogLyhefFteLWEtejAtOV0pWy1hLXowLTldKyg/PVxcKCkvaSxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWVcblx0XHR9LFxuXHRcdCdwdW5jdHVhdGlvbic6IC9bKCl7fTs6LF0vXG5cdH07XG5cblx0UHJpc20ubGFuZ3VhZ2VzLmNzc1snYXRydWxlJ10uaW5zaWRlLnJlc3QgPSBQcmlzbS5sYW5ndWFnZXMuY3NzO1xuXG5cdHZhciBtYXJrdXAgPSBQcmlzbS5sYW5ndWFnZXMubWFya3VwO1xuXHRpZiAobWFya3VwKSB7XG5cdFx0bWFya3VwLnRhZy5hZGRJbmxpbmVkKCdzdHlsZScsICdjc3MnKTtcblx0XHRtYXJrdXAudGFnLmFkZEF0dHJpYnV0ZSgnc3R5bGUnLCAnY3NzJyk7XG5cdH1cblxufShQcmlzbSkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prismjs/components/prism-css.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prismjs/components/prism-java.js":
/*!*******************************************************!*\
  !*** ./node_modules/prismjs/components/prism-java.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("(function (Prism) {\n\n\tvar keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\\s*[(){}[\\]<>=%~.:,;?+\\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/;\n\n\t// full package (optional) + parent classes (optional)\n\tvar classNamePrefix = /(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source;\n\n\t// based on the java naming conventions\n\tvar className = {\n\t\tpattern: RegExp(/(^|[^\\w.])/.source + classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'namespace': {\n\t\t\t\tpattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\./\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\./\n\t\t}\n\t};\n\n\tPrism.languages.java = Prism.languages.extend('clike', {\n\t\t'string': {\n\t\t\tpattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t'class-name': [\n\t\t\tclassName,\n\t\t\t{\n\t\t\t\t// variables, parameters, and constructor references\n\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n\t\t\t\tpattern: RegExp(/(^|[^\\w.])/.source + classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()]|\\s*(?:\\[[\\s,]*\\]\\s*)?::\\s*new\\b)/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: className.inside\n\t\t\t},\n\t\t\t{\n\t\t\t\t// class names based on keyword\n\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n\t\t\t\tpattern: RegExp(/(\\b(?:class|enum|extends|implements|instanceof|interface|new|record|throws)\\s+)/.source + classNamePrefix + /[A-Z]\\w*\\b/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: className.inside\n\t\t\t}\n\t\t],\n\t\t'keyword': keywords,\n\t\t'function': [\n\t\t\tPrism.languages.clike.function,\n\t\t\t{\n\t\t\t\tpattern: /(::\\s*)[a-z_]\\w*/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'number': /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n\t\t'operator': {\n\t\t\tpattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'constant': /\\b[A-Z][A-Z_\\d]+\\b/\n\t});\n\n\tPrism.languages.insertBefore('java', 'string', {\n\t\t'triple-quoted-string': {\n\t\t\t// http://openjdk.java.net/jeps/355#Description\n\t\t\tpattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'char': {\n\t\t\tpattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\n\t\t\tgreedy: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('java', 'class-name', {\n\t\t'annotation': {\n\t\t\tpattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'generics': {\n\t\t\tpattern: /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n\t\t\tinside: {\n\t\t\t\t'class-name': className,\n\t\t\t\t'keyword': keywords,\n\t\t\t\t'punctuation': /[<>(),.:]/,\n\t\t\t\t'operator': /[?&|]/\n\t\t\t}\n\t\t},\n\t\t'import': [\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(\\bimport\\s+)/.source + classNamePrefix + /(?:[A-Z]\\w*|\\*)(?=\\s*;)/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': className.inside.namespace,\n\t\t\t\t\t'punctuation': /\\./,\n\t\t\t\t\t'operator': /\\*/,\n\t\t\t\t\t'class-name': /\\w+/\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(\\bimport\\s+static\\s+)/.source + classNamePrefix + /(?:\\w+|\\*)(?=\\s*;)/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'static',\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': className.inside.namespace,\n\t\t\t\t\t'static': /\\b\\w+$/,\n\t\t\t\t\t'punctuation': /\\./,\n\t\t\t\t\t'operator': /\\*/,\n\t\t\t\t\t'class-name': /\\w+/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'namespace': {\n\t\t\tpattern: RegExp(\n\t\t\t\t/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/\n\t\t\t\t\t.source.replace(/<keyword>/g, function () { return keywords.source; })),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /\\./,\n\t\t\t}\n\t\t}\n\t});\n}(Prism));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tamF2YS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSwwVUFBMFUsWUFBWTs7QUFFdFY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUZBQW1GO0FBQ25GO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsaUNBQWlDLElBQUk7QUFDckM7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxzRkFBc0Y7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSwwRkFBMEY7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCx5QkFBeUI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tamF2YS5qcz9hOTZhIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoUHJpc20pIHtcblxuXHR2YXIga2V5d29yZHMgPSAvXFxiKD86YWJzdHJhY3R8YXNzZXJ0fGJvb2xlYW58YnJlYWt8Ynl0ZXxjYXNlfGNhdGNofGNoYXJ8Y2xhc3N8Y29uc3R8Y29udGludWV8ZGVmYXVsdHxkb3xkb3VibGV8ZWxzZXxlbnVtfGV4cG9ydHN8ZXh0ZW5kc3xmaW5hbHxmaW5hbGx5fGZsb2F0fGZvcnxnb3RvfGlmfGltcGxlbWVudHN8aW1wb3J0fGluc3RhbmNlb2Z8aW50fGludGVyZmFjZXxsb25nfG1vZHVsZXxuYXRpdmV8bmV3fG5vbi1zZWFsZWR8bnVsbHxvcGVufG9wZW5zfHBhY2thZ2V8cGVybWl0c3xwcml2YXRlfHByb3RlY3RlZHxwcm92aWRlc3xwdWJsaWN8cmVjb3JkKD8hXFxzKlsoKXt9W1xcXTw+PSV+LjosOz8rXFwtKi8mfF5dKXxyZXF1aXJlc3xyZXR1cm58c2VhbGVkfHNob3J0fHN0YXRpY3xzdHJpY3RmcHxzdXBlcnxzd2l0Y2h8c3luY2hyb25pemVkfHRoaXN8dGhyb3d8dGhyb3dzfHRvfHRyYW5zaWVudHx0cmFuc2l0aXZlfHRyeXx1c2VzfHZhcnx2b2lkfHZvbGF0aWxlfHdoaWxlfHdpdGh8eWllbGQpXFxiLztcblxuXHQvLyBmdWxsIHBhY2thZ2UgKG9wdGlvbmFsKSArIHBhcmVudCBjbGFzc2VzIChvcHRpb25hbClcblx0dmFyIGNsYXNzTmFtZVByZWZpeCA9IC8oPzpbYS16XVxcdypcXHMqXFwuXFxzKikqKD86W0EtWl1cXHcqXFxzKlxcLlxccyopKi8uc291cmNlO1xuXG5cdC8vIGJhc2VkIG9uIHRoZSBqYXZhIG5hbWluZyBjb252ZW50aW9uc1xuXHR2YXIgY2xhc3NOYW1lID0ge1xuXHRcdHBhdHRlcm46IFJlZ0V4cCgvKF58W15cXHcuXSkvLnNvdXJjZSArIGNsYXNzTmFtZVByZWZpeCArIC9bQS1aXSg/OltcXGRfQS1aXSpbYS16XVxcdyopP1xcYi8uc291cmNlKSxcblx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdGluc2lkZToge1xuXHRcdFx0J25hbWVzcGFjZSc6IHtcblx0XHRcdFx0cGF0dGVybjogL15bYS16XVxcdyooPzpcXHMqXFwuXFxzKlthLXpdXFx3KikqKD86XFxzKlxcLik/Lyxcblx0XHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdFx0J3B1bmN0dWF0aW9uJzogL1xcLi9cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdCdwdW5jdHVhdGlvbic6IC9cXC4vXG5cdFx0fVxuXHR9O1xuXG5cdFByaXNtLmxhbmd1YWdlcy5qYXZhID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY2xpa2UnLCB7XG5cdFx0J3N0cmluZyc6IHtcblx0XHRcdHBhdHRlcm46IC8oXnxbXlxcXFxdKVwiKD86XFxcXC58W15cIlxcXFxcXHJcXG5dKSpcIi8sXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0Z3JlZWR5OiB0cnVlXG5cdFx0fSxcblx0XHQnY2xhc3MtbmFtZSc6IFtcblx0XHRcdGNsYXNzTmFtZSxcblx0XHRcdHtcblx0XHRcdFx0Ly8gdmFyaWFibGVzLCBwYXJhbWV0ZXJzLCBhbmQgY29uc3RydWN0b3IgcmVmZXJlbmNlc1xuXHRcdFx0XHQvLyB0aGlzIHRvIHN1cHBvcnQgY2xhc3MgbmFtZXMgKG9yIGdlbmVyaWMgcGFyYW1ldGVycykgd2hpY2ggZG8gbm90IGNvbnRhaW4gYSBsb3dlciBjYXNlIGxldHRlciAoYWxzbyB3b3JrcyBmb3IgbWV0aG9kcylcblx0XHRcdFx0cGF0dGVybjogUmVnRXhwKC8oXnxbXlxcdy5dKS8uc291cmNlICsgY2xhc3NOYW1lUHJlZml4ICsgL1tBLVpdXFx3Kig/PVxccytcXHcrXFxzKls7LD0oKV18XFxzKig/OlxcW1tcXHMsXSpcXF1cXHMqKT86OlxccypuZXdcXGIpLy5zb3VyY2UpLFxuXHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0XHRpbnNpZGU6IGNsYXNzTmFtZS5pbnNpZGVcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdC8vIGNsYXNzIG5hbWVzIGJhc2VkIG9uIGtleXdvcmRcblx0XHRcdFx0Ly8gdGhpcyB0byBzdXBwb3J0IGNsYXNzIG5hbWVzIChvciBnZW5lcmljIHBhcmFtZXRlcnMpIHdoaWNoIGRvIG5vdCBjb250YWluIGEgbG93ZXIgY2FzZSBsZXR0ZXIgKGFsc28gd29ya3MgZm9yIG1ldGhvZHMpXG5cdFx0XHRcdHBhdHRlcm46IFJlZ0V4cCgvKFxcYig/OmNsYXNzfGVudW18ZXh0ZW5kc3xpbXBsZW1lbnRzfGluc3RhbmNlb2Z8aW50ZXJmYWNlfG5ld3xyZWNvcmR8dGhyb3dzKVxccyspLy5zb3VyY2UgKyBjbGFzc05hbWVQcmVmaXggKyAvW0EtWl1cXHcqXFxiLy5zb3VyY2UpLFxuXHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0XHRpbnNpZGU6IGNsYXNzTmFtZS5pbnNpZGVcblx0XHRcdH1cblx0XHRdLFxuXHRcdCdrZXl3b3JkJzoga2V5d29yZHMsXG5cdFx0J2Z1bmN0aW9uJzogW1xuXHRcdFx0UHJpc20ubGFuZ3VhZ2VzLmNsaWtlLmZ1bmN0aW9uLFxuXHRcdFx0e1xuXHRcdFx0XHRwYXR0ZXJuOiAvKDo6XFxzKilbYS16X11cXHcqLyxcblx0XHRcdFx0bG9va2JlaGluZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdF0sXG5cdFx0J251bWJlcic6IC9cXGIwYlswMV1bMDFfXSpMP1xcYnxcXGIweCg/OlxcLltcXGRhLWZfcCstXSt8W1xcZGEtZl9dKyg/OlxcLltcXGRhLWZfcCstXSspPylcXGJ8KD86XFxiXFxkW1xcZF9dKig/OlxcLltcXGRfXSopP3xcXEJcXC5cXGRbXFxkX10qKSg/OmVbKy1dP1xcZFtcXGRfXSopP1tkZmxdPy9pLFxuXHRcdCdvcGVyYXRvcic6IHtcblx0XHRcdHBhdHRlcm46IC8oXnxbXi5dKSg/Ojw8PT98Pj4+Pz0/fC0+fC0tfFxcK1xcK3wmJnxcXHxcXHx8Ojp8Wz86fl18Wy0rKi8lJnxeIT08Pl09PykvbSxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWVcblx0XHR9LFxuXHRcdCdjb25zdGFudCc6IC9cXGJbQS1aXVtBLVpfXFxkXStcXGIvXG5cdH0pO1xuXG5cdFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2phdmEnLCAnc3RyaW5nJywge1xuXHRcdCd0cmlwbGUtcXVvdGVkLXN0cmluZyc6IHtcblx0XHRcdC8vIGh0dHA6Ly9vcGVuamRrLmphdmEubmV0L2plcHMvMzU1I0Rlc2NyaXB0aW9uXG5cdFx0XHRwYXR0ZXJuOiAvXCJcIlwiWyBcXHRdKltcXHJcXG5dKD86KD86XCJ8XCJcIik/KD86XFxcXC58W15cIlxcXFxdKSkqXCJcIlwiLyxcblx0XHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRcdGFsaWFzOiAnc3RyaW5nJ1xuXHRcdH0sXG5cdFx0J2NoYXInOiB7XG5cdFx0XHRwYXR0ZXJuOiAvJyg/OlxcXFwufFteJ1xcXFxcXHJcXG5dKXsxLDZ9Jy8sXG5cdFx0XHRncmVlZHk6IHRydWVcblx0XHR9XG5cdH0pO1xuXG5cdFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2phdmEnLCAnY2xhc3MtbmFtZScsIHtcblx0XHQnYW5ub3RhdGlvbic6IHtcblx0XHRcdHBhdHRlcm46IC8oXnxbXi5dKUBcXHcrKD86XFxzKlxcLlxccypcXHcrKSovLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGFsaWFzOiAncHVuY3R1YXRpb24nXG5cdFx0fSxcblx0XHQnZ2VuZXJpY3MnOiB7XG5cdFx0XHRwYXR0ZXJuOiAvPCg/OltcXHdcXHMsLj9dfCYoPyEmKXw8KD86W1xcd1xccywuP118Jig/ISYpfDwoPzpbXFx3XFxzLC4/XXwmKD8hJil8PCg/OltcXHdcXHMsLj9dfCYoPyEmKSkqPikqPikqPikqPi8sXG5cdFx0XHRpbnNpZGU6IHtcblx0XHRcdFx0J2NsYXNzLW5hbWUnOiBjbGFzc05hbWUsXG5cdFx0XHRcdCdrZXl3b3JkJzoga2V5d29yZHMsXG5cdFx0XHRcdCdwdW5jdHVhdGlvbic6IC9bPD4oKSwuOl0vLFxuXHRcdFx0XHQnb3BlcmF0b3InOiAvWz8mfF0vXG5cdFx0XHR9XG5cdFx0fSxcblx0XHQnaW1wb3J0JzogW1xuXHRcdFx0e1xuXHRcdFx0XHRwYXR0ZXJuOiBSZWdFeHAoLyhcXGJpbXBvcnRcXHMrKS8uc291cmNlICsgY2xhc3NOYW1lUHJlZml4ICsgLyg/OltBLVpdXFx3KnxcXCopKD89XFxzKjspLy5zb3VyY2UpLFxuXHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0XHRpbnNpZGU6IHtcblx0XHRcdFx0XHQnbmFtZXNwYWNlJzogY2xhc3NOYW1lLmluc2lkZS5uYW1lc3BhY2UsXG5cdFx0XHRcdFx0J3B1bmN0dWF0aW9uJzogL1xcLi8sXG5cdFx0XHRcdFx0J29wZXJhdG9yJzogL1xcKi8sXG5cdFx0XHRcdFx0J2NsYXNzLW5hbWUnOiAvXFx3Ky9cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGF0dGVybjogUmVnRXhwKC8oXFxiaW1wb3J0XFxzK3N0YXRpY1xccyspLy5zb3VyY2UgKyBjbGFzc05hbWVQcmVmaXggKyAvKD86XFx3K3xcXCopKD89XFxzKjspLy5zb3VyY2UpLFxuXHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0XHRhbGlhczogJ3N0YXRpYycsXG5cdFx0XHRcdGluc2lkZToge1xuXHRcdFx0XHRcdCduYW1lc3BhY2UnOiBjbGFzc05hbWUuaW5zaWRlLm5hbWVzcGFjZSxcblx0XHRcdFx0XHQnc3RhdGljJzogL1xcYlxcdyskLyxcblx0XHRcdFx0XHQncHVuY3R1YXRpb24nOiAvXFwuLyxcblx0XHRcdFx0XHQnb3BlcmF0b3InOiAvXFwqLyxcblx0XHRcdFx0XHQnY2xhc3MtbmFtZSc6IC9cXHcrL1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XSxcblx0XHQnbmFtZXNwYWNlJzoge1xuXHRcdFx0cGF0dGVybjogUmVnRXhwKFxuXHRcdFx0XHQvKFxcYig/OmV4cG9ydHN8aW1wb3J0KD86XFxzK3N0YXRpYyk/fG1vZHVsZXxvcGVufG9wZW5zfHBhY2thZ2V8cHJvdmlkZXN8cmVxdWlyZXN8dG98dHJhbnNpdGl2ZXx1c2VzfHdpdGgpXFxzKykoPyE8a2V5d29yZD4pW2Etel1cXHcqKD86XFwuW2Etel1cXHcqKSpcXC4/L1xuXHRcdFx0XHRcdC5zb3VyY2UucmVwbGFjZSgvPGtleXdvcmQ+L2csIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGtleXdvcmRzLnNvdXJjZTsgfSkpLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHQncHVuY3R1YXRpb24nOiAvXFwuLyxcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufShQcmlzbSkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prismjs/components/prism-java.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prismjs/components/prism-javascript.js":
/*!*************************************************************!*\
  !*** ./node_modules/prismjs/components/prism-javascript.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Prism.languages.javascript = Prism.languages.extend('clike', {\n\t'class-name': [\n\t\tPrism.languages.clike['class-name'],\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'keyword': [\n\t\t{\n\t\t\tpattern: /((?:^|\\})\\s*)catch\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t],\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n\t'number': {\n\t\tpattern: RegExp(\n\t\t\t/(^|[^\\w$])/.source +\n\t\t\t'(?:' +\n\t\t\t(\n\t\t\t\t// constant\n\t\t\t\t/NaN|Infinity/.source +\n\t\t\t\t'|' +\n\t\t\t\t// binary integer\n\t\t\t\t/0[bB][01]+(?:_[01]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// octal integer\n\t\t\t\t/0[oO][0-7]+(?:_[0-7]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// hexadecimal integer\n\t\t\t\t/0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal bigint\n\t\t\t\t/\\d+(?:_\\d+)*n/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal number (integer or float) but no bigint\n\t\t\t\t/(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source\n\t\t\t) +\n\t\t\t')' +\n\t\t\t/(?![\\w$])/.source\n\t\t),\n\t\tlookbehind: true\n\t},\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\n\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\tpattern: RegExp(\n\t\t\t// lookbehind\n\t\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\n\t\t\t/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)/.source +\n\t\t\t// Regex pattern:\n\t\t\t// There are 2 regex patterns here. The RegExp set notation proposal added support for nested character\n\t\t\t// classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible\n\t\t\t// with the only syntax, so we have to define 2 different regex patterns.\n\t\t\t/\\//.source +\n\t\t\t'(?:' +\n\t\t\t/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}/.source +\n\t\t\t'|' +\n\t\t\t// `v` flag syntax. This supports 3 levels of nested character classes.\n\t\t\t/(?:\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.)*\\])*\\])*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source +\n\t\t\t')' +\n\t\t\t// lookahead\n\t\t\t/(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/.source\n\t\t),\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'regex-source': {\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'language-regex',\n\t\t\t\tinside: Prism.languages.regex\n\t\t\t},\n\t\t\t'regex-delimiter': /^\\/|\\/$/,\n\t\t\t'regex-flags': /^[a-z]+$/,\n\t\t}\n\t},\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\n\t'function-variable': {\n\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n\t\talias: 'function'\n\t},\n\t'parameter': [\n\t\t{\n\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t}\n\t],\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'hashbang': {\n\t\tpattern: /^#!.*/,\n\t\tgreedy: true,\n\t\talias: 'comment'\n\t},\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'template-punctuation': {\n\t\t\t\tpattern: /^`|`$/,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t},\n\t'string-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\talias: 'property'\n\t}\n});\n\nPrism.languages.insertBefore('javascript', 'operator', {\n\t'literal-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\talias: 'property'\n\t},\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\n\n\t// add attribute support for all DOM events.\n\t// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\tPrism.languages.markup.tag.addAttribute(\n\t\t/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\n\t\t'javascript'\n\t);\n}\n\nPrism.languages.js = Prism.languages.javascript;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prismjs/components/prism-javascript.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prismjs/components/prism-markdown.js":
/*!***********************************************************!*\
  !*** ./node_modules/prismjs/components/prism-markdown.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("(function (Prism) {\n\n\t// Allow only one line break\n\tvar inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n\n\t/**\n\t * This function is intended for the creation of the bold or italic pattern.\n\t *\n\t * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n\t *\n\t * _Note:_ Keep in mind that this adds a capturing group.\n\t *\n\t * @param {string} pattern\n\t * @returns {RegExp}\n\t */\n\tfunction createInline(pattern) {\n\t\tpattern = pattern.replace(/<inner>/g, function () { return inner; });\n\t\treturn RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n\t}\n\n\n\tvar tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n\tvar tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () { return tableCell; });\n\tvar tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n\n\n\tPrism.languages.markdown = Prism.languages.extend('markup', {});\n\tPrism.languages.insertBefore('markdown', 'prolog', {\n\t\t'front-matter-block': {\n\t\t\tpattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /^---|---$/,\n\t\t\t\t'front-matter': {\n\t\t\t\t\tpattern: /\\S+(?:\\s+\\S+)*/,\n\t\t\t\t\talias: ['yaml', 'language-yaml'],\n\t\t\t\t\tinside: Prism.languages.yaml\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'blockquote': {\n\t\t\t// > ...\n\t\t\tpattern: /^>(?:[\\t ]*>)*/m,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'table': {\n\t\t\tpattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n\t\t\tinside: {\n\t\t\t\t'table-data-rows': {\n\t\t\t\t\tpattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'table-data': {\n\t\t\t\t\t\t\tpattern: RegExp(tableCell),\n\t\t\t\t\t\t\tinside: Prism.languages.markdown\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': /\\|/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'table-line': {\n\t\t\t\t\tpattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /\\||:?-{3,}:?/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'table-header-row': {\n\t\t\t\t\tpattern: RegExp('^' + tableRow + '$'),\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'table-header': {\n\t\t\t\t\t\t\tpattern: RegExp(tableCell),\n\t\t\t\t\t\t\talias: 'important',\n\t\t\t\t\t\t\tinside: Prism.languages.markdown\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': /\\|/\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'code': [\n\t\t\t{\n\t\t\t\t// Prefixed by 4 spaces or 1 tab and preceded by an empty line\n\t\t\t\tpattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'keyword'\n\t\t\t},\n\t\t\t{\n\t\t\t\t// ```optional language\n\t\t\t\t// code block\n\t\t\t\t// ```\n\t\t\t\tpattern: /^```[\\s\\S]*?^```$/m,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'code-block': {\n\t\t\t\t\t\tpattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t},\n\t\t\t\t\t'code-language': {\n\t\t\t\t\t\tpattern: /^(```).+/,\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t},\n\t\t\t\t\t'punctuation': /```/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'title': [\n\t\t\t{\n\t\t\t\t// title 1\n\t\t\t\t// =======\n\n\t\t\t\t// title 2\n\t\t\t\t// -------\n\t\t\t\tpattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n\t\t\t\talias: 'important',\n\t\t\t\tinside: {\n\t\t\t\t\tpunctuation: /==+$|--+$/\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t// # title 1\n\t\t\t\t// ###### title 6\n\t\t\t\tpattern: /(^\\s*)#.+/m,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'important',\n\t\t\t\tinside: {\n\t\t\t\t\tpunctuation: /^#+|#+$/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'hr': {\n\t\t\t// ***\n\t\t\t// ---\n\t\t\t// * * *\n\t\t\t// -----------\n\t\t\tpattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n\t\t\tlookbehind: true,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'list': {\n\t\t\t// * item\n\t\t\t// + item\n\t\t\t// - item\n\t\t\t// 1. item\n\t\t\tpattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n\t\t\tlookbehind: true,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'url-reference': {\n\t\t\t// [id]: http://example.com \"Optional title\"\n\t\t\t// [id]: http://example.com 'Optional title'\n\t\t\t// [id]: http://example.com (Optional title)\n\t\t\t// [id]: <http://example.com> \"Optional title\"\n\t\t\tpattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n\t\t\tinside: {\n\t\t\t\t'variable': {\n\t\t\t\t\tpattern: /^(!?\\[)[^\\]]+/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n\t\t\t\t'punctuation': /^[\\[\\]!:]|[<>]/\n\t\t\t},\n\t\t\talias: 'url'\n\t\t},\n\t\t'bold': {\n\t\t\t// **strong**\n\t\t\t// __strong__\n\n\t\t\t// allow one nested instance of italic text using the same delimiter\n\t\t\tpattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'content': {\n\t\t\t\t\tpattern: /(^..)[\\s\\S]+(?=..$)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {} // see below\n\t\t\t\t},\n\t\t\t\t'punctuation': /\\*\\*|__/\n\t\t\t}\n\t\t},\n\t\t'italic': {\n\t\t\t// *em*\n\t\t\t// _em_\n\n\t\t\t// allow one nested instance of bold text using the same delimiter\n\t\t\tpattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'content': {\n\t\t\t\t\tpattern: /(^.)[\\s\\S]+(?=.$)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {} // see below\n\t\t\t\t},\n\t\t\t\t'punctuation': /[*_]/\n\t\t\t}\n\t\t},\n\t\t'strike': {\n\t\t\t// ~~strike through~~\n\t\t\t// ~strike~\n\t\t\t// eslint-disable-next-line regexp/strict\n\t\t\tpattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'content': {\n\t\t\t\t\tpattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {} // see below\n\t\t\t\t},\n\t\t\t\t'punctuation': /~~?/\n\t\t\t}\n\t\t},\n\t\t'code-snippet': {\n\t\t\t// `code`\n\t\t\t// ``code``\n\t\t\tpattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\talias: ['code', 'keyword']\n\t\t},\n\t\t'url': {\n\t\t\t// [example](http://example.com \"Optional title\")\n\t\t\t// [example][id]\n\t\t\t// [example] [id]\n\t\t\tpattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'operator': /^!/,\n\t\t\t\t'content': {\n\t\t\t\t\tpattern: /(^\\[)[^\\]]+(?=\\])/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {} // see below\n\t\t\t\t},\n\t\t\t\t'variable': {\n\t\t\t\t\tpattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'url': {\n\t\t\t\t\tpattern: /(^\\]\\()[^\\s)]+/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n\t\t['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n\t\t\tif (token !== inside) {\n\t\t\t\tPrism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n\t\t\t}\n\t\t});\n\t});\n\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tif (env.language !== 'markdown' && env.language !== 'md') {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction walkTokens(tokens) {\n\t\t\tif (!tokens || typeof tokens === 'string') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (var i = 0, l = tokens.length; i < l; i++) {\n\t\t\t\tvar token = tokens[i];\n\n\t\t\t\tif (token.type !== 'code') {\n\t\t\t\t\twalkTokens(token.content);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n\t\t\t\t * is optional. But the grammar is defined so that there is only one case we have to handle:\n\t\t\t\t *\n\t\t\t\t * token.content = [\n\t\t\t\t *     <span class=\"punctuation\">```</span>,\n\t\t\t\t *     <span class=\"code-language\">xxxx</span>,\n\t\t\t\t *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n\t\t\t\t *     <span class=\"code-block\">...</span>,\n\t\t\t\t *     '\\n', // exactly one new lines again\n\t\t\t\t *     <span class=\"punctuation\">```</span>\n\t\t\t\t * ];\n\t\t\t\t */\n\n\t\t\t\tvar codeLang = token.content[1];\n\t\t\t\tvar codeBlock = token.content[3];\n\n\t\t\t\tif (codeLang && codeBlock &&\n\t\t\t\t\tcodeLang.type === 'code-language' && codeBlock.type === 'code-block' &&\n\t\t\t\t\ttypeof codeLang.content === 'string') {\n\n\t\t\t\t\t// this might be a language that Prism does not support\n\n\t\t\t\t\t// do some replacements to support C++, C#, and F#\n\t\t\t\t\tvar lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp');\n\t\t\t\t\t// only use the first word\n\t\t\t\t\tlang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n\t\t\t\t\tvar alias = 'language-' + lang;\n\n\t\t\t\t\t// add alias\n\t\t\t\t\tif (!codeBlock.alias) {\n\t\t\t\t\t\tcodeBlock.alias = [alias];\n\t\t\t\t\t} else if (typeof codeBlock.alias === 'string') {\n\t\t\t\t\t\tcodeBlock.alias = [codeBlock.alias, alias];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcodeBlock.alias.push(alias);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\twalkTokens(env.tokens);\n\t});\n\n\tPrism.hooks.add('wrap', function (env) {\n\t\tif (env.type !== 'code-block') {\n\t\t\treturn;\n\t\t}\n\n\t\tvar codeLang = '';\n\t\tfor (var i = 0, l = env.classes.length; i < l; i++) {\n\t\t\tvar cls = env.classes[i];\n\t\t\tvar match = /language-(.+)/.exec(cls);\n\t\t\tif (match) {\n\t\t\t\tcodeLang = match[1];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tvar grammar = Prism.languages[codeLang];\n\n\t\tif (!grammar) {\n\t\t\tif (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n\t\t\t\tvar id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n\t\t\t\tenv.attributes['id'] = id;\n\n\t\t\t\tPrism.plugins.autoloader.loadLanguages(codeLang, function () {\n\t\t\t\t\tvar ele = document.getElementById(id);\n\t\t\t\t\tif (ele) {\n\t\t\t\t\t\tele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tenv.content = Prism.highlight(textContent(env.content), grammar, codeLang);\n\t\t}\n\t});\n\n\tvar tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n\n\t/**\n\t * A list of known entity names.\n\t *\n\t * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n\t *\n\t * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n\t */\n\tvar KNOWN_ENTITY_NAMES = {\n\t\t'amp': '&',\n\t\t'lt': '<',\n\t\t'gt': '>',\n\t\t'quot': '\"',\n\t};\n\n\t// IE 11 doesn't support `String.fromCodePoint`\n\tvar fromCodePoint = String.fromCodePoint || String.fromCharCode;\n\n\t/**\n\t * Returns the text content of a given HTML source code string.\n\t *\n\t * @param {string} html\n\t * @returns {string}\n\t */\n\tfunction textContent(html) {\n\t\t// remove all tags\n\t\tvar text = html.replace(tagPattern, '');\n\n\t\t// decode known entities\n\t\ttext = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n\t\t\tcode = code.toLowerCase();\n\n\t\t\tif (code[0] === '#') {\n\t\t\t\tvar value;\n\t\t\t\tif (code[1] === 'x') {\n\t\t\t\t\tvalue = parseInt(code.slice(2), 16);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = Number(code.slice(1));\n\t\t\t\t}\n\n\t\t\t\treturn fromCodePoint(value);\n\t\t\t} else {\n\t\t\t\tvar known = KNOWN_ENTITY_NAMES[code];\n\t\t\t\tif (known) {\n\t\t\t\t\treturn known;\n\t\t\t\t}\n\n\t\t\t\t// unable to decode\n\t\t\t\treturn m;\n\t\t\t}\n\t\t});\n\n\t\treturn text;\n\t}\n\n\tPrism.languages.md = Prism.languages.markdown;\n\n}(Prism));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tbWFya2Rvd24uanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQixjQUFjO0FBQ2Q7QUFDQTtBQUNBLHNEQUFzRCxlQUFlO0FBQ3JFLG1DQUFtQyxFQUFFO0FBQ3JDOzs7QUFHQTtBQUNBLG1HQUFtRyxtQkFBbUI7QUFDdEgsK0JBQStCLEdBQUcsdUJBQXVCLEdBQUc7OztBQUc1RCwrREFBK0Q7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixHQUFHO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxFQUFFLDBCQUEwQixFQUFFO0FBQzFGO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsR0FBRztBQUN6QztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQixLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQixLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0MsT0FBTztBQUM3Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBDQUEwQyxPQUFPO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0QkFBNEIsSUFBSSxZQUFZLElBQUksRUFBRTtBQUNsRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTs7QUFFQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tbWFya2Rvd24uanM/Y2U1NyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKFByaXNtKSB7XG5cblx0Ly8gQWxsb3cgb25seSBvbmUgbGluZSBicmVha1xuXHR2YXIgaW5uZXIgPSAvKD86XFxcXC58W15cXFxcXFxuXFxyXXwoPzpcXG58XFxyXFxuPykoPyFbXFxyXFxuXSkpLy5zb3VyY2U7XG5cblx0LyoqXG5cdCAqIFRoaXMgZnVuY3Rpb24gaXMgaW50ZW5kZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiB0aGUgYm9sZCBvciBpdGFsaWMgcGF0dGVybi5cblx0ICpcblx0ICogVGhpcyBhbHNvIGFkZHMgYSBsb29rYmVoaW5kIGdyb3VwIHRvIHRoZSBnaXZlbiBwYXR0ZXJuIHRvIGVuc3VyZSB0aGF0IHRoZSBwYXR0ZXJuIGlzIG5vdCBiYWNrc2xhc2gtZXNjYXBlZC5cblx0ICpcblx0ICogX05vdGU6XyBLZWVwIGluIG1pbmQgdGhhdCB0aGlzIGFkZHMgYSBjYXB0dXJpbmcgZ3JvdXAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuXG5cdCAqIEByZXR1cm5zIHtSZWdFeHB9XG5cdCAqL1xuXHRmdW5jdGlvbiBjcmVhdGVJbmxpbmUocGF0dGVybikge1xuXHRcdHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoLzxpbm5lcj4vZywgZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5uZXI7IH0pO1xuXHRcdHJldHVybiBSZWdFeHAoLygoPzpefFteXFxcXF0pKD86XFxcXHsyfSkqKS8uc291cmNlICsgJyg/OicgKyBwYXR0ZXJuICsgJyknKTtcblx0fVxuXG5cblx0dmFyIHRhYmxlQ2VsbCA9IC8oPzpcXFxcLnxgYCg/OlteYFxcclxcbl18YCg/IWApKStgYHxgW15gXFxyXFxuXStgfFteXFxcXHxcXHJcXG5gXSkrLy5zb3VyY2U7XG5cdHZhciB0YWJsZVJvdyA9IC9cXHw/X18oPzpcXHxfXykrXFx8Pyg/Oig/OlxcbnxcXHJcXG4/KXwoPyFbXFxzXFxTXSkpLy5zb3VyY2UucmVwbGFjZSgvX18vZywgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGFibGVDZWxsOyB9KTtcblx0dmFyIHRhYmxlTGluZSA9IC9cXHw/WyBcXHRdKjo/LXszLH06P1sgXFx0XSooPzpcXHxbIFxcdF0qOj8tezMsfTo/WyBcXHRdKikrXFx8Pyg/OlxcbnxcXHJcXG4/KS8uc291cmNlO1xuXG5cblx0UHJpc20ubGFuZ3VhZ2VzLm1hcmtkb3duID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnbWFya3VwJywge30pO1xuXHRQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdtYXJrZG93bicsICdwcm9sb2cnLCB7XG5cdFx0J2Zyb250LW1hdHRlci1ibG9jayc6IHtcblx0XHRcdHBhdHRlcm46IC8oXig/OlxccypbXFxyXFxuXSk/KS0tLSg/IS4pW1xcc1xcU10qP1tcXHJcXG5dLS0tKD8hLikvLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHQncHVuY3R1YXRpb24nOiAvXi0tLXwtLS0kLyxcblx0XHRcdFx0J2Zyb250LW1hdHRlcic6IHtcblx0XHRcdFx0XHRwYXR0ZXJuOiAvXFxTKyg/OlxccytcXFMrKSovLFxuXHRcdFx0XHRcdGFsaWFzOiBbJ3lhbWwnLCAnbGFuZ3VhZ2UteWFtbCddLFxuXHRcdFx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLnlhbWxcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0J2Jsb2NrcXVvdGUnOiB7XG5cdFx0XHQvLyA+IC4uLlxuXHRcdFx0cGF0dGVybjogL14+KD86W1xcdCBdKj4pKi9tLFxuXHRcdFx0YWxpYXM6ICdwdW5jdHVhdGlvbidcblx0XHR9LFxuXHRcdCd0YWJsZSc6IHtcblx0XHRcdHBhdHRlcm46IFJlZ0V4cCgnXicgKyB0YWJsZVJvdyArIHRhYmxlTGluZSArICcoPzonICsgdGFibGVSb3cgKyAnKSonLCAnbScpLFxuXHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdCd0YWJsZS1kYXRhLXJvd3MnOiB7XG5cdFx0XHRcdFx0cGF0dGVybjogUmVnRXhwKCdeKCcgKyB0YWJsZVJvdyArIHRhYmxlTGluZSArICcpKD86JyArIHRhYmxlUm93ICsgJykqJCcpLFxuXHRcdFx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdFx0XHQndGFibGUtZGF0YSc6IHtcblx0XHRcdFx0XHRcdFx0cGF0dGVybjogUmVnRXhwKHRhYmxlQ2VsbCksXG5cdFx0XHRcdFx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLm1hcmtkb3duXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0J3B1bmN0dWF0aW9uJzogL1xcfC9cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdCd0YWJsZS1saW5lJzoge1xuXHRcdFx0XHRcdHBhdHRlcm46IFJlZ0V4cCgnXignICsgdGFibGVSb3cgKyAnKScgKyB0YWJsZUxpbmUgKyAnJCcpLFxuXHRcdFx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdFx0XHQncHVuY3R1YXRpb24nOiAvXFx8fDo/LXszLH06Py9cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdCd0YWJsZS1oZWFkZXItcm93Jzoge1xuXHRcdFx0XHRcdHBhdHRlcm46IFJlZ0V4cCgnXicgKyB0YWJsZVJvdyArICckJyksXG5cdFx0XHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdFx0XHQndGFibGUtaGVhZGVyJzoge1xuXHRcdFx0XHRcdFx0XHRwYXR0ZXJuOiBSZWdFeHAodGFibGVDZWxsKSxcblx0XHRcdFx0XHRcdFx0YWxpYXM6ICdpbXBvcnRhbnQnLFxuXHRcdFx0XHRcdFx0XHRpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5tYXJrZG93blxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdCdwdW5jdHVhdGlvbic6IC9cXHwvXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHQnY29kZSc6IFtcblx0XHRcdHtcblx0XHRcdFx0Ly8gUHJlZml4ZWQgYnkgNCBzcGFjZXMgb3IgMSB0YWIgYW5kIHByZWNlZGVkIGJ5IGFuIGVtcHR5IGxpbmVcblx0XHRcdFx0cGF0dGVybjogLygoPzpefFxcbilbIFxcdF0qXFxufCg/Ol58XFxyXFxuPylbIFxcdF0qXFxyXFxuPykoPzogezR9fFxcdCkuKyg/Oig/OlxcbnxcXHJcXG4/KSg/OiB7NH18XFx0KS4rKSovLFxuXHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0XHRhbGlhczogJ2tleXdvcmQnXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHQvLyBgYGBvcHRpb25hbCBsYW5ndWFnZVxuXHRcdFx0XHQvLyBjb2RlIGJsb2NrXG5cdFx0XHRcdC8vIGBgYFxuXHRcdFx0XHRwYXR0ZXJuOiAvXmBgYFtcXHNcXFNdKj9eYGBgJC9tLFxuXHRcdFx0XHRncmVlZHk6IHRydWUsXG5cdFx0XHRcdGluc2lkZToge1xuXHRcdFx0XHRcdCdjb2RlLWJsb2NrJzoge1xuXHRcdFx0XHRcdFx0cGF0dGVybjogL14oYGBgLiooPzpcXG58XFxyXFxuPykpW1xcc1xcU10rPyg/PSg/OlxcbnxcXHJcXG4/KV5gYGAkKS9tLFxuXHRcdFx0XHRcdFx0bG9va2JlaGluZDogdHJ1ZVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0J2NvZGUtbGFuZ3VhZ2UnOiB7XG5cdFx0XHRcdFx0XHRwYXR0ZXJuOiAvXihgYGApLisvLFxuXHRcdFx0XHRcdFx0bG9va2JlaGluZDogdHJ1ZVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0J3B1bmN0dWF0aW9uJzogL2BgYC9cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdF0sXG5cdFx0J3RpdGxlJzogW1xuXHRcdFx0e1xuXHRcdFx0XHQvLyB0aXRsZSAxXG5cdFx0XHRcdC8vID09PT09PT1cblxuXHRcdFx0XHQvLyB0aXRsZSAyXG5cdFx0XHRcdC8vIC0tLS0tLS1cblx0XHRcdFx0cGF0dGVybjogL1xcUy4qKD86XFxufFxcclxcbj8pKD86PT0rfC0tKykoPz1bIFxcdF0qJCkvbSxcblx0XHRcdFx0YWxpYXM6ICdpbXBvcnRhbnQnLFxuXHRcdFx0XHRpbnNpZGU6IHtcblx0XHRcdFx0XHRwdW5jdHVhdGlvbjogLz09KyR8LS0rJC9cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Ly8gIyB0aXRsZSAxXG5cdFx0XHRcdC8vICMjIyMjIyB0aXRsZSA2XG5cdFx0XHRcdHBhdHRlcm46IC8oXlxccyopIy4rL20sXG5cdFx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRcdGFsaWFzOiAnaW1wb3J0YW50Jyxcblx0XHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdFx0cHVuY3R1YXRpb246IC9eIyt8IyskL1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XSxcblx0XHQnaHInOiB7XG5cdFx0XHQvLyAqKipcblx0XHRcdC8vIC0tLVxuXHRcdFx0Ly8gKiAqICpcblx0XHRcdC8vIC0tLS0tLS0tLS0tXG5cdFx0XHRwYXR0ZXJuOiAvKF5cXHMqKShbKi1dKSg/OltcXHQgXSpcXDIpezIsfSg/PVxccyokKS9tLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGFsaWFzOiAncHVuY3R1YXRpb24nXG5cdFx0fSxcblx0XHQnbGlzdCc6IHtcblx0XHRcdC8vICogaXRlbVxuXHRcdFx0Ly8gKyBpdGVtXG5cdFx0XHQvLyAtIGl0ZW1cblx0XHRcdC8vIDEuIGl0ZW1cblx0XHRcdHBhdHRlcm46IC8oXlxccyopKD86WyorLV18XFxkK1xcLikoPz1bXFx0IF0uKS9tLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGFsaWFzOiAncHVuY3R1YXRpb24nXG5cdFx0fSxcblx0XHQndXJsLXJlZmVyZW5jZSc6IHtcblx0XHRcdC8vIFtpZF06IGh0dHA6Ly9leGFtcGxlLmNvbSBcIk9wdGlvbmFsIHRpdGxlXCJcblx0XHRcdC8vIFtpZF06IGh0dHA6Ly9leGFtcGxlLmNvbSAnT3B0aW9uYWwgdGl0bGUnXG5cdFx0XHQvLyBbaWRdOiBodHRwOi8vZXhhbXBsZS5jb20gKE9wdGlvbmFsIHRpdGxlKVxuXHRcdFx0Ly8gW2lkXTogPGh0dHA6Ly9leGFtcGxlLmNvbT4gXCJPcHRpb25hbCB0aXRsZVwiXG5cdFx0XHRwYXR0ZXJuOiAvIT9cXFtbXlxcXV0rXFxdOltcXHQgXSsoPzpcXFMrfDwoPzpcXFxcLnxbXj5cXFxcXSkrPikoPzpbXFx0IF0rKD86XCIoPzpcXFxcLnxbXlwiXFxcXF0pKlwifCcoPzpcXFxcLnxbXidcXFxcXSkqJ3xcXCgoPzpcXFxcLnxbXilcXFxcXSkqXFwpKSk/Lyxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHQndmFyaWFibGUnOiB7XG5cdFx0XHRcdFx0cGF0dGVybjogL14oIT9cXFspW15cXF1dKy8sXG5cdFx0XHRcdFx0bG9va2JlaGluZDogdHJ1ZVxuXHRcdFx0XHR9LFxuXHRcdFx0XHQnc3RyaW5nJzogLyg/OlwiKD86XFxcXC58W15cIlxcXFxdKSpcInwnKD86XFxcXC58W14nXFxcXF0pKid8XFwoKD86XFxcXC58W14pXFxcXF0pKlxcKSkkLyxcblx0XHRcdFx0J3B1bmN0dWF0aW9uJzogL15bXFxbXFxdITpdfFs8Pl0vXG5cdFx0XHR9LFxuXHRcdFx0YWxpYXM6ICd1cmwnXG5cdFx0fSxcblx0XHQnYm9sZCc6IHtcblx0XHRcdC8vICoqc3Ryb25nKipcblx0XHRcdC8vIF9fc3Ryb25nX19cblxuXHRcdFx0Ly8gYWxsb3cgb25lIG5lc3RlZCBpbnN0YW5jZSBvZiBpdGFsaWMgdGV4dCB1c2luZyB0aGUgc2FtZSBkZWxpbWl0ZXJcblx0XHRcdHBhdHRlcm46IGNyZWF0ZUlubGluZSgvXFxiX18oPzooPyFfKTxpbm5lcj58Xyg/Oig/IV8pPGlubmVyPikrXykrX19cXGJ8XFwqXFwqKD86KD8hXFwqKTxpbm5lcj58XFwqKD86KD8hXFwqKTxpbm5lcj4pK1xcKikrXFwqXFwqLy5zb3VyY2UpLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHQnY29udGVudCc6IHtcblx0XHRcdFx0XHRwYXR0ZXJuOiAvKF4uLilbXFxzXFxTXSsoPz0uLiQpLyxcblx0XHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0XHRcdGluc2lkZToge30gLy8gc2VlIGJlbG93XG5cdFx0XHRcdH0sXG5cdFx0XHRcdCdwdW5jdHVhdGlvbic6IC9cXCpcXCp8X18vXG5cdFx0XHR9XG5cdFx0fSxcblx0XHQnaXRhbGljJzoge1xuXHRcdFx0Ly8gKmVtKlxuXHRcdFx0Ly8gX2VtX1xuXG5cdFx0XHQvLyBhbGxvdyBvbmUgbmVzdGVkIGluc3RhbmNlIG9mIGJvbGQgdGV4dCB1c2luZyB0aGUgc2FtZSBkZWxpbWl0ZXJcblx0XHRcdHBhdHRlcm46IGNyZWF0ZUlubGluZSgvXFxiXyg/Oig/IV8pPGlubmVyPnxfXyg/Oig/IV8pPGlubmVyPikrX18pK19cXGJ8XFwqKD86KD8hXFwqKTxpbm5lcj58XFwqXFwqKD86KD8hXFwqKTxpbm5lcj4pK1xcKlxcKikrXFwqLy5zb3VyY2UpLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHQnY29udGVudCc6IHtcblx0XHRcdFx0XHRwYXR0ZXJuOiAvKF4uKVtcXHNcXFNdKyg/PS4kKS8sXG5cdFx0XHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdFx0XHRpbnNpZGU6IHt9IC8vIHNlZSBiZWxvd1xuXHRcdFx0XHR9LFxuXHRcdFx0XHQncHVuY3R1YXRpb24nOiAvWypfXS9cblx0XHRcdH1cblx0XHR9LFxuXHRcdCdzdHJpa2UnOiB7XG5cdFx0XHQvLyB+fnN0cmlrZSB0aHJvdWdofn5cblx0XHRcdC8vIH5zdHJpa2V+XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL3N0cmljdFxuXHRcdFx0cGF0dGVybjogY3JlYXRlSW5saW5lKC8ofn4/KSg/Oig/IX4pPGlubmVyPikrXFwyLy5zb3VyY2UpLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHQnY29udGVudCc6IHtcblx0XHRcdFx0XHRwYXR0ZXJuOiAvKF5+fj8pW1xcc1xcU10rKD89XFwxJCkvLFxuXHRcdFx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRcdFx0aW5zaWRlOiB7fSAvLyBzZWUgYmVsb3dcblx0XHRcdFx0fSxcblx0XHRcdFx0J3B1bmN0dWF0aW9uJzogL35+Py9cblx0XHRcdH1cblx0XHR9LFxuXHRcdCdjb2RlLXNuaXBwZXQnOiB7XG5cdFx0XHQvLyBgY29kZWBcblx0XHRcdC8vIGBgY29kZWBgXG5cdFx0XHRwYXR0ZXJuOiAvKF58W15cXFxcYF0pKD86YGBbXmBcXHJcXG5dKyg/OmBbXmBcXHJcXG5dKykqYGAoPyFgKXxgW15gXFxyXFxuXStgKD8hYCkpLyxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRncmVlZHk6IHRydWUsXG5cdFx0XHRhbGlhczogWydjb2RlJywgJ2tleXdvcmQnXVxuXHRcdH0sXG5cdFx0J3VybCc6IHtcblx0XHRcdC8vIFtleGFtcGxlXShodHRwOi8vZXhhbXBsZS5jb20gXCJPcHRpb25hbCB0aXRsZVwiKVxuXHRcdFx0Ly8gW2V4YW1wbGVdW2lkXVxuXHRcdFx0Ly8gW2V4YW1wbGVdIFtpZF1cblx0XHRcdHBhdHRlcm46IGNyZWF0ZUlubGluZSgvIT9cXFsoPzooPyFcXF0pPGlubmVyPikrXFxdKD86XFwoW15cXHMpXSsoPzpbXFx0IF0rXCIoPzpcXFxcLnxbXlwiXFxcXF0pKlwiKT9cXCl8WyBcXHRdP1xcWyg/Oig/IVxcXSk8aW5uZXI+KStcXF0pLy5zb3VyY2UpLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHQnb3BlcmF0b3InOiAvXiEvLFxuXHRcdFx0XHQnY29udGVudCc6IHtcblx0XHRcdFx0XHRwYXR0ZXJuOiAvKF5cXFspW15cXF1dKyg/PVxcXSkvLFxuXHRcdFx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRcdFx0aW5zaWRlOiB7fSAvLyBzZWUgYmVsb3dcblx0XHRcdFx0fSxcblx0XHRcdFx0J3ZhcmlhYmxlJzoge1xuXHRcdFx0XHRcdHBhdHRlcm46IC8oXlxcXVsgXFx0XT9cXFspW15cXF1dKyg/PVxcXSQpLyxcblx0XHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdCd1cmwnOiB7XG5cdFx0XHRcdFx0cGF0dGVybjogLyheXFxdXFwoKVteXFxzKV0rLyxcblx0XHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdCdzdHJpbmcnOiB7XG5cdFx0XHRcdFx0cGF0dGVybjogLyheWyBcXHRdKylcIig/OlxcXFwufFteXCJcXFxcXSkqXCIoPz1cXCkkKS8sXG5cdFx0XHRcdFx0bG9va2JlaGluZDogdHJ1ZVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRbJ3VybCcsICdib2xkJywgJ2l0YWxpYycsICdzdHJpa2UnXS5mb3JFYWNoKGZ1bmN0aW9uICh0b2tlbikge1xuXHRcdFsndXJsJywgJ2JvbGQnLCAnaXRhbGljJywgJ3N0cmlrZScsICdjb2RlLXNuaXBwZXQnXS5mb3JFYWNoKGZ1bmN0aW9uIChpbnNpZGUpIHtcblx0XHRcdGlmICh0b2tlbiAhPT0gaW5zaWRlKSB7XG5cdFx0XHRcdFByaXNtLmxhbmd1YWdlcy5tYXJrZG93blt0b2tlbl0uaW5zaWRlLmNvbnRlbnQuaW5zaWRlW2luc2lkZV0gPSBQcmlzbS5sYW5ndWFnZXMubWFya2Rvd25baW5zaWRlXTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cblx0UHJpc20uaG9va3MuYWRkKCdhZnRlci10b2tlbml6ZScsIGZ1bmN0aW9uIChlbnYpIHtcblx0XHRpZiAoZW52Lmxhbmd1YWdlICE9PSAnbWFya2Rvd24nICYmIGVudi5sYW5ndWFnZSAhPT0gJ21kJykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHdhbGtUb2tlbnModG9rZW5zKSB7XG5cdFx0XHRpZiAoIXRva2VucyB8fCB0eXBlb2YgdG9rZW5zID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gdG9rZW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHR2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdFx0aWYgKHRva2VuLnR5cGUgIT09ICdjb2RlJykge1xuXHRcdFx0XHRcdHdhbGtUb2tlbnModG9rZW4uY29udGVudCk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvKlxuXHRcdFx0XHQgKiBBZGQgdGhlIGNvcnJlY3QgYGxhbmd1YWdlLXh4eHhgIGNsYXNzIHRvIHRoaXMgY29kZSBibG9jay4gS2VlcCBpbiBtaW5kIHRoYXQgdGhlIGBjb2RlLWxhbmd1YWdlYCB0b2tlblxuXHRcdFx0XHQgKiBpcyBvcHRpb25hbC4gQnV0IHRoZSBncmFtbWFyIGlzIGRlZmluZWQgc28gdGhhdCB0aGVyZSBpcyBvbmx5IG9uZSBjYXNlIHdlIGhhdmUgdG8gaGFuZGxlOlxuXHRcdFx0XHQgKlxuXHRcdFx0XHQgKiB0b2tlbi5jb250ZW50ID0gW1xuXHRcdFx0XHQgKiAgICAgPHNwYW4gY2xhc3M9XCJwdW5jdHVhdGlvblwiPmBgYDwvc3Bhbj4sXG5cdFx0XHRcdCAqICAgICA8c3BhbiBjbGFzcz1cImNvZGUtbGFuZ3VhZ2VcIj54eHh4PC9zcGFuPixcblx0XHRcdFx0ICogICAgICdcXG4nLCAvLyBleGFjdGx5IG9uZSBuZXcgbGluZXMgKFxcciBvciBcXG4gb3IgXFxyXFxuKVxuXHRcdFx0XHQgKiAgICAgPHNwYW4gY2xhc3M9XCJjb2RlLWJsb2NrXCI+Li4uPC9zcGFuPixcblx0XHRcdFx0ICogICAgICdcXG4nLCAvLyBleGFjdGx5IG9uZSBuZXcgbGluZXMgYWdhaW5cblx0XHRcdFx0ICogICAgIDxzcGFuIGNsYXNzPVwicHVuY3R1YXRpb25cIj5gYGA8L3NwYW4+XG5cdFx0XHRcdCAqIF07XG5cdFx0XHRcdCAqL1xuXG5cdFx0XHRcdHZhciBjb2RlTGFuZyA9IHRva2VuLmNvbnRlbnRbMV07XG5cdFx0XHRcdHZhciBjb2RlQmxvY2sgPSB0b2tlbi5jb250ZW50WzNdO1xuXG5cdFx0XHRcdGlmIChjb2RlTGFuZyAmJiBjb2RlQmxvY2sgJiZcblx0XHRcdFx0XHRjb2RlTGFuZy50eXBlID09PSAnY29kZS1sYW5ndWFnZScgJiYgY29kZUJsb2NrLnR5cGUgPT09ICdjb2RlLWJsb2NrJyAmJlxuXHRcdFx0XHRcdHR5cGVvZiBjb2RlTGFuZy5jb250ZW50ID09PSAnc3RyaW5nJykge1xuXG5cdFx0XHRcdFx0Ly8gdGhpcyBtaWdodCBiZSBhIGxhbmd1YWdlIHRoYXQgUHJpc20gZG9lcyBub3Qgc3VwcG9ydFxuXG5cdFx0XHRcdFx0Ly8gZG8gc29tZSByZXBsYWNlbWVudHMgdG8gc3VwcG9ydCBDKyssIEMjLCBhbmQgRiNcblx0XHRcdFx0XHR2YXIgbGFuZyA9IGNvZGVMYW5nLmNvbnRlbnQucmVwbGFjZSgvXFxiIy9nLCAnc2hhcnAnKS5yZXBsYWNlKC9cXGJcXCtcXCsvZywgJ3BwJyk7XG5cdFx0XHRcdFx0Ly8gb25seSB1c2UgdGhlIGZpcnN0IHdvcmRcblx0XHRcdFx0XHRsYW5nID0gKC9bYS16XVtcXHctXSovaS5leGVjKGxhbmcpIHx8IFsnJ10pWzBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0dmFyIGFsaWFzID0gJ2xhbmd1YWdlLScgKyBsYW5nO1xuXG5cdFx0XHRcdFx0Ly8gYWRkIGFsaWFzXG5cdFx0XHRcdFx0aWYgKCFjb2RlQmxvY2suYWxpYXMpIHtcblx0XHRcdFx0XHRcdGNvZGVCbG9jay5hbGlhcyA9IFthbGlhc107XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgY29kZUJsb2NrLmFsaWFzID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdFx0Y29kZUJsb2NrLmFsaWFzID0gW2NvZGVCbG9jay5hbGlhcywgYWxpYXNdO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb2RlQmxvY2suYWxpYXMucHVzaChhbGlhcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0d2Fsa1Rva2VucyhlbnYudG9rZW5zKTtcblx0fSk7XG5cblx0UHJpc20uaG9va3MuYWRkKCd3cmFwJywgZnVuY3Rpb24gKGVudikge1xuXHRcdGlmIChlbnYudHlwZSAhPT0gJ2NvZGUtYmxvY2snKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGNvZGVMYW5nID0gJyc7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBlbnYuY2xhc3Nlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHZhciBjbHMgPSBlbnYuY2xhc3Nlc1tpXTtcblx0XHRcdHZhciBtYXRjaCA9IC9sYW5ndWFnZS0oLispLy5leGVjKGNscyk7XG5cdFx0XHRpZiAobWF0Y2gpIHtcblx0XHRcdFx0Y29kZUxhbmcgPSBtYXRjaFsxXTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIGdyYW1tYXIgPSBQcmlzbS5sYW5ndWFnZXNbY29kZUxhbmddO1xuXG5cdFx0aWYgKCFncmFtbWFyKSB7XG5cdFx0XHRpZiAoY29kZUxhbmcgJiYgY29kZUxhbmcgIT09ICdub25lJyAmJiBQcmlzbS5wbHVnaW5zLmF1dG9sb2FkZXIpIHtcblx0XHRcdFx0dmFyIGlkID0gJ21kLScgKyBuZXcgRGF0ZSgpLnZhbHVlT2YoKSArICctJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDFlMTYpO1xuXHRcdFx0XHRlbnYuYXR0cmlidXRlc1snaWQnXSA9IGlkO1xuXG5cdFx0XHRcdFByaXNtLnBsdWdpbnMuYXV0b2xvYWRlci5sb2FkTGFuZ3VhZ2VzKGNvZGVMYW5nLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0dmFyIGVsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcblx0XHRcdFx0XHRpZiAoZWxlKSB7XG5cdFx0XHRcdFx0XHRlbGUuaW5uZXJIVE1MID0gUHJpc20uaGlnaGxpZ2h0KGVsZS50ZXh0Q29udGVudCwgUHJpc20ubGFuZ3VhZ2VzW2NvZGVMYW5nXSwgY29kZUxhbmcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVudi5jb250ZW50ID0gUHJpc20uaGlnaGxpZ2h0KHRleHRDb250ZW50KGVudi5jb250ZW50KSwgZ3JhbW1hciwgY29kZUxhbmcpO1xuXHRcdH1cblx0fSk7XG5cblx0dmFyIHRhZ1BhdHRlcm4gPSBSZWdFeHAoUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcucGF0dGVybi5zb3VyY2UsICdnaScpO1xuXG5cdC8qKlxuXHQgKiBBIGxpc3Qgb2Yga25vd24gZW50aXR5IG5hbWVzLlxuXHQgKlxuXHQgKiBUaGlzIHdpbGwgYWx3YXlzIGJlIGluY29tcGxldGUgdG8gc2F2ZSBzcGFjZS4gVGhlIGN1cnJlbnQgbGlzdCBpcyB0aGUgb25lIHVzZWQgYnkgbG93ZGFzaCdzIHVuZXNjYXBlIGZ1bmN0aW9uLlxuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbG9kYXNoL2xvZGFzaC9ibG9iLzJkYTAyNGMzYjRmOTk0N2E0ODUxNzYzOWRlNzU2MDQ1N2NkNGVjNmMvdW5lc2NhcGUuanMjTDJ9XG5cdCAqL1xuXHR2YXIgS05PV05fRU5USVRZX05BTUVTID0ge1xuXHRcdCdhbXAnOiAnJicsXG5cdFx0J2x0JzogJzwnLFxuXHRcdCdndCc6ICc+Jyxcblx0XHQncXVvdCc6ICdcIicsXG5cdH07XG5cblx0Ly8gSUUgMTEgZG9lc24ndCBzdXBwb3J0IGBTdHJpbmcuZnJvbUNvZGVQb2ludGBcblx0dmFyIGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludCB8fCBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB0ZXh0IGNvbnRlbnQgb2YgYSBnaXZlbiBIVE1MIHNvdXJjZSBjb2RlIHN0cmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcblx0ICogQHJldHVybnMge3N0cmluZ31cblx0ICovXG5cdGZ1bmN0aW9uIHRleHRDb250ZW50KGh0bWwpIHtcblx0XHQvLyByZW1vdmUgYWxsIHRhZ3Ncblx0XHR2YXIgdGV4dCA9IGh0bWwucmVwbGFjZSh0YWdQYXR0ZXJuLCAnJyk7XG5cblx0XHQvLyBkZWNvZGUga25vd24gZW50aXRpZXNcblx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKC8mKFxcd3sxLDh9fCN4P1tcXGRhLWZdezEsOH0pOy9naSwgZnVuY3Rpb24gKG0sIGNvZGUpIHtcblx0XHRcdGNvZGUgPSBjb2RlLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmIChjb2RlWzBdID09PSAnIycpIHtcblx0XHRcdFx0dmFyIHZhbHVlO1xuXHRcdFx0XHRpZiAoY29kZVsxXSA9PT0gJ3gnKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBwYXJzZUludChjb2RlLnNsaWNlKDIpLCAxNik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBOdW1iZXIoY29kZS5zbGljZSgxKSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZnJvbUNvZGVQb2ludCh2YWx1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIga25vd24gPSBLTk9XTl9FTlRJVFlfTkFNRVNbY29kZV07XG5cdFx0XHRcdGlmIChrbm93bikge1xuXHRcdFx0XHRcdHJldHVybiBrbm93bjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHVuYWJsZSB0byBkZWNvZGVcblx0XHRcdFx0cmV0dXJuIG07XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdGV4dDtcblx0fVxuXG5cdFByaXNtLmxhbmd1YWdlcy5tZCA9IFByaXNtLmxhbmd1YWdlcy5tYXJrZG93bjtcblxufShQcmlzbSkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prismjs/components/prism-markdown.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prismjs/components/prism-markup.js":
/*!*********************************************************!*\
  !*** ./node_modules/prismjs/components/prism-markup.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Prism.languages.markup = {\n\t'comment': {\n\t\tpattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n\t\tgreedy: true\n\t},\n\t'prolog': {\n\t\tpattern: /<\\?[\\s\\S]+?\\?>/,\n\t\tgreedy: true\n\t},\n\t'doctype': {\n\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'internal-subset': {\n\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t'string': {\n\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t'punctuation': /^<!|>$|[[\\]]/,\n\t\t\t'doctype-tag': /^DOCTYPE/i,\n\t\t\t'name': /[^\\s<>'\"]+/\n\t\t}\n\t},\n\t'cdata': {\n\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\tgreedy: true\n\t},\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'special-attr': [],\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^(\\s*)[\"']|[\"']$/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': [\n\t\t{\n\t\t\tpattern: /&[\\da-z]{1,8};/i,\n\t\t\talias: 'named-entity'\n\t\t},\n\t\t/&#x?[\\da-f]{1,8};/i\n\t]\n};\n\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n\tPrism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function (env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n\t/**\n\t * Adds an inlined language to markup.\n\t *\n\t * An example of an inlined language is CSS with `<style>` tags.\n\t *\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addInlined('style', 'css');\n\t */\n\tvalue: function addInlined(tagName, lang) {\n\t\tvar includedCdataInside = {};\n\t\tincludedCdataInside['language-' + lang] = {\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n\n\t\tvar inside = {\n\t\t\t'included-cdata': {\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\t\t\tinside: includedCdataInside\n\t\t\t}\n\t\t};\n\t\tinside['language-' + lang] = {\n\t\t\tpattern: /[\\s\\S]+/,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\n\t\tvar def = {};\n\t\tdef[tagName] = {\n\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: inside\n\t\t};\n\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\n\t}\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n\t/**\n\t * Adds an pattern to highlight languages embedded in HTML attributes.\n\t *\n\t * An example of an inlined language is CSS with `style` attributes.\n\t *\n\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addAttribute('style', 'css');\n\t */\n\tvalue: function (attrName, lang) {\n\t\tPrism.languages.markup.tag.inside['special-attr'].push({\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n\t\t\t\t'i'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'attr-name': /^[^\\s=]+/,\n\t\t\t\t'attr-value': {\n\t\t\t\t\tpattern: /=[\\s\\S]+/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'value': {\n\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n\t\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\t\talias: [lang, 'language-' + lang],\n\t\t\t\t\t\t\tinside: Prism.languages[lang]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n});\n\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prismjs/components/prism-markup.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prismjs/components/prism-objectivec.js":
/*!*************************************************************!*\
  !*** ./node_modules/prismjs/components/prism-objectivec.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Prism.languages.objectivec = Prism.languages.extend('c', {\n\t'string': {\n\t\tpattern: /@?\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n\t\tgreedy: true\n\t},\n\t'keyword': /\\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n\t'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\n\ndelete Prism.languages.objectivec['class-name'];\n\nPrism.languages.objc = Prism.languages.objectivec;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tb2JqZWN0aXZlYy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLW9iamVjdGl2ZWMuanM/ZmNhOSJdLCJzb3VyY2VzQ29udGVudCI6WyJQcmlzbS5sYW5ndWFnZXMub2JqZWN0aXZlYyA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2MnLCB7XG5cdCdzdHJpbmcnOiB7XG5cdFx0cGF0dGVybjogL0A/XCIoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXxbXlwiXFxcXFxcclxcbl0pKlwiLyxcblx0XHRncmVlZHk6IHRydWVcblx0fSxcblx0J2tleXdvcmQnOiAvXFxiKD86YXNtfGF1dG98YnJlYWt8Y2FzZXxjaGFyfGNvbnN0fGNvbnRpbnVlfGRlZmF1bHR8ZG98ZG91YmxlfGVsc2V8ZW51bXxleHRlcm58ZmxvYXR8Zm9yfGdvdG98aWZ8aW58aW5saW5lfGludHxsb25nfHJlZ2lzdGVyfHJldHVybnxzZWxmfHNob3J0fHNpZ25lZHxzaXplb2Z8c3RhdGljfHN0cnVjdHxzdXBlcnxzd2l0Y2h8dHlwZWRlZnx0eXBlb2Z8dW5pb258dW5zaWduZWR8dm9pZHx2b2xhdGlsZXx3aGlsZSlcXGJ8KD86QGludGVyZmFjZXxAZW5kfEBpbXBsZW1lbnRhdGlvbnxAcHJvdG9jb2x8QGNsYXNzfEBwdWJsaWN8QHByb3RlY3RlZHxAcHJpdmF0ZXxAcHJvcGVydHl8QHRyeXxAY2F0Y2h8QGZpbmFsbHl8QHRocm93fEBzeW50aGVzaXplfEBkeW5hbWljfEBzZWxlY3RvcilcXGIvLFxuXHQnb3BlcmF0b3InOiAvLVstPl0/fFxcK1xcKz98IT0/fDw8Pz0/fD4+Pz0/fD09P3wmJj98XFx8XFx8P3xbfl4lPypcXC9AXS9cbn0pO1xuXG5kZWxldGUgUHJpc20ubGFuZ3VhZ2VzLm9iamVjdGl2ZWNbJ2NsYXNzLW5hbWUnXTtcblxuUHJpc20ubGFuZ3VhZ2VzLm9iamMgPSBQcmlzbS5sYW5ndWFnZXMub2JqZWN0aXZlYztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prismjs/components/prism-objectivec.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prismjs/components/prism-powershell.js":
/*!*************************************************************!*\
  !*** ./node_modules/prismjs/components/prism-powershell.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("(function (Prism) {\n\n\tvar powershell = Prism.languages.powershell = {\n\t\t'comment': [\n\t\t\t{\n\t\t\t\tpattern: /(^|[^`])<#[\\s\\S]*?#>/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(^|[^`])#.*/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'string': [\n\t\t\t{\n\t\t\t\tpattern: /\"(?:`[\\s\\S]|[^`\"])*\"/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /'(?:[^']|'')*'/,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\t\t// Matches name spaces as well as casts, attribute decorators. Force starting with letter to avoid matching array indices\n\t\t// Supports two levels of nested brackets (e.g. `[OutputType([System.Collections.Generic.List[int]])]`)\n\t\t'namespace': /\\[[a-z](?:\\[(?:\\[[^\\]]*\\]|[^\\[\\]])*\\]|[^\\[\\]])*\\]/i,\n\t\t'boolean': /\\$(?:false|true)\\b/i,\n\t\t'variable': /\\$\\w+\\b/,\n\t\t// Cmdlets and aliases. Aliases should come last, otherwise \"write\" gets preferred over \"write-host\" for example\n\t\t// Get-Command | ?{ $_.ModuleName -match \"Microsoft.PowerShell.(Util|Core|Management)\" }\n\t\t// Get-Alias | ?{ $_.ReferencedCommand.Module.Name -match \"Microsoft.PowerShell.(Util|Core|Management)\" }\n\t\t'function': [\n\t\t\t/\\b(?:Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|ForEach|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Sort|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Tee|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Where|Write)-[a-z]+\\b/i,\n\t\t\t/\\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\\b/i\n\t\t],\n\t\t// per http://technet.microsoft.com/en-us/library/hh847744.aspx\n\t\t'keyword': /\\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\\b/i,\n\t\t'operator': {\n\t\t\tpattern: /(^|\\W)(?:!|-(?:b?(?:and|x?or)|as|(?:Not)?(?:Contains|In|Like|Match)|eq|ge|gt|is(?:Not)?|Join|le|lt|ne|not|Replace|sh[lr])\\b|-[-=]?|\\+[+=]?|[*\\/%]=?)/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'punctuation': /[|{}[\\];(),.]/\n\t};\n\n\t// Variable interpolation inside strings, and nested expressions\n\tpowershell.string[0].inside = {\n\t\t'function': {\n\t\t\t// Allow for one level of nesting\n\t\t\tpattern: /(^|[^`])\\$\\((?:\\$\\([^\\r\\n()]*\\)|(?!\\$\\()[^\\r\\n)])*\\)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: powershell\n\t\t},\n\t\t'boolean': powershell.boolean,\n\t\t'variable': powershell.variable,\n\t};\n\n}(Prism));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tcG93ZXJzaGVsbC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxzQkFBc0IsSUFBSTtBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUEsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLXBvd2Vyc2hlbGwuanM/OGI1YiJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKFByaXNtKSB7XG5cblx0dmFyIHBvd2Vyc2hlbGwgPSBQcmlzbS5sYW5ndWFnZXMucG93ZXJzaGVsbCA9IHtcblx0XHQnY29tbWVudCc6IFtcblx0XHRcdHtcblx0XHRcdFx0cGF0dGVybjogLyhefFteYF0pPCNbXFxzXFxTXSo/Iz4vLFxuXHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwYXR0ZXJuOiAvKF58W15gXSkjLiovLFxuXHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0XHR9XG5cdFx0XSxcblx0XHQnc3RyaW5nJzogW1xuXHRcdFx0e1xuXHRcdFx0XHRwYXR0ZXJuOiAvXCIoPzpgW1xcc1xcU118W15gXCJdKSpcIi8sXG5cdFx0XHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRcdFx0aW5zaWRlOiBudWxsIC8vIHNlZSBiZWxvd1xuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGF0dGVybjogLycoPzpbXiddfCcnKSonLyxcblx0XHRcdFx0Z3JlZWR5OiB0cnVlXG5cdFx0XHR9XG5cdFx0XSxcblx0XHQvLyBNYXRjaGVzIG5hbWUgc3BhY2VzIGFzIHdlbGwgYXMgY2FzdHMsIGF0dHJpYnV0ZSBkZWNvcmF0b3JzLiBGb3JjZSBzdGFydGluZyB3aXRoIGxldHRlciB0byBhdm9pZCBtYXRjaGluZyBhcnJheSBpbmRpY2VzXG5cdFx0Ly8gU3VwcG9ydHMgdHdvIGxldmVscyBvZiBuZXN0ZWQgYnJhY2tldHMgKGUuZy4gYFtPdXRwdXRUeXBlKFtTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5MaXN0W2ludF1dKV1gKVxuXHRcdCduYW1lc3BhY2UnOiAvXFxbW2Etel0oPzpcXFsoPzpcXFtbXlxcXV0qXFxdfFteXFxbXFxdXSkqXFxdfFteXFxbXFxdXSkqXFxdL2ksXG5cdFx0J2Jvb2xlYW4nOiAvXFwkKD86ZmFsc2V8dHJ1ZSlcXGIvaSxcblx0XHQndmFyaWFibGUnOiAvXFwkXFx3K1xcYi8sXG5cdFx0Ly8gQ21kbGV0cyBhbmQgYWxpYXNlcy4gQWxpYXNlcyBzaG91bGQgY29tZSBsYXN0LCBvdGhlcndpc2UgXCJ3cml0ZVwiIGdldHMgcHJlZmVycmVkIG92ZXIgXCJ3cml0ZS1ob3N0XCIgZm9yIGV4YW1wbGVcblx0XHQvLyBHZXQtQ29tbWFuZCB8ID97ICRfLk1vZHVsZU5hbWUgLW1hdGNoIFwiTWljcm9zb2Z0LlBvd2VyU2hlbGwuKFV0aWx8Q29yZXxNYW5hZ2VtZW50KVwiIH1cblx0XHQvLyBHZXQtQWxpYXMgfCA/eyAkXy5SZWZlcmVuY2VkQ29tbWFuZC5Nb2R1bGUuTmFtZSAtbWF0Y2ggXCJNaWNyb3NvZnQuUG93ZXJTaGVsbC4oVXRpbHxDb3JlfE1hbmFnZW1lbnQpXCIgfVxuXHRcdCdmdW5jdGlvbic6IFtcblx0XHRcdC9cXGIoPzpBZGR8QXBwcm92ZXxBc3NlcnR8QmFja3VwfEJsb2NrfENoZWNrcG9pbnR8Q2xlYXJ8Q2xvc2V8Q29tcGFyZXxDb21wbGV0ZXxDb21wcmVzc3xDb25maXJtfENvbm5lY3R8Q29udmVydHxDb252ZXJ0RnJvbXxDb252ZXJ0VG98Q29weXxEZWJ1Z3xEZW55fERpc2FibGV8RGlzY29ubmVjdHxEaXNtb3VudHxFZGl0fEVuYWJsZXxFbnRlcnxFeGl0fEV4cGFuZHxFeHBvcnR8RmluZHxGb3JFYWNofEZvcm1hdHxHZXR8R3JhbnR8R3JvdXB8SGlkZXxJbXBvcnR8SW5pdGlhbGl6ZXxJbnN0YWxsfEludm9rZXxKb2lufExpbWl0fExvY2t8TWVhc3VyZXxNZXJnZXxNb3ZlfE5ld3xPcGVufE9wdGltaXplfE91dHxQaW5nfFBvcHxQcm90ZWN0fFB1Ymxpc2h8UHVzaHxSZWFkfFJlY2VpdmV8UmVkb3xSZWdpc3RlcnxSZW1vdmV8UmVuYW1lfFJlcGFpcnxSZXF1ZXN0fFJlc2V0fFJlc2l6ZXxSZXNvbHZlfFJlc3RhcnR8UmVzdG9yZXxSZXN1bWV8UmV2b2tlfFNhdmV8U2VhcmNofFNlbGVjdHxTZW5kfFNldHxTaG93fFNraXB8U29ydHxTcGxpdHxTdGFydHxTdGVwfFN0b3B8U3VibWl0fFN1c3BlbmR8U3dpdGNofFN5bmN8VGVlfFRlc3R8VHJhY2V8VW5ibG9ja3xVbmRvfFVuaW5zdGFsbHxVbmxvY2t8VW5wcm90ZWN0fFVucHVibGlzaHxVbnJlZ2lzdGVyfFVwZGF0ZXxVc2V8V2FpdHxXYXRjaHxXaGVyZXxXcml0ZSktW2Etel0rXFxiL2ksXG5cdFx0XHQvXFxiKD86YWN8Y2F0fGNoZGlyfGNsY3xjbGl8Y2xwfGNsdnxjb21wYXJlfGNvcHl8Y3B8Y3BpfGNwcHxjdnBhfGRicHxkZWx8ZGlmZnxkaXJ8ZWJwfGVjaG98ZXBhbHxlcGNzdnxlcHNufGVyYXNlfGZjfGZsfGZ0fGZ3fGdhbHxnYnB8Z2N8Z2NpfGdjc3xnZHJ8Z2l8Z2x8Z218Z3B8Z3BzfGdyb3VwfGdzdnxndXxndnxnd21pfGlleHxpaXxpcGFsfGlwY3N2fGlwc258aXJtfGl3bWl8aXdyfGtpbGx8bHB8bHN8bWVhc3VyZXxtaXxtb3VudHxtb3ZlfG1wfG12fG5hbHxuZHJ8bml8bnZ8b2d2fHBvcGR8cHN8cHVzaGR8cHdkfHJicHxyZHxyZHJ8cmVufHJpfHJtfHJtZGlyfHJuaXxybnB8cnB8cnZ8cnZwYXxyd21pfHNhbHxzYXBzfHNhc3Z8c2JwfHNjfHNlbGVjdHxzZXR8c2hjbXxzaXxzbHxzbGVlcHxzbHN8c29ydHxzcHxzcHBzfHNwc3Z8c3RhcnR8c3Z8c3dtaXx0ZWV8dHJjbXx0eXBlfHdyaXRlKVxcYi9pXG5cdFx0XSxcblx0XHQvLyBwZXIgaHR0cDovL3RlY2huZXQubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2hoODQ3NzQ0LmFzcHhcblx0XHQna2V5d29yZCc6IC9cXGIoPzpCZWdpbnxCcmVha3xDYXRjaHxDbGFzc3xDb250aW51ZXxEYXRhfERlZmluZXxEb3xEeW5hbWljUGFyYW18RWxzZXxFbHNlSWZ8RW5kfEV4aXR8RmlsdGVyfEZpbmFsbHl8Rm9yfEZvckVhY2h8RnJvbXxGdW5jdGlvbnxJZnxJbmxpbmVTY3JpcHR8UGFyYWxsZWx8UGFyYW18UHJvY2Vzc3xSZXR1cm58U2VxdWVuY2V8U3dpdGNofFRocm93fFRyYXB8VHJ5fFVudGlsfFVzaW5nfFZhcnxXaGlsZXxXb3JrZmxvdylcXGIvaSxcblx0XHQnb3BlcmF0b3InOiB7XG5cdFx0XHRwYXR0ZXJuOiAvKF58XFxXKSg/OiF8LSg/OmI/KD86YW5kfHg/b3IpfGFzfCg/Ok5vdCk/KD86Q29udGFpbnN8SW58TGlrZXxNYXRjaCl8ZXF8Z2V8Z3R8aXMoPzpOb3QpP3xKb2lufGxlfGx0fG5lfG5vdHxSZXBsYWNlfHNoW2xyXSlcXGJ8LVstPV0/fFxcK1srPV0/fFsqXFwvJV09PykvaSxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWVcblx0XHR9LFxuXHRcdCdwdW5jdHVhdGlvbic6IC9bfHt9W1xcXTsoKSwuXS9cblx0fTtcblxuXHQvLyBWYXJpYWJsZSBpbnRlcnBvbGF0aW9uIGluc2lkZSBzdHJpbmdzLCBhbmQgbmVzdGVkIGV4cHJlc3Npb25zXG5cdHBvd2Vyc2hlbGwuc3RyaW5nWzBdLmluc2lkZSA9IHtcblx0XHQnZnVuY3Rpb24nOiB7XG5cdFx0XHQvLyBBbGxvdyBmb3Igb25lIGxldmVsIG9mIG5lc3Rpbmdcblx0XHRcdHBhdHRlcm46IC8oXnxbXmBdKVxcJFxcKCg/OlxcJFxcKFteXFxyXFxuKCldKlxcKXwoPyFcXCRcXCgpW15cXHJcXG4pXSkqXFwpLyxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRpbnNpZGU6IHBvd2Vyc2hlbGxcblx0XHR9LFxuXHRcdCdib29sZWFuJzogcG93ZXJzaGVsbC5ib29sZWFuLFxuXHRcdCd2YXJpYWJsZSc6IHBvd2Vyc2hlbGwudmFyaWFibGUsXG5cdH07XG5cbn0oUHJpc20pKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prismjs/components/prism-powershell.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prismjs/components/prism-python.js":
/*!*********************************************************!*\
  !*** ./node_modules/prismjs/components/prism-python.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Prism.languages.python = {\n\t'comment': {\n\t\tpattern: /(^|[^\\\\])#.*/,\n\t\tlookbehind: true,\n\t\tgreedy: true\n\t},\n\t'string-interpolation': {\n\t\tpattern: /(?:f|fr|rf)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'interpolation': {\n\t\t\t\t// \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n\t\t\t\tpattern: /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'format-spec': {\n\t\t\t\t\t\tpattern: /(:)[^:(){}]+(?=\\}$)/,\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t},\n\t\t\t\t\t'conversion-option': {\n\t\t\t\t\t\tpattern: /![sra](?=[:}]$)/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: null\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t},\n\t'triple-quoted-string': {\n\t\tpattern: /(?:[rub]|br|rb)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n\t\tgreedy: true,\n\t\talias: 'string'\n\t},\n\t'string': {\n\t\tpattern: /(?:[rub]|br|rb)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n\t\tgreedy: true\n\t},\n\t'function': {\n\t\tpattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n\t\tlookbehind: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\bclass\\s+)\\w+/i,\n\t\tlookbehind: true\n\t},\n\t'decorator': {\n\t\tpattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/m,\n\t\tlookbehind: true,\n\t\talias: ['annotation', 'punctuation'],\n\t\tinside: {\n\t\t\t'punctuation': /\\./\n\t\t}\n\t},\n\t'keyword': /\\b(?:_(?=\\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n\t'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n\t'boolean': /\\b(?:False|None|True)\\b/,\n\t'number': /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?(?!\\w)/i,\n\t'operator': /[-+%=]=?|!=|:=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\nPrism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\n\nPrism.languages.py = Prism.languages.python;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tcHl0aG9uLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsZ0ZBQWdGO0FBQ3pGLHVCQUF1QixPQUFPLEVBQUUsS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLFFBQVEsSUFBSSxLQUFLLFFBQVEsS0FBSyxJQUFJLElBQUk7QUFDakc7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLE9BQU87QUFDakM7QUFDQSxNQUFNO0FBQ047QUFDQSw0QkFBNEI7QUFDNUI7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsSUFBSTtBQUN4Qjs7QUFFQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLXB5dGhvbi5qcz9kYTQ5Il0sInNvdXJjZXNDb250ZW50IjpbIlByaXNtLmxhbmd1YWdlcy5weXRob24gPSB7XG5cdCdjb21tZW50Jzoge1xuXHRcdHBhdHRlcm46IC8oXnxbXlxcXFxdKSMuKi8sXG5cdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRncmVlZHk6IHRydWVcblx0fSxcblx0J3N0cmluZy1pbnRlcnBvbGF0aW9uJzoge1xuXHRcdHBhdHRlcm46IC8oPzpmfGZyfHJmKSg/OihcIlwiXCJ8JycnKVtcXHNcXFNdKj9cXDF8KFwifCcpKD86XFxcXC58KD8hXFwyKVteXFxcXFxcclxcbl0pKlxcMikvaSxcblx0XHRncmVlZHk6IHRydWUsXG5cdFx0aW5zaWRlOiB7XG5cdFx0XHQnaW50ZXJwb2xhdGlvbic6IHtcblx0XHRcdFx0Ly8gXCJ7XCIgPGV4cHJlc3Npb24+IDxvcHRpb25hbCBcIiFzXCIsIFwiIXJcIiwgb3IgXCIhYVwiPiA8b3B0aW9uYWwgXCI6XCIgZm9ybWF0IHNwZWNpZmllcj4gXCJ9XCJcblx0XHRcdFx0cGF0dGVybjogLygoPzpefFtee10pKD86XFx7XFx7KSopXFx7KD8hXFx7KSg/Oltee31dfFxceyg/IVxceykoPzpbXnt9XXxcXHsoPyFcXHspKD86W157fV0pK1xcfSkrXFx9KStcXH0vLFxuXHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0XHRpbnNpZGU6IHtcblx0XHRcdFx0XHQnZm9ybWF0LXNwZWMnOiB7XG5cdFx0XHRcdFx0XHRwYXR0ZXJuOiAvKDopW146KCl7fV0rKD89XFx9JCkvLFxuXHRcdFx0XHRcdFx0bG9va2JlaGluZDogdHJ1ZVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0J2NvbnZlcnNpb24tb3B0aW9uJzoge1xuXHRcdFx0XHRcdFx0cGF0dGVybjogLyFbc3JhXSg/PVs6fV0kKS8sXG5cdFx0XHRcdFx0XHRhbGlhczogJ3B1bmN0dWF0aW9uJ1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0cmVzdDogbnVsbFxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0J3N0cmluZyc6IC9bXFxzXFxTXSsvXG5cdFx0fVxuXHR9LFxuXHQndHJpcGxlLXF1b3RlZC1zdHJpbmcnOiB7XG5cdFx0cGF0dGVybjogLyg/OltydWJdfGJyfHJiKT8oXCJcIlwifCcnJylbXFxzXFxTXSo/XFwxL2ksXG5cdFx0Z3JlZWR5OiB0cnVlLFxuXHRcdGFsaWFzOiAnc3RyaW5nJ1xuXHR9LFxuXHQnc3RyaW5nJzoge1xuXHRcdHBhdHRlcm46IC8oPzpbcnViXXxicnxyYik/KFwifCcpKD86XFxcXC58KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS9pLFxuXHRcdGdyZWVkeTogdHJ1ZVxuXHR9LFxuXHQnZnVuY3Rpb24nOiB7XG5cdFx0cGF0dGVybjogLygoPzpefFxccylkZWZbIFxcdF0rKVthLXpBLVpfXVxcdyooPz1cXHMqXFwoKS9nLFxuXHRcdGxvb2tiZWhpbmQ6IHRydWVcblx0fSxcblx0J2NsYXNzLW5hbWUnOiB7XG5cdFx0cGF0dGVybjogLyhcXGJjbGFzc1xccyspXFx3Ky9pLFxuXHRcdGxvb2tiZWhpbmQ6IHRydWVcblx0fSxcblx0J2RlY29yYXRvcic6IHtcblx0XHRwYXR0ZXJuOiAvKF5bXFx0IF0qKUBcXHcrKD86XFwuXFx3KykqL20sXG5cdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRhbGlhczogWydhbm5vdGF0aW9uJywgJ3B1bmN0dWF0aW9uJ10sXG5cdFx0aW5zaWRlOiB7XG5cdFx0XHQncHVuY3R1YXRpb24nOiAvXFwuL1xuXHRcdH1cblx0fSxcblx0J2tleXdvcmQnOiAvXFxiKD86Xyg/PVxccyo6KXxhbmR8YXN8YXNzZXJ0fGFzeW5jfGF3YWl0fGJyZWFrfGNhc2V8Y2xhc3N8Y29udGludWV8ZGVmfGRlbHxlbGlmfGVsc2V8ZXhjZXB0fGV4ZWN8ZmluYWxseXxmb3J8ZnJvbXxnbG9iYWx8aWZ8aW1wb3J0fGlufGlzfGxhbWJkYXxtYXRjaHxub25sb2NhbHxub3R8b3J8cGFzc3xwcmludHxyYWlzZXxyZXR1cm58dHJ5fHdoaWxlfHdpdGh8eWllbGQpXFxiLyxcblx0J2J1aWx0aW4nOiAvXFxiKD86X19pbXBvcnRfX3xhYnN8YWxsfGFueXxhcHBseXxhc2NpaXxiYXNlc3RyaW5nfGJpbnxib29sfGJ1ZmZlcnxieXRlYXJyYXl8Ynl0ZXN8Y2FsbGFibGV8Y2hyfGNsYXNzbWV0aG9kfGNtcHxjb2VyY2V8Y29tcGlsZXxjb21wbGV4fGRlbGF0dHJ8ZGljdHxkaXJ8ZGl2bW9kfGVudW1lcmF0ZXxldmFsfGV4ZWNmaWxlfGZpbGV8ZmlsdGVyfGZsb2F0fGZvcm1hdHxmcm96ZW5zZXR8Z2V0YXR0cnxnbG9iYWxzfGhhc2F0dHJ8aGFzaHxoZWxwfGhleHxpZHxpbnB1dHxpbnR8aW50ZXJufGlzaW5zdGFuY2V8aXNzdWJjbGFzc3xpdGVyfGxlbnxsaXN0fGxvY2Fsc3xsb25nfG1hcHxtYXh8bWVtb3J5dmlld3xtaW58bmV4dHxvYmplY3R8b2N0fG9wZW58b3JkfHBvd3xwcm9wZXJ0eXxyYW5nZXxyYXdfaW5wdXR8cmVkdWNlfHJlbG9hZHxyZXByfHJldmVyc2VkfHJvdW5kfHNldHxzZXRhdHRyfHNsaWNlfHNvcnRlZHxzdGF0aWNtZXRob2R8c3RyfHN1bXxzdXBlcnx0dXBsZXx0eXBlfHVuaWNocnx1bmljb2RlfHZhcnN8eHJhbmdlfHppcClcXGIvLFxuXHQnYm9vbGVhbic6IC9cXGIoPzpGYWxzZXxOb25lfFRydWUpXFxiLyxcblx0J251bWJlcic6IC9cXGIwKD86Yig/Ol8/WzAxXSkrfG8oPzpfP1swLTddKSt8eCg/Ol8/W2EtZjAtOV0pKylcXGJ8KD86XFxiXFxkKyg/Ol9cXGQrKSooPzpcXC4oPzpcXGQrKD86X1xcZCspKik/KT98XFxCXFwuXFxkKyg/Ol9cXGQrKSopKD86ZVsrLV0/XFxkKyg/Ol9cXGQrKSopP2o/KD8hXFx3KS9pLFxuXHQnb3BlcmF0b3InOiAvWy0rJT1dPT98IT18Oj18XFwqXFwqPz0/fFxcL1xcLz89P3w8Wzw9Pl0/fD5bPT5dP3xbJnxefl0vLFxuXHQncHVuY3R1YXRpb24nOiAvW3t9W1xcXTsoKSwuOl0vXG59O1xuXG5QcmlzbS5sYW5ndWFnZXMucHl0aG9uWydzdHJpbmctaW50ZXJwb2xhdGlvbiddLmluc2lkZVsnaW50ZXJwb2xhdGlvbiddLmluc2lkZS5yZXN0ID0gUHJpc20ubGFuZ3VhZ2VzLnB5dGhvbjtcblxuUHJpc20ubGFuZ3VhZ2VzLnB5ID0gUHJpc20ubGFuZ3VhZ2VzLnB5dGhvbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prismjs/components/prism-python.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prismjs/components/prism-rust.js":
/*!*******************************************************!*\
  !*** ./node_modules/prismjs/components/prism-rust.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("(function (Prism) {\n\n\tvar multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source;\n\tfor (var i = 0; i < 2; i++) {\n\t\t// support 4 levels of nested comments\n\t\tmultilineComment = multilineComment.replace(/<self>/g, function () { return multilineComment; });\n\t}\n\tmultilineComment = multilineComment.replace(/<self>/g, function () { return /[^\\s\\S]/.source; });\n\n\n\tPrism.languages.rust = {\n\t\t'comment': [\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\t\t'string': {\n\t\t\tpattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n\t\t\tgreedy: true\n\t\t},\n\t\t'char': {\n\t\t\tpattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\n\t\t\tgreedy: true\n\t\t},\n\t\t'attribute': {\n\t\t\tpattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n\t\t\tgreedy: true,\n\t\t\talias: 'attr-name',\n\t\t\tinside: {\n\t\t\t\t'string': null // see below\n\t\t\t}\n\t\t},\n\n\t\t// Closure params should not be confused with bitwise OR |\n\t\t'closure-params': {\n\t\t\tpattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'closure-punctuation': {\n\t\t\t\t\tpattern: /^\\||\\|$/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\trest: null // see below\n\t\t\t}\n\t\t},\n\n\t\t'lifetime-annotation': {\n\t\t\tpattern: /'\\w+/,\n\t\t\talias: 'symbol'\n\t\t},\n\n\t\t'fragment-specifier': {\n\t\t\tpattern: /(\\$\\w+:)[a-z]+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'variable': /\\$\\w+/,\n\n\t\t'function-definition': {\n\t\t\tpattern: /(\\bfn\\s+)\\w+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'function'\n\t\t},\n\t\t'type-definition': {\n\t\t\tpattern: /(\\b(?:enum|struct|trait|type|union)\\s+)\\w+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'class-name'\n\t\t},\n\t\t'module-declaration': [\n\t\t\t{\n\t\t\t\tpattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'namespace'\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'namespace',\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /::/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'keyword': [\n\t\t\t// https://github.com/rust-lang/reference/blob/master/src/keywords.md\n\t\t\t/\\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n\t\t\t// primitives and str\n\t\t\t// https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n\t\t\t/\\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\\b/\n\t\t],\n\n\t\t// functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n\t\t// and Rust's naming conventions recommend snake_case anyway.\n\t\t// https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n\t\t'function': /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n\t\t'macro': {\n\t\t\tpattern: /\\b\\w+!/,\n\t\t\talias: 'property'\n\t\t},\n\t\t'constant': /\\b[A-Z_][A-Z_\\d]+\\b/,\n\t\t'class-name': /\\b[A-Z]\\w*\\b/,\n\n\t\t'namespace': {\n\t\t\tpattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /::/\n\t\t\t}\n\t\t},\n\n\t\t// Hex, oct, bin, dec numbers with visual separators and type suffix\n\t\t'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\\b/,\n\t\t'boolean': /\\b(?:false|true)\\b/,\n\t\t'punctuation': /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n\t\t'operator': /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n\t};\n\n\tPrism.languages.rust['closure-params'].inside.rest = Prism.languages.rust;\n\tPrism.languages.rust['attribute'].inside['string'] = Prism.languages.rust['string'];\n\n}(Prism));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tcnVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0EsdUVBQXVFLDBCQUEwQjtBQUNqRztBQUNBLHNFQUFzRSwwQkFBMEI7OztBQUdoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsNENBQTRDLGlCQUFpQixJQUFJLEVBQUU7QUFDbkU7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixJQUFJLE9BQU8sSUFBSTtBQUM3QztBQUNBOztBQUVBO0FBQ0E7O0FBRUEsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLXJ1c3QuanM/YzdiZCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKFByaXNtKSB7XG5cblx0dmFyIG11bHRpbGluZUNvbW1lbnQgPSAvXFwvXFwqKD86W14qL118XFwqKD8hXFwvKXxcXC8oPyFcXCopfDxzZWxmPikqXFwqXFwvLy5zb3VyY2U7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgMjsgaSsrKSB7XG5cdFx0Ly8gc3VwcG9ydCA0IGxldmVscyBvZiBuZXN0ZWQgY29tbWVudHNcblx0XHRtdWx0aWxpbmVDb21tZW50ID0gbXVsdGlsaW5lQ29tbWVudC5yZXBsYWNlKC88c2VsZj4vZywgZnVuY3Rpb24gKCkgeyByZXR1cm4gbXVsdGlsaW5lQ29tbWVudDsgfSk7XG5cdH1cblx0bXVsdGlsaW5lQ29tbWVudCA9IG11bHRpbGluZUNvbW1lbnQucmVwbGFjZSgvPHNlbGY+L2csIGZ1bmN0aW9uICgpIHsgcmV0dXJuIC9bXlxcc1xcU10vLnNvdXJjZTsgfSk7XG5cblxuXHRQcmlzbS5sYW5ndWFnZXMucnVzdCA9IHtcblx0XHQnY29tbWVudCc6IFtcblx0XHRcdHtcblx0XHRcdFx0cGF0dGVybjogUmVnRXhwKC8oXnxbXlxcXFxdKS8uc291cmNlICsgbXVsdGlsaW5lQ29tbWVudCksXG5cdFx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRcdGdyZWVkeTogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGF0dGVybjogLyhefFteXFxcXDpdKVxcL1xcLy4qLyxcblx0XHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdFx0Z3JlZWR5OiB0cnVlXG5cdFx0XHR9XG5cdFx0XSxcblx0XHQnc3RyaW5nJzoge1xuXHRcdFx0cGF0dGVybjogL2I/XCIoPzpcXFxcW1xcc1xcU118W15cXFxcXCJdKSpcInxiP3IoIyopXCIoPzpbXlwiXXxcIig/IVxcMSkpKlwiXFwxLyxcblx0XHRcdGdyZWVkeTogdHJ1ZVxuXHRcdH0sXG5cdFx0J2NoYXInOiB7XG5cdFx0XHRwYXR0ZXJuOiAvYj8nKD86XFxcXCg/OnhbMC03XVtcXGRhLWZBLUZdfHVcXHsoPzpbXFxkYS1mQS1GXV8qKXsxLDZ9XFx9fC4pfFteXFxcXFxcclxcblxcdCddKScvLFxuXHRcdFx0Z3JlZWR5OiB0cnVlXG5cdFx0fSxcblx0XHQnYXR0cmlidXRlJzoge1xuXHRcdFx0cGF0dGVybjogLyMhP1xcWyg/OlteXFxbXFxdXCJdfFwiKD86XFxcXFtcXHNcXFNdfFteXFxcXFwiXSkqXCIpKlxcXS8sXG5cdFx0XHRncmVlZHk6IHRydWUsXG5cdFx0XHRhbGlhczogJ2F0dHItbmFtZScsXG5cdFx0XHRpbnNpZGU6IHtcblx0XHRcdFx0J3N0cmluZyc6IG51bGwgLy8gc2VlIGJlbG93XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIENsb3N1cmUgcGFyYW1zIHNob3VsZCBub3QgYmUgY29uZnVzZWQgd2l0aCBiaXR3aXNlIE9SIHxcblx0XHQnY2xvc3VyZS1wYXJhbXMnOiB7XG5cdFx0XHRwYXR0ZXJuOiAvKFs9KCw6XVxccyp8XFxibW92ZVxccyopXFx8W158XSpcXHx8XFx8W158XSpcXHwoPz1cXHMqKD86XFx7fC0+KSkvLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHQnY2xvc3VyZS1wdW5jdHVhdGlvbic6IHtcblx0XHRcdFx0XHRwYXR0ZXJuOiAvXlxcfHxcXHwkLyxcblx0XHRcdFx0XHRhbGlhczogJ3B1bmN0dWF0aW9uJ1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRyZXN0OiBudWxsIC8vIHNlZSBiZWxvd1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQnbGlmZXRpbWUtYW5ub3RhdGlvbic6IHtcblx0XHRcdHBhdHRlcm46IC8nXFx3Ky8sXG5cdFx0XHRhbGlhczogJ3N5bWJvbCdcblx0XHR9LFxuXG5cdFx0J2ZyYWdtZW50LXNwZWNpZmllcic6IHtcblx0XHRcdHBhdHRlcm46IC8oXFwkXFx3KzopW2Etel0rLyxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRhbGlhczogJ3B1bmN0dWF0aW9uJ1xuXHRcdH0sXG5cdFx0J3ZhcmlhYmxlJzogL1xcJFxcdysvLFxuXG5cdFx0J2Z1bmN0aW9uLWRlZmluaXRpb24nOiB7XG5cdFx0XHRwYXR0ZXJuOiAvKFxcYmZuXFxzKylcXHcrLyxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRhbGlhczogJ2Z1bmN0aW9uJ1xuXHRcdH0sXG5cdFx0J3R5cGUtZGVmaW5pdGlvbic6IHtcblx0XHRcdHBhdHRlcm46IC8oXFxiKD86ZW51bXxzdHJ1Y3R8dHJhaXR8dHlwZXx1bmlvbilcXHMrKVxcdysvLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGFsaWFzOiAnY2xhc3MtbmFtZSdcblx0XHR9LFxuXHRcdCdtb2R1bGUtZGVjbGFyYXRpb24nOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBhdHRlcm46IC8oXFxiKD86Y3JhdGV8bW9kKVxccyspW2Etel1bYS16X1xcZF0qLyxcblx0XHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdFx0YWxpYXM6ICduYW1lc3BhY2UnXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwYXR0ZXJuOiAvKFxcYig/OmNyYXRlfHNlbGZ8c3VwZXIpXFxzKik6OlxccypbYS16XVthLXpfXFxkXSpcXGIoPzpcXHMqOjooPzpcXHMqW2Etel1bYS16X1xcZF0qXFxzKjo6KSopPy8sXG5cdFx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRcdGFsaWFzOiAnbmFtZXNwYWNlJyxcblx0XHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdFx0J3B1bmN0dWF0aW9uJzogLzo6L1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XSxcblx0XHQna2V5d29yZCc6IFtcblx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ydXN0LWxhbmcvcmVmZXJlbmNlL2Jsb2IvbWFzdGVyL3NyYy9rZXl3b3Jkcy5tZFxuXHRcdFx0L1xcYig/OlNlbGZ8YWJzdHJhY3R8YXN8YXN5bmN8YXdhaXR8YmVjb21lfGJveHxicmVha3xjb25zdHxjb250aW51ZXxjcmF0ZXxkb3xkeW58ZWxzZXxlbnVtfGV4dGVybnxmaW5hbHxmbnxmb3J8aWZ8aW1wbHxpbnxsZXR8bG9vcHxtYWNyb3xtYXRjaHxtb2R8bW92ZXxtdXR8b3ZlcnJpZGV8cHJpdnxwdWJ8cmVmfHJldHVybnxzZWxmfHN0YXRpY3xzdHJ1Y3R8c3VwZXJ8dHJhaXR8dHJ5fHR5cGV8dHlwZW9mfHVuaW9ufHVuc2FmZXx1bnNpemVkfHVzZXx2aXJ0dWFsfHdoZXJlfHdoaWxlfHlpZWxkKVxcYi8sXG5cdFx0XHQvLyBwcmltaXRpdmVzIGFuZCBzdHJcblx0XHRcdC8vIGh0dHBzOi8vZG9jLnJ1c3QtbGFuZy5vcmcvc3RhYmxlL3J1c3QtYnktZXhhbXBsZS9wcmltaXRpdmVzLmh0bWxcblx0XHRcdC9cXGIoPzpib29sfGNoYXJ8Zig/OjMyfDY0KXxbdWldKD86OHwxNnwzMnw2NHwxMjh8c2l6ZSl8c3RyKVxcYi9cblx0XHRdLFxuXG5cdFx0Ly8gZnVuY3Rpb25zIGNhbiB0ZWNobmljYWxseSBzdGFydCB3aXRoIGFuIHVwcGVyLWNhc2UgbGV0dGVyLCBidXQgdGhpcyB3aWxsIGludHJvZHVjZSBhIGxvdCBvZiBmYWxzZSBwb3NpdGl2ZXNcblx0XHQvLyBhbmQgUnVzdCdzIG5hbWluZyBjb252ZW50aW9ucyByZWNvbW1lbmQgc25ha2VfY2FzZSBhbnl3YXkuXG5cdFx0Ly8gaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy8xLjAuMC9zdHlsZS9zdHlsZS9uYW1pbmcvUkVBRE1FLmh0bWxcblx0XHQnZnVuY3Rpb24nOiAvXFxiW2Etel9dXFx3Kig/PVxccyooPzo6Olxccyo8fFxcKCkpLyxcblx0XHQnbWFjcm8nOiB7XG5cdFx0XHRwYXR0ZXJuOiAvXFxiXFx3KyEvLFxuXHRcdFx0YWxpYXM6ICdwcm9wZXJ0eSdcblx0XHR9LFxuXHRcdCdjb25zdGFudCc6IC9cXGJbQS1aX11bQS1aX1xcZF0rXFxiLyxcblx0XHQnY2xhc3MtbmFtZSc6IC9cXGJbQS1aXVxcdypcXGIvLFxuXG5cdFx0J25hbWVzcGFjZSc6IHtcblx0XHRcdHBhdHRlcm46IC8oPzpcXGJbYS16XVthLXpfXFxkXSpcXHMqOjpcXHMqKSpcXGJbYS16XVthLXpfXFxkXSpcXHMqOjooPyFcXHMqPCkvLFxuXHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdCdwdW5jdHVhdGlvbic6IC86Oi9cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gSGV4LCBvY3QsIGJpbiwgZGVjIG51bWJlcnMgd2l0aCB2aXN1YWwgc2VwYXJhdG9ycyBhbmQgdHlwZSBzdWZmaXhcblx0XHQnbnVtYmVyJzogL1xcYig/OjB4W1xcZEEtRmEtZl0oPzpfP1tcXGRBLUZhLWZdKSp8MG9bMC03XSg/Ol8/WzAtN10pKnwwYlswMV0oPzpfP1swMV0pKnwoPzooPzpcXGQoPzpfP1xcZCkqKT9cXC4pP1xcZCg/Ol8/XFxkKSooPzpbRWVdWystXT9cXGQrKT8pKD86Xz8oPzpmMzJ8ZjY0fFtpdV0oPzo4fDE2fDMyfDY0fHNpemUpPykpP1xcYi8sXG5cdFx0J2Jvb2xlYW4nOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLFxuXHRcdCdwdW5jdHVhdGlvbic6IC8tPnxcXC5cXC49fFxcLnsxLDN9fDo6fFt7fVtcXF07KCksOl0vLFxuXHRcdCdvcGVyYXRvcic6IC9bLSsqXFwvJSFeXT0/fD1bPT5dP3wmWyY9XT98XFx8W3w9XT98PDw/PT98Pj4/PT98W0A/XS9cblx0fTtcblxuXHRQcmlzbS5sYW5ndWFnZXMucnVzdFsnY2xvc3VyZS1wYXJhbXMnXS5pbnNpZGUucmVzdCA9IFByaXNtLmxhbmd1YWdlcy5ydXN0O1xuXHRQcmlzbS5sYW5ndWFnZXMucnVzdFsnYXR0cmlidXRlJ10uaW5zaWRlWydzdHJpbmcnXSA9IFByaXNtLmxhbmd1YWdlcy5ydXN0WydzdHJpbmcnXTtcblxufShQcmlzbSkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prismjs/components/prism-rust.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prismjs/components/prism-sql.js":
/*!******************************************************!*\
  !*** ./node_modules/prismjs/components/prism-sql.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Prism.languages.sql = {\n\t'comment': {\n\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n\t\tlookbehind: true\n\t},\n\t'variable': [\n\t\t{\n\t\t\tpattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n\t\t\tgreedy: true\n\t\t},\n\t\t/@[\\w.$]+/\n\t],\n\t'string': {\n\t\tpattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n\t\tgreedy: true,\n\t\tlookbehind: true\n\t},\n\t'identifier': {\n\t\tpattern: /(^|[^@\\\\])`(?:\\\\[\\s\\S]|[^`\\\\]|``)*`/,\n\t\tgreedy: true,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /^`|`$/\n\t\t}\n\t},\n\t'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i, // Should we highlight user defined functions too?\n\t'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n\t'boolean': /\\b(?:FALSE|NULL|TRUE)\\b/i,\n\t'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n\t'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n\t'punctuation': /[;[\\]()`,.]/\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tc3FsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tc3FsLmpzPzBmYzYiXSwic291cmNlc0NvbnRlbnQiOlsiUHJpc20ubGFuZ3VhZ2VzLnNxbCA9IHtcblx0J2NvbW1lbnQnOiB7XG5cdFx0cGF0dGVybjogLyhefFteXFxcXF0pKD86XFwvXFwqW1xcc1xcU10qP1xcKlxcL3woPzotLXxcXC9cXC98IykuKikvLFxuXHRcdGxvb2tiZWhpbmQ6IHRydWVcblx0fSxcblx0J3ZhcmlhYmxlJzogW1xuXHRcdHtcblx0XHRcdHBhdHRlcm46IC9AKFtcIidgXSkoPzpcXFxcW1xcc1xcU118KD8hXFwxKVteXFxcXF0pK1xcMS8sXG5cdFx0XHRncmVlZHk6IHRydWVcblx0XHR9LFxuXHRcdC9AW1xcdy4kXSsvXG5cdF0sXG5cdCdzdHJpbmcnOiB7XG5cdFx0cGF0dGVybjogLyhefFteQFxcXFxdKShcInwnKSg/OlxcXFxbXFxzXFxTXXwoPyFcXDIpW15cXFxcXXxcXDJcXDIpKlxcMi8sXG5cdFx0Z3JlZWR5OiB0cnVlLFxuXHRcdGxvb2tiZWhpbmQ6IHRydWVcblx0fSxcblx0J2lkZW50aWZpZXInOiB7XG5cdFx0cGF0dGVybjogLyhefFteQFxcXFxdKWAoPzpcXFxcW1xcc1xcU118W15gXFxcXF18YGApKmAvLFxuXHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdGluc2lkZToge1xuXHRcdFx0J3B1bmN0dWF0aW9uJzogL15gfGAkL1xuXHRcdH1cblx0fSxcblx0J2Z1bmN0aW9uJzogL1xcYig/OkFWR3xDT1VOVHxGSVJTVHxGT1JNQVR8TEFTVHxMQ0FTRXxMRU58TUFYfE1JRHxNSU58TU9EfE5PV3xST1VORHxTVU18VUNBU0UpKD89XFxzKlxcKCkvaSwgLy8gU2hvdWxkIHdlIGhpZ2hsaWdodCB1c2VyIGRlZmluZWQgZnVuY3Rpb25zIHRvbz9cblx0J2tleXdvcmQnOiAvXFxiKD86QUNUSU9OfEFERHxBRlRFUnxBTEdPUklUSE18QUxMfEFMVEVSfEFOQUxZWkV8QU5ZfEFQUExZfEFTfEFTQ3xBVVRIT1JJWkFUSU9OfEFVVE9fSU5DUkVNRU5UfEJBQ0tVUHxCREJ8QkVHSU58QkVSS0VMRVlEQnxCSUdJTlR8QklOQVJZfEJJVHxCTE9CfEJPT0x8Qk9PTEVBTnxCUkVBS3xCUk9XU0V8QlRSRUV8QlVMS3xCWXxDQUxMfENBU0NBREVEP3xDQVNFfENIQUlOfENIQVIoPzpBQ1RFUnxTRVQpP3xDSEVDSyg/OlBPSU5UKT98Q0xPU0V8Q0xVU1RFUkVEfENPQUxFU0NFfENPTExBVEV8Q09MVU1OUz98Q09NTUVOVHxDT01NSVQoPzpURUQpP3xDT01QVVRFfENPTk5FQ1R8Q09OU0lTVEVOVHxDT05TVFJBSU5UfENPTlRBSU5TKD86VEFCTEUpP3xDT05USU5VRXxDT05WRVJUfENSRUFURXxDUk9TU3xDVVJSRU5UKD86X0RBVEV8X1RJTUV8X1RJTUVTVEFNUHxfVVNFUik/fENVUlNPUnxDWUNMRXxEQVRBKD86QkFTRVM/KT98REFURSg/OlRJTUUpP3xEQVl8REJDQ3xERUFMTE9DQVRFfERFQ3xERUNJTUFMfERFQ0xBUkV8REVGQVVMVHxERUZJTkVSfERFTEFZRUR8REVMRVRFfERFTElNSVRFUlM/fERFTll8REVTQ3xERVNDUklCRXxERVRFUk1JTklTVElDfERJU0FCTEV8RElTQ0FSRHxESVNLfERJU1RJTkNUfERJU1RJTkNUUk9XfERJU1RSSUJVVEVEfERPfERPVUJMRXxEUk9QfERVTU1ZfERVTVAoPzpGSUxFKT98RFVQTElDQVRFfEVMU0UoPzpJRik/fEVOQUJMRXxFTkNMT1NFRHxFTkR8RU5HSU5FfEVOVU18RVJSTFZMfEVSUk9SU3xFU0NBUEVEP3xFWENFUFR8RVhFQyg/OlVURSk/fEVYSVNUU3xFWElUfEVYUExBSU58RVhURU5ERUR8RkVUQ0h8RklFTERTfEZJTEV8RklMTEZBQ1RPUnxGSVJTVHxGSVhFRHxGTE9BVHxGT0xMT1dJTkd8Rk9SKD86IEVBQ0ggUk9XKT98Rk9SQ0V8Rk9SRUlHTnxGUkVFVEVYVCg/OlRBQkxFKT98RlJPTXxGVUxMfEZVTkNUSU9OfEdFT01FVFJZKD86Q09MTEVDVElPTik/fEdMT0JBTHxHT1RPfEdSQU5UfEdST1VQfEhBTkRMRVJ8SEFTSHxIQVZJTkd8SE9MRExPQ0t8SE9VUnxJREVOVElUWSg/OkNPTHxfSU5TRVJUKT98SUZ8SUdOT1JFfElNUE9SVHxJTkRFWHxJTkZJTEV8SU5ORVJ8SU5OT0RCfElOT1VUfElOU0VSVHxJTlR8SU5URUdFUnxJTlRFUlNFQ1R8SU5URVJWQUx8SU5UT3xJTlZPS0VSfElTT0xBVElPTnxJVEVSQVRFfEpPSU58S0VZUz98S0lMTHxMQU5HVUFHRXxMQVNUfExFQVZFfExFRlR8TEVWRUx8TElNSVR8TElORU5PfExJTkVTfExJTkVTVFJJTkd8TE9BRHxMT0NBTHxMT0NLfExPTkcoPzpCTE9CfFRFWFQpfExPT1B8TUFUQ0goPzpFRCk/fE1FRElVTSg/OkJMT0J8SU5UfFRFWFQpfE1FUkdFfE1JRERMRUlOVHxNSU5VVEV8TU9ERXxNT0RJRklFU3xNT0RJRll8TU9OVEh8TVVMVEkoPzpMSU5FU1RSSU5HfFBPSU5UfFBPTFlHT04pfE5BVElPTkFMfE5BVFVSQUx8TkNIQVJ8TkVYVHxOT3xOT05DTFVTVEVSRUR8TlVMTElGfE5VTUVSSUN8T0ZGP3xPRkZTRVRTP3xPTnxPUEVOKD86REFUQVNPVVJDRXxRVUVSWXxST1dTRVQpP3xPUFRJTUlaRXxPUFRJT04oPzpBTExZKT98T1JERVJ8T1VUKD86RVJ8RklMRSk/fE9WRVJ8UEFSVElBTHxQQVJUSVRJT058UEVSQ0VOVHxQSVZPVHxQTEFOfFBPSU5UfFBPTFlHT058UFJFQ0VESU5HfFBSRUNJU0lPTnxQUkVQQVJFfFBSRVZ8UFJJTUFSWXxQUklOVHxQUklWSUxFR0VTfFBST0MoPzpFRFVSRSk/fFBVQkxJQ3xQVVJHRXxRVUlDS3xSQUlTRVJST1J8UkVBRFM/fFJFQUx8UkVDT05GSUdVUkV8UkVGRVJFTkNFU3xSRUxFQVNFfFJFTkFNRXxSRVBFQVQoPzpBQkxFKT98UkVQTEFDRXxSRVBMSUNBVElPTnxSRVFVSVJFfFJFU0lHTkFMfFJFU1RPUkV8UkVTVFJJQ1R8UkVUVVJOKD86SU5HfFMpP3xSRVZPS0V8UklHSFR8Uk9MTEJBQ0t8Uk9VVElORXxST1coPzpDT1VOVHxHVUlEQ09MfFMpP3xSVFJFRXxSVUxFfFNBVkUoPzpQT0lOVCk/fFNDSEVNQXxTRUNPTkR8U0VMRUNUfFNFUklBTCg/OklaQUJMRSk/fFNFU1NJT04oPzpfVVNFUik/fFNFVCg/OlVTRVIpP3xTSEFSRXxTSE9XfFNIVVRET1dOfFNJTVBMRXxTTUFMTElOVHxTTkFQU0hPVHxTT01FfFNPTkFNRXxTUUx8U1RBUlQoPzpJTkcpP3xTVEFUSVNUSUNTfFNUQVRVU3xTVFJJUEVEfFNZU1RFTV9VU0VSfFRBQkxFUz98VEFCTEVTUEFDRXxURU1QKD86T1JBUll8VEFCTEUpP3xURVJNSU5BVEVEfFRFWFQoPzpTSVpFKT98VEhFTnxUSU1FKD86U1RBTVApP3xUSU5ZKD86QkxPQnxJTlR8VEVYVCl8VE9QP3xUUkFOKD86U0FDVElPTlM/KT98VFJJR0dFUnxUUlVOQ0FURXxUU0VRVUFMfFRZUEVTP3xVTkJPVU5ERUR8VU5DT01NSVRURUR8VU5ERUZJTkVEfFVOSU9OfFVOSVFVRXxVTkxPQ0t8VU5QSVZPVHxVTlNJR05FRHxVUERBVEUoPzpURVhUKT98VVNBR0V8VVNFfFVTRVJ8VVNJTkd8VkFMVUVTP3xWQVIoPzpCSU5BUll8Q0hBUnxDSEFSQUNURVJ8WUlORyl8VklFV3xXQUlURk9SfFdBUk5JTkdTfFdIRU58V0hFUkV8V0hJTEV8V0lUSCg/OiBST0xMVVB8SU4pP3xXT1JLfFdSSVRFKD86VEVYVCk/fFlFQVIpXFxiL2ksXG5cdCdib29sZWFuJzogL1xcYig/OkZBTFNFfE5VTEx8VFJVRSlcXGIvaSxcblx0J251bWJlcic6IC9cXGIweFtcXGRhLWZdK1xcYnxcXGJcXGQrKD86XFwuXFxkKik/fFxcQlxcLlxcZCtcXGIvaSxcblx0J29wZXJhdG9yJzogL1stKypcXC89JV5+XXwmJj98XFx8XFx8P3whPT98PCg/Oj0+P3w8fD4pP3w+Wz49XT98XFxiKD86QU5EfEJFVFdFRU58RElWfElMSUtFfElOfElTfExJS0V8Tk9UfE9SfFJFR0VYUHxSTElLRXxTT1VORFMgTElLRXxYT1IpXFxiL2ksXG5cdCdwdW5jdHVhdGlvbic6IC9bO1tcXF0oKWAsLl0vXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prismjs/components/prism-sql.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prismjs/components/prism-swift.js":
/*!********************************************************!*\
  !*** ./node_modules/prismjs/components/prism-swift.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Prism.languages.swift = {\n\t'comment': {\n\t\t// Nested comments are supported up to 2 levels\n\t\tpattern: /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n\t\tlookbehind: true,\n\t\tgreedy: true\n\t},\n\t'string-literal': [\n\t\t// https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\n\t\t{\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[^\"#])/.source\n\t\t\t\t+ '(?:'\n\t\t\t\t// single-line string\n\t\t\t\t+ /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/.source\n\t\t\t\t+ '|'\n\t\t\t\t// multi-line string\n\t\t\t\t+ /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/.source\n\t\t\t\t+ ')'\n\t\t\t\t+ /(?![\"#])/.source\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': {\n\t\t\t\t\tpattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: null // see below\n\t\t\t\t},\n\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\tpattern: /^\\)|\\\\\\($/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\t'punctuation': /\\\\(?=[\\r\\n])/,\n\t\t\t\t'string': /[\\s\\S]+/\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[^\"#])(#+)/.source\n\t\t\t\t+ '(?:'\n\t\t\t\t// single-line string\n\t\t\t\t+ /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/.source\n\t\t\t\t+ '|'\n\t\t\t\t// multi-line string\n\t\t\t\t+ /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source\n\t\t\t\t+ ')'\n\t\t\t\t+ '\\\\2'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': {\n\t\t\t\t\tpattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: null // see below\n\t\t\t\t},\n\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\tpattern: /^\\)|\\\\#+\\($/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\t'string': /[\\s\\S]+/\n\t\t\t}\n\t\t},\n\t],\n\n\t'directive': {\n\t\t// directives with conditions\n\t\tpattern: RegExp(\n\t\t\t/#/.source\n\t\t\t+ '(?:'\n\t\t\t+ (\n\t\t\t\t/(?:elseif|if)\\b/.source\n\t\t\t\t+ '(?:[ \\t]*'\n\t\t\t\t// This regex is a little complex. It's equivalent to this:\n\t\t\t\t//   (?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*<round>)?|<round>)(?:[ \\t]*(?:&&|\\|\\|))?\n\t\t\t\t// where <round> is a general parentheses expression.\n\t\t\t\t+ /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/.source\n\t\t\t\t+ ')+'\n\t\t\t)\n\t\t\t+ '|'\n\t\t\t+ /(?:else|endif)\\b/.source\n\t\t\t+ ')'\n\t\t),\n\t\talias: 'property',\n\t\tinside: {\n\t\t\t'directive-name': /^#\\w+/,\n\t\t\t'boolean': /\\b(?:false|true)\\b/,\n\t\t\t'number': /\\b\\d+(?:\\.\\d+)*\\b/,\n\t\t\t'operator': /!|&&|\\|\\||[<>]=?/,\n\t\t\t'punctuation': /[(),]/\n\t\t}\n\t},\n\t'literal': {\n\t\tpattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n\t\talias: 'constant'\n\t},\n\t'other-directive': {\n\t\tpattern: /#\\w+\\b/,\n\t\talias: 'property'\n\t},\n\n\t'attribute': {\n\t\tpattern: /@\\w+/,\n\t\talias: 'atrule'\n\t},\n\n\t'function-definition': {\n\t\tpattern: /(\\bfunc\\s+)\\w+/,\n\t\tlookbehind: true,\n\t\talias: 'function'\n\t},\n\t'label': {\n\t\t// https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\n\t\tpattern: /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n\t\tlookbehind: true,\n\t\talias: 'important'\n\t},\n\n\t'keyword': /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n\t'boolean': /\\b(?:false|true)\\b/,\n\t'nil': {\n\t\tpattern: /\\bnil\\b/,\n\t\talias: 'constant'\n\t},\n\n\t'short-argument': /\\$\\d+\\b/,\n\t'omit': {\n\t\tpattern: /\\b_\\b/,\n\t\talias: 'keyword'\n\t},\n\t'number': /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n\n\t// A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\n\t'class-name': /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n\t'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n\t'constant': /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n\n\t// Operators are generic in Swift. Developers can even create new operators (e.g. +++).\n\t// https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\n\t// This regex only supports ASCII operators.\n\t'operator': /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n\t'punctuation': /[{}[\\]();,.:\\\\]/\n};\n\nPrism.languages.swift['string-literal'].forEach(function (rule) {\n\trule.inside['interpolation'].inside = Prism.languages.swift;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prismjs/components/prism-swift.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prismjs/components/prism-typescript.js":
/*!*************************************************************!*\
  !*** ./node_modules/prismjs/components/prism-typescript.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("(function (Prism) {\n\n\tPrism.languages.typescript = Prism.languages.extend('javascript', {\n\t\t'class-name': {\n\t\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: null // see below\n\t\t},\n\t\t'builtin': /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/,\n\t});\n\n\t// The keywords TypeScript adds to JavaScript\n\tPrism.languages.typescript.keyword.push(\n\t\t/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/,\n\t\t// keywords that have to be followed by an identifier\n\t\t/\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/,\n\t\t// This is for `import type *, {}`\n\t\t/\\btype\\b(?=\\s*(?:[\\{*]|$))/\n\t);\n\n\t// doesn't work with TS because TS is too complex\n\tdelete Prism.languages.typescript['parameter'];\n\tdelete Prism.languages.typescript['literal-property'];\n\n\t// a version of typescript specifically for highlighting types\n\tvar typeInside = Prism.languages.extend('typescript', {});\n\tdelete typeInside['class-name'];\n\n\tPrism.languages.typescript['class-name'].inside = typeInside;\n\n\tPrism.languages.insertBefore('typescript', 'function', {\n\t\t'decorator': {\n\t\t\tpattern: /@[$\\w\\xA0-\\uFFFF]+/,\n\t\t\tinside: {\n\t\t\t\t'at': {\n\t\t\t\t\tpattern: /^@/,\n\t\t\t\t\talias: 'operator'\n\t\t\t\t},\n\t\t\t\t'function': /^[\\s\\S]+/\n\t\t\t}\n\t\t},\n\t\t'generic-function': {\n\t\t\t// e.g. foo<T extends \"bar\" | \"baz\">( ...\n\t\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n\t\t\t\t'generic': {\n\t\t\t\t\tpattern: /<[\\s\\S]+/, // everything after the first <\n\t\t\t\t\talias: 'class-name',\n\t\t\t\t\tinside: typeInside\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.ts = Prism.languages.typescript;\n\n}(Prism));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tdHlwZXNjcmlwdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FLG1DQUFtQztBQUNuQyx1QkFBdUI7QUFDdkI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EseURBQXlEO0FBQ3pEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3ByaXNtanMvY29tcG9uZW50cy9wcmlzbS10eXBlc2NyaXB0LmpzP2I0OWIiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChQcmlzbSkge1xuXG5cdFByaXNtLmxhbmd1YWdlcy50eXBlc2NyaXB0ID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnamF2YXNjcmlwdCcsIHtcblx0XHQnY2xhc3MtbmFtZSc6IHtcblx0XHRcdHBhdHRlcm46IC8oXFxiKD86Y2xhc3N8ZXh0ZW5kc3xpbXBsZW1lbnRzfGluc3RhbmNlb2Z8aW50ZXJmYWNlfG5ld3x0eXBlKVxccyspKD8ha2V5b2ZcXGIpKD8hXFxzKVtfJGEtekEtWlxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRl0pKig/Olxccyo8KD86W148Pl18PCg/OltePD5dfDxbXjw+XSo+KSo+KSo+KT8vLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRcdGluc2lkZTogbnVsbCAvLyBzZWUgYmVsb3dcblx0XHR9LFxuXHRcdCdidWlsdGluJzogL1xcYig/OkFycmF5fEZ1bmN0aW9ufFByb21pc2V8YW55fGJvb2xlYW58Y29uc29sZXxuZXZlcnxudW1iZXJ8c3RyaW5nfHN5bWJvbHx1bmtub3duKVxcYi8sXG5cdH0pO1xuXG5cdC8vIFRoZSBrZXl3b3JkcyBUeXBlU2NyaXB0IGFkZHMgdG8gSmF2YVNjcmlwdFxuXHRQcmlzbS5sYW5ndWFnZXMudHlwZXNjcmlwdC5rZXl3b3JkLnB1c2goXG5cdFx0L1xcYig/OmFic3RyYWN0fGRlY2xhcmV8aXN8a2V5b2Z8cmVhZG9ubHl8cmVxdWlyZSlcXGIvLFxuXHRcdC8vIGtleXdvcmRzIHRoYXQgaGF2ZSB0byBiZSBmb2xsb3dlZCBieSBhbiBpZGVudGlmaWVyXG5cdFx0L1xcYig/OmFzc2VydHN8aW5mZXJ8aW50ZXJmYWNlfG1vZHVsZXxuYW1lc3BhY2V8dHlwZSlcXGIoPz1cXHMqKD86W3tfJGEtekEtWlxceEEwLVxcdUZGRkZdfCQpKS8sXG5cdFx0Ly8gVGhpcyBpcyBmb3IgYGltcG9ydCB0eXBlICosIHt9YFxuXHRcdC9cXGJ0eXBlXFxiKD89XFxzKig/OltcXHsqXXwkKSkvXG5cdCk7XG5cblx0Ly8gZG9lc24ndCB3b3JrIHdpdGggVFMgYmVjYXVzZSBUUyBpcyB0b28gY29tcGxleFxuXHRkZWxldGUgUHJpc20ubGFuZ3VhZ2VzLnR5cGVzY3JpcHRbJ3BhcmFtZXRlciddO1xuXHRkZWxldGUgUHJpc20ubGFuZ3VhZ2VzLnR5cGVzY3JpcHRbJ2xpdGVyYWwtcHJvcGVydHknXTtcblxuXHQvLyBhIHZlcnNpb24gb2YgdHlwZXNjcmlwdCBzcGVjaWZpY2FsbHkgZm9yIGhpZ2hsaWdodGluZyB0eXBlc1xuXHR2YXIgdHlwZUluc2lkZSA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ3R5cGVzY3JpcHQnLCB7fSk7XG5cdGRlbGV0ZSB0eXBlSW5zaWRlWydjbGFzcy1uYW1lJ107XG5cblx0UHJpc20ubGFuZ3VhZ2VzLnR5cGVzY3JpcHRbJ2NsYXNzLW5hbWUnXS5pbnNpZGUgPSB0eXBlSW5zaWRlO1xuXG5cdFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ3R5cGVzY3JpcHQnLCAnZnVuY3Rpb24nLCB7XG5cdFx0J2RlY29yYXRvcic6IHtcblx0XHRcdHBhdHRlcm46IC9AWyRcXHdcXHhBMC1cXHVGRkZGXSsvLFxuXHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdCdhdCc6IHtcblx0XHRcdFx0XHRwYXR0ZXJuOiAvXkAvLFxuXHRcdFx0XHRcdGFsaWFzOiAnb3BlcmF0b3InXG5cdFx0XHRcdH0sXG5cdFx0XHRcdCdmdW5jdGlvbic6IC9eW1xcc1xcU10rL1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0J2dlbmVyaWMtZnVuY3Rpb24nOiB7XG5cdFx0XHQvLyBlLmcuIGZvbzxUIGV4dGVuZHMgXCJiYXJcIiB8IFwiYmF6XCI+KCAuLi5cblx0XHRcdHBhdHRlcm46IC8jPyg/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSpcXHMqPCg/OltePD5dfDwoPzpbXjw+XXw8W148Pl0qPikqPikqPig/PVxccypcXCgpLyxcblx0XHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHQnZnVuY3Rpb24nOiAvXiM/KD8hXFxzKVtfJGEtekEtWlxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRl0pKi8sXG5cdFx0XHRcdCdnZW5lcmljJzoge1xuXHRcdFx0XHRcdHBhdHRlcm46IC88W1xcc1xcU10rLywgLy8gZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgPFxuXHRcdFx0XHRcdGFsaWFzOiAnY2xhc3MtbmFtZScsXG5cdFx0XHRcdFx0aW5zaWRlOiB0eXBlSW5zaWRlXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdFByaXNtLmxhbmd1YWdlcy50cyA9IFByaXNtLmxhbmd1YWdlcy50eXBlc2NyaXB0O1xuXG59KFByaXNtKSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prismjs/components/prism-typescript.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prismjs/prism.js":
/*!***************************************!*\
  !*** ./node_modules/prismjs/prism.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("\n/* **********************************************\n     Begin prism-core.js\n********************************************** */\n\n/// <reference lib=\"WebWorker\"/>\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t\t? self // if in worker\n\t\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\nvar Prism = (function (_self) {\n\n\t// Private helper vars\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n\t\t * additional languages or plugins yourself.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n\t\t *\n\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.manual = true;\n\t\t * // add a new <script> to load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tmanual: _self.Prism && _self.Prism.manual,\n\t\t/**\n\t\t * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\n\t\t * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\n\t\t * own worker, you don't want it to do this.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not add its own listeners to the worker.\n\t\t *\n\t\t * You obviously have to change this value before Prism executes. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.disableWorkerMessageHandler = true;\n\t\t * // Load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar m = lang.exec(element.className);\n\t\t\t\t\tif (m) {\n\t\t\t\t\t\treturn m[1].toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} language\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tsetLanguage: function (element, language) {\n\t\t\t\t// remove all `language-xxxx` classes\n\t\t\t\t// (this might leave behind a leading space)\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n\t\t\t\t// add the new `language-xxxx` class\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\n\t\t\t\telement.classList.add('language-' + language);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the script element that is currently executing.\n\t\t\t *\n\t\t\t * This does __not__ work for line script element.\n\t\t\t *\n\t\t\t * @returns {HTMLScriptElement | null}\n\t\t\t */\n\t\t\tcurrentScript: function () {\n\t\t\t\tif (typeof document === 'undefined') {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\n\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\n\t\t\t\t}\n\n\t\t\t\t// IE11 workaround\n\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\n\t\t\t\t// this will not work for inline scripts\n\n\t\t\t\ttry {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\n\t\t\t\t\t// A stack will look like this:\n\t\t\t\t\t//\n\t\t\t\t\t// Error\n\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\n\n\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n\t\t\t\t\tif (src) {\n\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\n\t\t\t\t\t\tfor (var i in scripts) {\n\t\t\t\t\t\t\tif (scripts[i].src == src) {\n\t\t\t\t\t\t\t\treturn scripts[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\t\t/**\n\t\t * This is the most high-level function in Prism’s API.\n\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n\t\t * each one of them.\n\t\t *\n\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n\t\t *\n\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAll: function (async, callback) {\n\t\t\t_.highlightAllUnder(document, async, callback);\n\t\t},\n\n\t\t/**\n\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n\t\t * {@link Prism.highlightElement} on each one of them.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-highlightall`\n\t\t * 2. `before-all-elements-highlight`\n\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\n\t\t *\n\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAllUnder: function (container, async, callback) {\n\t\t\tvar env = {\n\t\t\t\tcallback: callback,\n\t\t\t\tcontainer: container,\n\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t\t};\n\n\t\t\t_.hooks.run('before-highlightall', env);\n\n\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n\n\t\t\t_.hooks.run('before-all-elements-highlight', env);\n\n\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\n\t\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Highlights the code inside a single element.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-sanity-check`\n\t\t * 2. `before-highlight`\n\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n\t\t * 4. `before-insert`\n\t\t * 5. `after-highlight`\n\t\t * 6. `complete`\n\t\t *\n\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n\t\t * the element's language.\n\t\t *\n\t\t * @param {Element} element The element containing the code.\n\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n\t\t *\n\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n\t\t * asynchronous highlighting to work. You can build your own bundle on the\n\t\t * [Download page](https://prismjs.com/download.html).\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightElement: function (element, async, callback) {\n\t\t\t// Find language\n\t\t\tvar language = _.util.getLanguage(element);\n\t\t\tvar grammar = _.languages[language];\n\n\t\t\t// Set language on the element, if not present\n\t\t\t_.util.setLanguage(element, language);\n\n\t\t\t// Set language on the parent, for styling\n\t\t\tvar parent = element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\n\t\t\t\t_.util.setLanguage(parent, language);\n\t\t\t}\n\n\t\t\tvar code = element.textContent;\n\n\t\t\tvar env = {\n\t\t\t\telement: element,\n\t\t\t\tlanguage: language,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tcode: code\n\t\t\t};\n\n\t\t\tfunction insertHighlightedCode(highlightedCode) {\n\t\t\t\tenv.highlightedCode = highlightedCode;\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t}\n\n\t\t\t_.hooks.run('before-sanity-check', env);\n\n\t\t\t// plugins may change/add the parent/element\n\t\t\tparent = env.element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\n\t\t\t\tparent.setAttribute('tabindex', '0');\n\t\t\t}\n\n\t\t\tif (!env.code) {\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_.hooks.run('before-highlight', env);\n\n\t\t\tif (!env.grammar) {\n\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (async && _self.Worker) {\n\t\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\t\tworker.onmessage = function (evt) {\n\t\t\t\t\tinsertHighlightedCode(evt.data);\n\t\t\t\t};\n\n\t\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\t\tlanguage: env.language,\n\t\t\t\t\tcode: env.code,\n\t\t\t\t\timmediateClose: true\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tif (!env.grammar) {\n\t\t\t\tthrow new Error('The language \"' + env.language + '\" has no grammar.');\n\t\t\t}\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\t_self.Prism = _;\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\n\tif (!_self.document) {\n\t\tif (!_self.addEventListener) {\n\t\t\t// in Node.js\n\t\t\treturn _;\n\t\t}\n\n\t\tif (!_.disableWorkerMessageHandler) {\n\t\t\t// In worker\n\t\t\t_self.addEventListener('message', function (evt) {\n\t\t\t\tvar message = JSON.parse(evt.data);\n\t\t\t\tvar lang = message.language;\n\t\t\t\tvar code = message.code;\n\t\t\t\tvar immediateClose = message.immediateClose;\n\n\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\t\t\tif (immediateClose) {\n\t\t\t\t\t_self.close();\n\t\t\t\t}\n\t\t\t}, false);\n\t\t}\n\n\t\treturn _;\n\t}\n\n\t// Get current script and highlight\n\tvar script = _.util.currentScript();\n\n\tif (script) {\n\t\t_.filename = script.src;\n\n\t\tif (script.hasAttribute('data-manual')) {\n\t\t\t_.manual = true;\n\t\t}\n\t}\n\n\tfunction highlightAutomaticallyCallback() {\n\t\tif (!_.manual) {\n\t\t\t_.highlightAll();\n\t\t}\n\t}\n\n\tif (!_.manual) {\n\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\n\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\n\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n\t\t// See https://github.com/PrismJS/prism/issues/2102\n\t\tvar readyState = document.readyState;\n\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n\t\t} else {\n\t\t\tif (window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _;\n\n}(_self));\n\nif ( true && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof __webpack_require__.g !== 'undefined') {\n\t__webpack_require__.g.Prism = Prism;\n}\n\n// some additional documentation/types\n\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n *\n * @typedef GrammarToken\n * @property {RegExp} pattern The regular expression of the token.\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\n * @property {boolean} [greedy=false] Whether the token is greedy.\n * @property {string|string[]} [alias] An optional alias or list of aliases.\n * @property {Grammar} [inside] The nested grammar of this token.\n *\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\n *\n * This can be used to make nested and even recursive language definitions.\n *\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\n * each another.\n * @global\n * @public\n */\n\n/**\n * @typedef Grammar\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\n * @global\n * @public\n */\n\n/**\n * A function which will invoked after an element was successfully highlighted.\n *\n * @callback HighlightCallback\n * @param {Element} element The element successfully highlighted.\n * @returns {void}\n * @global\n * @public\n */\n\n/**\n * @callback HookCallback\n * @param {Object<string, any>} env The environment variables of the hook.\n * @returns {void}\n * @global\n * @public\n */\n\n\n/* **********************************************\n     Begin prism-markup.js\n********************************************** */\n\nPrism.languages.markup = {\n\t'comment': {\n\t\tpattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n\t\tgreedy: true\n\t},\n\t'prolog': {\n\t\tpattern: /<\\?[\\s\\S]+?\\?>/,\n\t\tgreedy: true\n\t},\n\t'doctype': {\n\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'internal-subset': {\n\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t'string': {\n\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t'punctuation': /^<!|>$|[[\\]]/,\n\t\t\t'doctype-tag': /^DOCTYPE/i,\n\t\t\t'name': /[^\\s<>'\"]+/\n\t\t}\n\t},\n\t'cdata': {\n\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\tgreedy: true\n\t},\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'special-attr': [],\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^(\\s*)[\"']|[\"']$/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': [\n\t\t{\n\t\t\tpattern: /&[\\da-z]{1,8};/i,\n\t\t\talias: 'named-entity'\n\t\t},\n\t\t/&#x?[\\da-f]{1,8};/i\n\t]\n};\n\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n\tPrism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function (env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n\t/**\n\t * Adds an inlined language to markup.\n\t *\n\t * An example of an inlined language is CSS with `<style>` tags.\n\t *\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addInlined('style', 'css');\n\t */\n\tvalue: function addInlined(tagName, lang) {\n\t\tvar includedCdataInside = {};\n\t\tincludedCdataInside['language-' + lang] = {\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n\n\t\tvar inside = {\n\t\t\t'included-cdata': {\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\t\t\tinside: includedCdataInside\n\t\t\t}\n\t\t};\n\t\tinside['language-' + lang] = {\n\t\t\tpattern: /[\\s\\S]+/,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\n\t\tvar def = {};\n\t\tdef[tagName] = {\n\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: inside\n\t\t};\n\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\n\t}\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n\t/**\n\t * Adds an pattern to highlight languages embedded in HTML attributes.\n\t *\n\t * An example of an inlined language is CSS with `style` attributes.\n\t *\n\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addAttribute('style', 'css');\n\t */\n\tvalue: function (attrName, lang) {\n\t\tPrism.languages.markup.tag.inside['special-attr'].push({\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n\t\t\t\t'i'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'attr-name': /^[^\\s=]+/,\n\t\t\t\t'attr-value': {\n\t\t\t\t\tpattern: /=[\\s\\S]+/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'value': {\n\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n\t\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\t\talias: [lang, 'language-' + lang],\n\t\t\t\t\t\t\tinside: Prism.languages[lang]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n});\n\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n\n\n/* **********************************************\n     Begin prism-css.js\n********************************************** */\n\n(function (Prism) {\n\n\tvar string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n\n\tPrism.languages.css = {\n\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n\t\t'atrule': {\n\t\t\tpattern: RegExp('@[\\\\w-](?:' + /[^;{\\s\"']|\\s+(?!\\s)/.source + '|' + string.source + ')*?' + /(?:;|(?=\\s*\\{))/.source),\n\t\t\tinside: {\n\t\t\t\t'rule': /^@[\\w-]+/,\n\t\t\t\t'selector-function-argument': {\n\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'selector'\n\t\t\t\t},\n\t\t\t\t'keyword': {\n\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t\t// See rest below\n\t\t\t}\n\t\t},\n\t\t'url': {\n\t\t\t// https://drafts.csswg.org/css-values-3/#urls\n\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^url/i,\n\t\t\t\t'punctuation': /^\\(|\\)$/,\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),\n\t\t\t\t\talias: 'url'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'selector': {\n\t\t\tpattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n\t\t\tlookbehind: true\n\t\t},\n\t\t'string': {\n\t\t\tpattern: string,\n\t\t\tgreedy: true\n\t\t},\n\t\t'property': {\n\t\t\tpattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'important': /!important\\b/i,\n\t\t'function': {\n\t\t\tpattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'punctuation': /[(){};:,]/\n\t};\n\n\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\n\n\tvar markup = Prism.languages.markup;\n\tif (markup) {\n\t\tmarkup.tag.addInlined('style', 'css');\n\t\tmarkup.tag.addAttribute('style', 'css');\n\t}\n\n}(Prism));\n\n\n/* **********************************************\n     Begin prism-clike.js\n********************************************** */\n\nPrism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n\t'boolean': /\\b(?:false|true)\\b/,\n\t'function': /\\b\\w+(?=\\()/,\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\n\n/* **********************************************\n     Begin prism-javascript.js\n********************************************** */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n\t'class-name': [\n\t\tPrism.languages.clike['class-name'],\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'keyword': [\n\t\t{\n\t\t\tpattern: /((?:^|\\})\\s*)catch\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t],\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n\t'number': {\n\t\tpattern: RegExp(\n\t\t\t/(^|[^\\w$])/.source +\n\t\t\t'(?:' +\n\t\t\t(\n\t\t\t\t// constant\n\t\t\t\t/NaN|Infinity/.source +\n\t\t\t\t'|' +\n\t\t\t\t// binary integer\n\t\t\t\t/0[bB][01]+(?:_[01]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// octal integer\n\t\t\t\t/0[oO][0-7]+(?:_[0-7]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// hexadecimal integer\n\t\t\t\t/0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal bigint\n\t\t\t\t/\\d+(?:_\\d+)*n/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal number (integer or float) but no bigint\n\t\t\t\t/(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source\n\t\t\t) +\n\t\t\t')' +\n\t\t\t/(?![\\w$])/.source\n\t\t),\n\t\tlookbehind: true\n\t},\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\n\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\tpattern: RegExp(\n\t\t\t// lookbehind\n\t\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\n\t\t\t/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)/.source +\n\t\t\t// Regex pattern:\n\t\t\t// There are 2 regex patterns here. The RegExp set notation proposal added support for nested character\n\t\t\t// classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible\n\t\t\t// with the only syntax, so we have to define 2 different regex patterns.\n\t\t\t/\\//.source +\n\t\t\t'(?:' +\n\t\t\t/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}/.source +\n\t\t\t'|' +\n\t\t\t// `v` flag syntax. This supports 3 levels of nested character classes.\n\t\t\t/(?:\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.)*\\])*\\])*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source +\n\t\t\t')' +\n\t\t\t// lookahead\n\t\t\t/(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/.source\n\t\t),\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'regex-source': {\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'language-regex',\n\t\t\t\tinside: Prism.languages.regex\n\t\t\t},\n\t\t\t'regex-delimiter': /^\\/|\\/$/,\n\t\t\t'regex-flags': /^[a-z]+$/,\n\t\t}\n\t},\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\n\t'function-variable': {\n\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n\t\talias: 'function'\n\t},\n\t'parameter': [\n\t\t{\n\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t}\n\t],\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'hashbang': {\n\t\tpattern: /^#!.*/,\n\t\tgreedy: true,\n\t\talias: 'comment'\n\t},\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'template-punctuation': {\n\t\t\t\tpattern: /^`|`$/,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t},\n\t'string-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\talias: 'property'\n\t}\n});\n\nPrism.languages.insertBefore('javascript', 'operator', {\n\t'literal-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\talias: 'property'\n\t},\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\n\n\t// add attribute support for all DOM events.\n\t// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\tPrism.languages.markup.tag.addAttribute(\n\t\t/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\n\t\t'javascript'\n\t);\n}\n\nPrism.languages.js = Prism.languages.javascript;\n\n\n/* **********************************************\n     Begin prism-file-highlight.js\n********************************************** */\n\n(function () {\n\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined') {\n\t\treturn;\n\t}\n\n\t// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n\tif (!Element.prototype.matches) {\n\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n\t}\n\n\tvar LOADING_MESSAGE = 'Loading…';\n\tvar FAILURE_MESSAGE = function (status, message) {\n\t\treturn '✖ Error ' + status + ' while fetching file: ' + message;\n\t};\n\tvar FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';\n\n\tvar EXTENSIONS = {\n\t\t'js': 'javascript',\n\t\t'py': 'python',\n\t\t'rb': 'ruby',\n\t\t'ps1': 'powershell',\n\t\t'psm1': 'powershell',\n\t\t'sh': 'bash',\n\t\t'bat': 'batch',\n\t\t'h': 'c',\n\t\t'tex': 'latex'\n\t};\n\n\tvar STATUS_ATTR = 'data-src-status';\n\tvar STATUS_LOADING = 'loading';\n\tvar STATUS_LOADED = 'loaded';\n\tvar STATUS_FAILED = 'failed';\n\n\tvar SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])'\n\t\t+ ':not([' + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';\n\n\t/**\n\t * Loads the given file.\n\t *\n\t * @param {string} src The URL or path of the source file to load.\n\t * @param {(result: string) => void} success\n\t * @param {(reason: string) => void} error\n\t */\n\tfunction loadFile(src, success, error) {\n\t\tvar xhr = new XMLHttpRequest();\n\t\txhr.open('GET', src, true);\n\t\txhr.onreadystatechange = function () {\n\t\t\tif (xhr.readyState == 4) {\n\t\t\t\tif (xhr.status < 400 && xhr.responseText) {\n\t\t\t\t\tsuccess(xhr.responseText);\n\t\t\t\t} else {\n\t\t\t\t\tif (xhr.status >= 400) {\n\t\t\t\t\t\terror(FAILURE_MESSAGE(xhr.status, xhr.statusText));\n\t\t\t\t\t} else {\n\t\t\t\t\t\terror(FAILURE_EMPTY_MESSAGE);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\txhr.send(null);\n\t}\n\n\t/**\n\t * Parses the given range.\n\t *\n\t * This returns a range with inclusive ends.\n\t *\n\t * @param {string | null | undefined} range\n\t * @returns {[number, number | undefined] | undefined}\n\t */\n\tfunction parseRange(range) {\n\t\tvar m = /^\\s*(\\d+)\\s*(?:(,)\\s*(?:(\\d+)\\s*)?)?$/.exec(range || '');\n\t\tif (m) {\n\t\t\tvar start = Number(m[1]);\n\t\t\tvar comma = m[2];\n\t\t\tvar end = m[3];\n\n\t\t\tif (!comma) {\n\t\t\t\treturn [start, start];\n\t\t\t}\n\t\t\tif (!end) {\n\t\t\t\treturn [start, undefined];\n\t\t\t}\n\t\t\treturn [start, Number(end)];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tPrism.hooks.add('before-highlightall', function (env) {\n\t\tenv.selector += ', ' + SELECTOR;\n\t});\n\n\tPrism.hooks.add('before-sanity-check', function (env) {\n\t\tvar pre = /** @type {HTMLPreElement} */ (env.element);\n\t\tif (pre.matches(SELECTOR)) {\n\t\t\tenv.code = ''; // fast-path the whole thing and go to complete\n\n\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading\n\n\t\t\t// add code element with loading message\n\t\t\tvar code = pre.appendChild(document.createElement('CODE'));\n\t\t\tcode.textContent = LOADING_MESSAGE;\n\n\t\t\tvar src = pre.getAttribute('data-src');\n\n\t\t\tvar language = env.language;\n\t\t\tif (language === 'none') {\n\t\t\t\t// the language might be 'none' because there is no language set;\n\t\t\t\t// in this case, we want to use the extension as the language\n\t\t\t\tvar extension = (/\\.(\\w+)$/.exec(src) || [, 'none'])[1];\n\t\t\t\tlanguage = EXTENSIONS[extension] || extension;\n\t\t\t}\n\n\t\t\t// set language classes\n\t\t\tPrism.util.setLanguage(code, language);\n\t\t\tPrism.util.setLanguage(pre, language);\n\n\t\t\t// preload the language\n\t\t\tvar autoloader = Prism.plugins.autoloader;\n\t\t\tif (autoloader) {\n\t\t\t\tautoloader.loadLanguages(language);\n\t\t\t}\n\n\t\t\t// load file\n\t\t\tloadFile(\n\t\t\t\tsrc,\n\t\t\t\tfunction (text) {\n\t\t\t\t\t// mark as loaded\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADED);\n\n\t\t\t\t\t// handle data-range\n\t\t\t\t\tvar range = parseRange(pre.getAttribute('data-range'));\n\t\t\t\t\tif (range) {\n\t\t\t\t\t\tvar lines = text.split(/\\r\\n?|\\n/g);\n\n\t\t\t\t\t\t// the range is one-based and inclusive on both ends\n\t\t\t\t\t\tvar start = range[0];\n\t\t\t\t\t\tvar end = range[1] == null ? lines.length : range[1];\n\n\t\t\t\t\t\tif (start < 0) { start += lines.length; }\n\t\t\t\t\t\tstart = Math.max(0, Math.min(start - 1, lines.length));\n\t\t\t\t\t\tif (end < 0) { end += lines.length; }\n\t\t\t\t\t\tend = Math.max(0, Math.min(end, lines.length));\n\n\t\t\t\t\t\ttext = lines.slice(start, end).join('\\n');\n\n\t\t\t\t\t\t// add data-start for line numbers\n\t\t\t\t\t\tif (!pre.hasAttribute('data-start')) {\n\t\t\t\t\t\t\tpre.setAttribute('data-start', String(start + 1));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// highlight code\n\t\t\t\t\tcode.textContent = text;\n\t\t\t\t\tPrism.highlightElement(code);\n\t\t\t\t},\n\t\t\t\tfunction (error) {\n\t\t\t\t\t// mark as failed\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);\n\n\t\t\t\t\tcode.textContent = error;\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t});\n\n\tPrism.plugins.fileHighlight = {\n\t\t/**\n\t\t * Executes the File Highlight plugin for all matching `pre` elements under the given container.\n\t\t *\n\t\t * Note: Elements which are already loaded or currently loading will not be touched by this method.\n\t\t *\n\t\t * @param {ParentNode} [container=document]\n\t\t */\n\t\thighlight: function highlight(container) {\n\t\t\tvar elements = (container || document).querySelectorAll(SELECTOR);\n\n\t\t\tfor (var i = 0, element; (element = elements[i++]);) {\n\t\t\t\tPrism.highlightElement(element);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar logged = false;\n\t/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */\n\tPrism.fileHighlight = function () {\n\t\tif (!logged) {\n\t\t\tconsole.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');\n\t\t\tlogged = true;\n\t\t}\n\t\tPrism.plugins.fileHighlight.highlight.apply(this, arguments);\n\t};\n\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prismjs/prism.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorBoundary: () => (/* binding */ ErrorBoundary),\n/* harmony export */   ErrorBoundaryContext: () => (/* binding */ ErrorBoundaryContext),\n/* harmony export */   useErrorBoundary: () => (/* binding */ useErrorBoundary),\n/* harmony export */   withErrorBoundary: () => (/* binding */ withErrorBoundary)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ ErrorBoundary,ErrorBoundaryContext,useErrorBoundary,withErrorBoundary auto */ var _s = $RefreshSig$();\n\nconst ErrorBoundaryContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst initialState = {\n    didCatch: false,\n    error: null\n};\nclass ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    static getDerivedStateFromError(error) {\n        return {\n            didCatch: true,\n            error\n        };\n    }\n    resetErrorBoundary() {\n        const { error } = this.state;\n        if (error !== null) {\n            var _this$props$onReset, _this$props;\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            (_this$props$onReset = (_this$props = this.props).onReset) === null || _this$props$onReset === void 0 ? void 0 : _this$props$onReset.call(_this$props, {\n                args,\n                reason: \"imperative-api\"\n            });\n            this.setState(initialState);\n        }\n    }\n    componentDidCatch(error, info) {\n        var _this$props$onError, _this$props2;\n        (_this$props$onError = (_this$props2 = this.props).onError) === null || _this$props$onError === void 0 ? void 0 : _this$props$onError.call(_this$props2, error, info);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { didCatch } = this.state;\n        const { resetKeys } = this.props;\n        // There's an edge case where if the thing that triggered the error happens to *also* be in the resetKeys array,\n        // we'd end up resetting the error boundary immediately.\n        // This would likely trigger a second error to be thrown.\n        // So we make sure that we don't check the resetKeys on the first call of cDU after the error is set.\n        if (didCatch && prevState.error !== null && hasArrayChanged(prevProps.resetKeys, resetKeys)) {\n            var _this$props$onReset2, _this$props3;\n            (_this$props$onReset2 = (_this$props3 = this.props).onReset) === null || _this$props$onReset2 === void 0 ? void 0 : _this$props$onReset2.call(_this$props3, {\n                next: resetKeys,\n                prev: prevProps.resetKeys,\n                reason: \"keys\"\n            });\n            this.setState(initialState);\n        }\n    }\n    render() {\n        const { children, fallbackRender, FallbackComponent, fallback } = this.props;\n        const { didCatch, error } = this.state;\n        let childToRender = children;\n        if (didCatch) {\n            const props = {\n                error,\n                resetErrorBoundary: this.resetErrorBoundary\n            };\n            if (typeof fallbackRender === \"function\") {\n                childToRender = fallbackRender(props);\n            } else if (FallbackComponent) {\n                childToRender = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(FallbackComponent, props);\n            } else if (fallback === null || /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(fallback)) {\n                childToRender = fallback;\n            } else {\n                {\n                    console.error(\"react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop\");\n                }\n                throw error;\n            }\n        }\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(ErrorBoundaryContext.Provider, {\n            value: {\n                didCatch,\n                error,\n                resetErrorBoundary: this.resetErrorBoundary\n            }\n        }, childToRender);\n    }\n    constructor(props){\n        super(props);\n        this.resetErrorBoundary = this.resetErrorBoundary.bind(this);\n        this.state = initialState;\n    }\n}\nfunction hasArrayChanged() {\n    let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return a.length !== b.length || a.some((item, index)=>!Object.is(item, b[index]));\n}\nfunction assertErrorBoundaryContext(value) {\n    if (value == null || typeof value.didCatch !== \"boolean\" || typeof value.resetErrorBoundary !== \"function\") {\n        throw new Error(\"ErrorBoundaryContext not found\");\n    }\n}\nfunction useErrorBoundary() {\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ErrorBoundaryContext);\n    assertErrorBoundaryContext(context);\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        error: null,\n        hasError: false\n    });\n    const memoized = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            resetBoundary: ()=>{\n                context.resetErrorBoundary();\n                setState({\n                    error: null,\n                    hasError: false\n                });\n            },\n            showBoundary: (error)=>setState({\n                    error,\n                    hasError: true\n                })\n        }), [\n        context.resetErrorBoundary\n    ]);\n    if (state.hasError) {\n        throw state.error;\n    }\n    return memoized;\n}\n_s(useErrorBoundary, \"+pKi6m5l0SpCZXu8kma/1W0pdXE=\");\nfunction withErrorBoundary(component, errorBoundaryProps) {\n    const Wrapped = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(ErrorBoundary, errorBoundaryProps, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(component, {\n            ...props,\n            ref\n        })));\n    // Format for display in DevTools\n    const name = component.displayName || component.name || \"Unknown\";\n    Wrapped.displayName = \"withErrorBoundary(\".concat(name, \")\");\n    return Wrapped;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/index.scss":
/*!*************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/index.scss ***!
  \*************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"b6fab178e662\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BwYXlsb2FkY21zL3JpY2h0ZXh0LWxleGljYWwvZGlzdC9maWVsZC9pbmRleC5zY3NzP2JmMzIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJiNmZhYjE3OGU2NjJcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/index.scss\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/LexicalEditor.scss":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/LexicalEditor.scss ***!
  \*****************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"3f73b540e307\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9MZXhpY2FsRWRpdG9yLnNjc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9MZXhpY2FsRWRpdG9yLnNjc3M/NWI3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjNmNzNiNTQwZTMwN1wiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/LexicalEditor.scss\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/SlashMenu/index.scss":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/SlashMenu/index.scss ***!
  \***************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"6d967c71fe26\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9wbHVnaW5zL1NsYXNoTWVudS9pbmRleC5zY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksSUFBVSxJQUFJLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHBheWxvYWRjbXMvcmljaHRleHQtbGV4aWNhbC9kaXN0L2ZpZWxkL2xleGljYWwvcGx1Z2lucy9TbGFzaE1lbnUvaW5kZXguc2Nzcz83NWZkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiNmQ5NjdjNzFmZTI2XCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/SlashMenu/index.scss\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/AddBlockHandlePlugin/index.scss":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/AddBlockHandlePlugin/index.scss ***!
  \**********************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"c36af7ae4b2e\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvQWRkQmxvY2tIYW5kbGVQbHVnaW4vaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BwYXlsb2FkY21zL3JpY2h0ZXh0LWxleGljYWwvZGlzdC9maWVsZC9sZXhpY2FsL3BsdWdpbnMvaGFuZGxlcy9BZGRCbG9ja0hhbmRsZVBsdWdpbi9pbmRleC5zY3NzPzllMWMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJjMzZhZjdhZTRiMmVcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/AddBlockHandlePlugin/index.scss\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/index.scss":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/index.scss ***!
  \**********************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"2638320fdc64\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvRHJhZ2dhYmxlQmxvY2tQbHVnaW4vaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BwYXlsb2FkY21zL3JpY2h0ZXh0LWxleGljYWwvZGlzdC9maWVsZC9sZXhpY2FsL3BsdWdpbnMvaGFuZGxlcy9EcmFnZ2FibGVCbG9ja1BsdWdpbi9pbmRleC5zY3NzP2MxOGQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIyNjM4MzIwZmRjNjRcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/index.scss\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/ui/ContentEditable.scss":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/ui/ContentEditable.scss ***!
  \**********************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"b832709ae1d5\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC91aS9Db250ZW50RWRpdGFibGUuc2NzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BwYXlsb2FkY21zL3JpY2h0ZXh0LWxleGljYWwvZGlzdC9maWVsZC9sZXhpY2FsL3VpL0NvbnRlbnRFZGl0YWJsZS5zY3NzPzcxMjMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJiODMyNzA5YWUxZDVcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/ui/ContentEditable.scss\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/code/LexicalCode.dev.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@lexical/code/LexicalCode.dev.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $createCodeHighlightNode: () => (/* binding */ $createCodeHighlightNode),\n/* harmony export */   $createCodeNode: () => (/* binding */ $createCodeNode),\n/* harmony export */   $isCodeHighlightNode: () => (/* binding */ $isCodeHighlightNode),\n/* harmony export */   $isCodeNode: () => (/* binding */ $isCodeNode),\n/* harmony export */   CODE_LANGUAGE_FRIENDLY_NAME_MAP: () => (/* binding */ CODE_LANGUAGE_FRIENDLY_NAME_MAP),\n/* harmony export */   CODE_LANGUAGE_MAP: () => (/* binding */ CODE_LANGUAGE_MAP),\n/* harmony export */   CodeHighlightNode: () => (/* binding */ CodeHighlightNode),\n/* harmony export */   CodeNode: () => (/* binding */ CodeNode),\n/* harmony export */   DEFAULT_CODE_LANGUAGE: () => (/* binding */ DEFAULT_CODE_LANGUAGE),\n/* harmony export */   PrismTokenizer: () => (/* binding */ PrismTokenizer),\n/* harmony export */   getCodeLanguages: () => (/* binding */ getCodeLanguages),\n/* harmony export */   getDefaultCodeLanguage: () => (/* binding */ getDefaultCodeLanguage),\n/* harmony export */   getEndOfCodeInLine: () => (/* binding */ getEndOfCodeInLine),\n/* harmony export */   getFirstCodeNodeOfLine: () => (/* binding */ getFirstCodeNodeOfLine),\n/* harmony export */   getLanguageFriendlyName: () => (/* binding */ getLanguageFriendlyName),\n/* harmony export */   getLastCodeNodeOfLine: () => (/* binding */ getLastCodeNodeOfLine),\n/* harmony export */   getStartOfCodeInLine: () => (/* binding */ getStartOfCodeInLine),\n/* harmony export */   normalizeCodeLang: () => (/* binding */ normalizeCodeLang),\n/* harmony export */   registerCodeHighlighting: () => (/* binding */ registerCodeHighlighting)\n/* harmony export */ });\n/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prismjs */ \"(app-pages-browser)/./node_modules/prismjs/prism.js\");\n/* harmony import */ var prismjs_components_prism_clike_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prismjs/components/prism-clike.js */ \"(app-pages-browser)/./node_modules/prismjs/components/prism-clike.js\");\n/* harmony import */ var prismjs_components_prism_javascript_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prismjs/components/prism-javascript.js */ \"(app-pages-browser)/./node_modules/prismjs/components/prism-javascript.js\");\n/* harmony import */ var prismjs_components_prism_markup_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prismjs/components/prism-markup.js */ \"(app-pages-browser)/./node_modules/prismjs/components/prism-markup.js\");\n/* harmony import */ var prismjs_components_prism_markdown_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! prismjs/components/prism-markdown.js */ \"(app-pages-browser)/./node_modules/prismjs/components/prism-markdown.js\");\n/* harmony import */ var prismjs_components_prism_c_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! prismjs/components/prism-c.js */ \"(app-pages-browser)/./node_modules/prismjs/components/prism-c.js\");\n/* harmony import */ var prismjs_components_prism_css_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! prismjs/components/prism-css.js */ \"(app-pages-browser)/./node_modules/prismjs/components/prism-css.js\");\n/* harmony import */ var prismjs_components_prism_objectivec_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! prismjs/components/prism-objectivec.js */ \"(app-pages-browser)/./node_modules/prismjs/components/prism-objectivec.js\");\n/* harmony import */ var prismjs_components_prism_sql_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! prismjs/components/prism-sql.js */ \"(app-pages-browser)/./node_modules/prismjs/components/prism-sql.js\");\n/* harmony import */ var prismjs_components_prism_powershell_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! prismjs/components/prism-powershell.js */ \"(app-pages-browser)/./node_modules/prismjs/components/prism-powershell.js\");\n/* harmony import */ var prismjs_components_prism_python_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! prismjs/components/prism-python.js */ \"(app-pages-browser)/./node_modules/prismjs/components/prism-python.js\");\n/* harmony import */ var prismjs_components_prism_rust_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! prismjs/components/prism-rust.js */ \"(app-pages-browser)/./node_modules/prismjs/components/prism-rust.js\");\n/* harmony import */ var prismjs_components_prism_swift_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! prismjs/components/prism-swift.js */ \"(app-pages-browser)/./node_modules/prismjs/components/prism-swift.js\");\n/* harmony import */ var prismjs_components_prism_typescript_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! prismjs/components/prism-typescript.js */ \"(app-pages-browser)/./node_modules/prismjs/components/prism-typescript.js\");\n/* harmony import */ var prismjs_components_prism_java_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! prismjs/components/prism-java.js */ \"(app-pages-browser)/./node_modules/prismjs/components/prism-java.js\");\n/* harmony import */ var prismjs_components_prism_cpp_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! prismjs/components/prism-cpp.js */ \"(app-pages-browser)/./node_modules/prismjs/components/prism-cpp.js\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// invariant(condition, message) will refine types based on \"condition\", and\n// if \"condition\" is false will throw an error. This function is special-cased\n// in flow itself, so we can't name it anything else.\nfunction invariant(cond, message, ...args) {\n  if (cond) {\n    return;\n  }\n  throw new Error('Internal Lexical error: invariant() is meant to be replaced at compile ' + 'time. There is no runtime version. Error: ' + message);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst mapToPrismLanguage = language => {\n  // eslint-disable-next-line no-prototype-builtins\n  return language != null && window.Prism.languages.hasOwnProperty(language) ? language : undefined;\n};\nfunction hasChildDOMNodeTag(node, tagName) {\n  for (const child of node.childNodes) {\n    if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.isHTMLElement)(child) && child.tagName === tagName) {\n      return true;\n    }\n    hasChildDOMNodeTag(child, tagName);\n  }\n  return false;\n}\nconst LANGUAGE_DATA_ATTRIBUTE = 'data-highlight-language';\n\n/** @noInheritDoc */\nclass CodeNode extends _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'code';\n  }\n  static clone(node) {\n    return new CodeNode(node.__language, node.__key);\n  }\n  constructor(language, key) {\n    super(key);\n    this.__language = mapToPrismLanguage(language);\n  }\n\n  // View\n  createDOM(config) {\n    const element = document.createElement('code');\n    (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_17__.addClassNamesToElement)(element, config.theme.code);\n    element.setAttribute('spellcheck', 'false');\n    const language = this.getLanguage();\n    if (language) {\n      element.setAttribute(LANGUAGE_DATA_ATTRIBUTE, language);\n    }\n    return element;\n  }\n  updateDOM(prevNode, dom, config) {\n    const language = this.__language;\n    const prevLanguage = prevNode.__language;\n    if (language) {\n      if (language !== prevLanguage) {\n        dom.setAttribute(LANGUAGE_DATA_ATTRIBUTE, language);\n      }\n    } else if (prevLanguage) {\n      dom.removeAttribute(LANGUAGE_DATA_ATTRIBUTE);\n    }\n    return false;\n  }\n  exportDOM(editor) {\n    const element = document.createElement('pre');\n    (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_17__.addClassNamesToElement)(element, editor._config.theme.code);\n    element.setAttribute('spellcheck', 'false');\n    const language = this.getLanguage();\n    if (language) {\n      element.setAttribute(LANGUAGE_DATA_ATTRIBUTE, language);\n    }\n    return {\n      element\n    };\n  }\n  static importDOM() {\n    return {\n      // Typically <pre> is used for code blocks, and <code> for inline code styles\n      // but if it's a multi line <code> we'll create a block. Pass through to\n      // inline format handled by TextNode otherwise.\n      code: node => {\n        const isMultiLine = node.textContent != null && (/\\r?\\n/.test(node.textContent) || hasChildDOMNodeTag(node, 'BR'));\n        return isMultiLine ? {\n          conversion: $convertPreElement,\n          priority: 1\n        } : null;\n      },\n      div: node => ({\n        conversion: $convertDivElement,\n        priority: 1\n      }),\n      pre: node => ({\n        conversion: $convertPreElement,\n        priority: 0\n      }),\n      table: node => {\n        const table = node;\n        // domNode is a <table> since we matched it by nodeName\n        if (isGitHubCodeTable(table)) {\n          return {\n            conversion: $convertTableElement,\n            priority: 3\n          };\n        }\n        return null;\n      },\n      td: node => {\n        // element is a <td> since we matched it by nodeName\n        const td = node;\n        const table = td.closest('table');\n        if (isGitHubCodeCell(td) || table && isGitHubCodeTable(table)) {\n          // Return a no-op if it's a table cell in a code table, but not a code line.\n          // Otherwise it'll fall back to the T\n          return {\n            conversion: convertCodeNoop,\n            priority: 3\n          };\n        }\n        return null;\n      },\n      tr: node => {\n        // element is a <tr> since we matched it by nodeName\n        const tr = node;\n        const table = tr.closest('table');\n        if (table && isGitHubCodeTable(table)) {\n          return {\n            conversion: convertCodeNoop,\n            priority: 3\n          };\n        }\n        return null;\n      }\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createCodeNode(serializedNode.language);\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      language: this.getLanguage(),\n      type: 'code',\n      version: 1\n    };\n  }\n\n  // Mutation\n  insertNewAfter(selection, restoreSelection = true) {\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    if (childrenLength >= 2 && children[childrenLength - 1].getTextContent() === '\\n' && children[childrenLength - 2].getTextContent() === '\\n' && selection.isCollapsed() && selection.anchor.key === this.__key && selection.anchor.offset === childrenLength) {\n      children[childrenLength - 1].remove();\n      children[childrenLength - 2].remove();\n      const newElement = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createParagraphNode)();\n      this.insertAfter(newElement, restoreSelection);\n      return newElement;\n    }\n\n    // If the selection is within the codeblock, find all leading tabs and\n    // spaces of the current line. Create a new line that has all those\n    // tabs and spaces, such that leading indentation is preserved.\n    const {\n      anchor,\n      focus\n    } = selection;\n    const firstPoint = anchor.isBefore(focus) ? anchor : focus;\n    const firstSelectionNode = firstPoint.getNode();\n    if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTextNode)(firstSelectionNode)) {\n      let node = getFirstCodeNodeOfLine(firstSelectionNode);\n      const insertNodes = [];\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(node)) {\n          insertNodes.push((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createTabNode)());\n          node = node.getNextSibling();\n        } else if ($isCodeHighlightNode(node)) {\n          let spaces = 0;\n          const text = node.getTextContent();\n          const textSize = node.getTextContentSize();\n          while (spaces < textSize && text[spaces] === ' ') {\n            spaces++;\n          }\n          if (spaces !== 0) {\n            insertNodes.push($createCodeHighlightNode(' '.repeat(spaces)));\n          }\n          if (spaces !== textSize) {\n            break;\n          }\n          node = node.getNextSibling();\n        } else {\n          break;\n        }\n      }\n      const split = firstSelectionNode.splitText(anchor.offset)[0];\n      const x = anchor.offset === 0 ? 0 : 1;\n      const index = split.getIndexWithinParent() + x;\n      const codeNode = firstSelectionNode.getParentOrThrow();\n      const nodesToInsert = [(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createLineBreakNode)(), ...insertNodes];\n      codeNode.splice(index, 0, nodesToInsert);\n      const last = insertNodes[insertNodes.length - 1];\n      if (last) {\n        last.select();\n      } else if (anchor.offset === 0) {\n        split.selectPrevious();\n      } else {\n        split.getNextSibling().selectNext(0, 0);\n      }\n    }\n    if ($isCodeNode(firstSelectionNode)) {\n      const {\n        offset\n      } = selection.anchor;\n      firstSelectionNode.splice(offset, 0, [(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createLineBreakNode)()]);\n      firstSelectionNode.select(offset + 1, offset + 1);\n    }\n    return null;\n  }\n  canIndent() {\n    return false;\n  }\n  collapseAtStart() {\n    const paragraph = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createParagraphNode)();\n    const children = this.getChildren();\n    children.forEach(child => paragraph.append(child));\n    this.replace(paragraph);\n    return true;\n  }\n  setLanguage(language) {\n    const writable = this.getWritable();\n    writable.__language = mapToPrismLanguage(language);\n  }\n  getLanguage() {\n    return this.getLatest().__language;\n  }\n}\nfunction $createCodeNode(language) {\n  return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$applyNodeReplacement)(new CodeNode(language));\n}\nfunction $isCodeNode(node) {\n  return node instanceof CodeNode;\n}\nfunction $convertPreElement(domNode) {\n  let language;\n  if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.isHTMLElement)(domNode)) {\n    language = domNode.getAttribute(LANGUAGE_DATA_ATTRIBUTE);\n  }\n  return {\n    node: $createCodeNode(language)\n  };\n}\nfunction $convertDivElement(domNode) {\n  // domNode is a <div> since we matched it by nodeName\n  const div = domNode;\n  const isCode = isCodeElement(div);\n  if (!isCode && !isCodeChildElement(div)) {\n    return {\n      node: null\n    };\n  }\n  return {\n    node: isCode ? $createCodeNode() : null\n  };\n}\nfunction $convertTableElement() {\n  return {\n    node: $createCodeNode()\n  };\n}\nfunction convertCodeNoop() {\n  return {\n    node: null\n  };\n}\nfunction isCodeElement(div) {\n  return div.style.fontFamily.match('monospace') !== null;\n}\nfunction isCodeChildElement(node) {\n  let parent = node.parentElement;\n  while (parent !== null) {\n    if (isCodeElement(parent)) {\n      return true;\n    }\n    parent = parent.parentElement;\n  }\n  return false;\n}\nfunction isGitHubCodeCell(cell) {\n  return cell.classList.contains('js-file-line');\n}\nfunction isGitHubCodeTable(table) {\n  return table.classList.contains('js-file-line-container');\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst DEFAULT_CODE_LANGUAGE = 'javascript';\nconst CODE_LANGUAGE_FRIENDLY_NAME_MAP = {\n  c: 'C',\n  clike: 'C-like',\n  cpp: 'C++',\n  css: 'CSS',\n  html: 'HTML',\n  java: 'Java',\n  js: 'JavaScript',\n  markdown: 'Markdown',\n  objc: 'Objective-C',\n  plain: 'Plain Text',\n  powershell: 'PowerShell',\n  py: 'Python',\n  rust: 'Rust',\n  sql: 'SQL',\n  swift: 'Swift',\n  typescript: 'TypeScript',\n  xml: 'XML'\n};\nconst CODE_LANGUAGE_MAP = {\n  cpp: 'cpp',\n  java: 'java',\n  javascript: 'js',\n  md: 'markdown',\n  plaintext: 'plain',\n  python: 'py',\n  text: 'plain',\n  ts: 'typescript'\n};\nfunction normalizeCodeLang(lang) {\n  return CODE_LANGUAGE_MAP[lang] || lang;\n}\nfunction getLanguageFriendlyName(lang) {\n  const _lang = normalizeCodeLang(lang);\n  return CODE_LANGUAGE_FRIENDLY_NAME_MAP[_lang] || _lang;\n}\nconst getDefaultCodeLanguage = () => DEFAULT_CODE_LANGUAGE;\nconst getCodeLanguages = () => Object.keys(window.Prism.languages).filter(\n// Prism has several language helpers mixed into languages object\n// so filtering them out here to get langs list\nlanguage => typeof window.Prism.languages[language] !== 'function').sort();\n\n/** @noInheritDoc */\nclass CodeHighlightNode extends _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.TextNode {\n  /** @internal */\n\n  constructor(text, highlightType, key) {\n    super(text, key);\n    this.__highlightType = highlightType;\n  }\n  static getType() {\n    return 'code-highlight';\n  }\n  static clone(node) {\n    return new CodeHighlightNode(node.__text, node.__highlightType || undefined, node.__key);\n  }\n  getHighlightType() {\n    const self = this.getLatest();\n    return self.__highlightType;\n  }\n  canHaveFormat() {\n    return false;\n  }\n  createDOM(config) {\n    const element = super.createDOM(config);\n    const className = getHighlightThemeClass(config.theme, this.__highlightType);\n    (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_17__.addClassNamesToElement)(element, className);\n    return element;\n  }\n  updateDOM(prevNode, dom, config) {\n    const update = super.updateDOM(prevNode, dom, config);\n    const prevClassName = getHighlightThemeClass(config.theme, prevNode.__highlightType);\n    const nextClassName = getHighlightThemeClass(config.theme, this.__highlightType);\n    if (prevClassName !== nextClassName) {\n      if (prevClassName) {\n        (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_17__.removeClassNamesFromElement)(dom, prevClassName);\n      }\n      if (nextClassName) {\n        (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_17__.addClassNamesToElement)(dom, nextClassName);\n      }\n    }\n    return update;\n  }\n  static importJSON(serializedNode) {\n    const node = $createCodeHighlightNode(serializedNode.text, serializedNode.highlightType);\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      highlightType: this.getHighlightType(),\n      type: 'code-highlight',\n      version: 1\n    };\n  }\n\n  // Prevent formatting (bold, underline, etc)\n  setFormat(format) {\n    return this;\n  }\n  isParentRequired() {\n    return true;\n  }\n  createParentElementNode() {\n    return $createCodeNode();\n  }\n}\nfunction getHighlightThemeClass(theme, highlightType) {\n  return highlightType && theme && theme.codeHighlight && theme.codeHighlight[highlightType];\n}\nfunction $createCodeHighlightNode(text, highlightType) {\n  return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$applyNodeReplacement)(new CodeHighlightNode(text, highlightType));\n}\nfunction $isCodeHighlightNode(node) {\n  return node instanceof CodeHighlightNode;\n}\nfunction getFirstCodeNodeOfLine(anchor) {\n  let previousNode = anchor;\n  let node = anchor;\n  while ($isCodeHighlightNode(node) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(node)) {\n    previousNode = node;\n    node = node.getPreviousSibling();\n  }\n  return previousNode;\n}\nfunction getLastCodeNodeOfLine(anchor) {\n  let nextNode = anchor;\n  let node = anchor;\n  while ($isCodeHighlightNode(node) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(node)) {\n    nextNode = node;\n    node = node.getNextSibling();\n  }\n  return nextNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst PrismTokenizer = {\n  defaultLanguage: DEFAULT_CODE_LANGUAGE,\n  tokenize(code, language) {\n    return window.Prism.tokenize(code, window.Prism.languages[language || ''] || window.Prism.languages[this.defaultLanguage]);\n  }\n};\nfunction getStartOfCodeInLine(anchor, offset) {\n  let last = null;\n  let lastNonBlank = null;\n  let node = anchor;\n  let nodeOffset = offset;\n  let nodeTextContent = anchor.getTextContent();\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (nodeOffset === 0) {\n      node = node.getPreviousSibling();\n      if (node === null) {\n        break;\n      }\n      if (!($isCodeHighlightNode(node) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(node) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(node))) {\n        throw Error(`Expected a valid Code Node: CodeHighlightNode, TabNode, LineBreakNode`);\n      }\n      if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(node)) {\n        last = {\n          node,\n          offset: 1\n        };\n        break;\n      }\n      nodeOffset = Math.max(0, node.getTextContentSize() - 1);\n      nodeTextContent = node.getTextContent();\n    } else {\n      nodeOffset--;\n    }\n    const character = nodeTextContent[nodeOffset];\n    if ($isCodeHighlightNode(node) && character !== ' ') {\n      lastNonBlank = {\n        node,\n        offset: nodeOffset\n      };\n    }\n  }\n  // lastNonBlank !== null: anchor in the middle of code; move to line beginning\n  if (lastNonBlank !== null) {\n    return lastNonBlank;\n  }\n  // Spaces, tabs or nothing ahead of anchor\n  let codeCharacterAtAnchorOffset = null;\n  if (offset < anchor.getTextContentSize()) {\n    if ($isCodeHighlightNode(anchor)) {\n      codeCharacterAtAnchorOffset = anchor.getTextContent()[offset];\n    }\n  } else {\n    const nextSibling = anchor.getNextSibling();\n    if ($isCodeHighlightNode(nextSibling)) {\n      codeCharacterAtAnchorOffset = nextSibling.getTextContent()[0];\n    }\n  }\n  if (codeCharacterAtAnchorOffset !== null && codeCharacterAtAnchorOffset !== ' ') {\n    // Borderline whitespace and code, move to line beginning\n    return last;\n  } else {\n    const nextNonBlank = findNextNonBlankInLine(anchor, offset);\n    if (nextNonBlank !== null) {\n      return nextNonBlank;\n    } else {\n      return last;\n    }\n  }\n}\nfunction findNextNonBlankInLine(anchor, offset) {\n  let node = anchor;\n  let nodeOffset = offset;\n  let nodeTextContent = anchor.getTextContent();\n  let nodeTextContentSize = anchor.getTextContentSize();\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (!$isCodeHighlightNode(node) || nodeOffset === nodeTextContentSize) {\n      node = node.getNextSibling();\n      if (node === null || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(node)) {\n        return null;\n      }\n      if ($isCodeHighlightNode(node)) {\n        nodeOffset = 0;\n        nodeTextContent = node.getTextContent();\n        nodeTextContentSize = node.getTextContentSize();\n      }\n    }\n    if ($isCodeHighlightNode(node)) {\n      if (nodeTextContent[nodeOffset] !== ' ') {\n        return {\n          node,\n          offset: nodeOffset\n        };\n      }\n      nodeOffset++;\n    }\n  }\n}\nfunction getEndOfCodeInLine(anchor) {\n  const lastNode = getLastCodeNodeOfLine(anchor);\n  if (!!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(lastNode)) {\n    throw Error(`Unexpected lineBreakNode in getEndOfCodeInLine`);\n  }\n  return lastNode;\n}\nfunction $textNodeTransform(node, editor, tokenizer) {\n  // Since CodeNode has flat children structure we only need to check\n  // if node's parent is a code node and run highlighting if so\n  const parentNode = node.getParent();\n  if ($isCodeNode(parentNode)) {\n    codeNodeTransform(parentNode, editor, tokenizer);\n  } else if ($isCodeHighlightNode(node)) {\n    // When code block converted into paragraph or other element\n    // code highlight nodes converted back to normal text\n    node.replace((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createTextNode)(node.__text));\n  }\n}\nfunction updateCodeGutter(node, editor) {\n  const codeElement = editor.getElementByKey(node.getKey());\n  if (codeElement === null) {\n    return;\n  }\n  const children = node.getChildren();\n  const childrenLength = children.length;\n  // @ts-ignore: internal field\n  if (childrenLength === codeElement.__cachedChildrenLength) {\n    // Avoid updating the attribute if the children length hasn't changed.\n    return;\n  }\n  // @ts-ignore:: internal field\n  codeElement.__cachedChildrenLength = childrenLength;\n  let gutter = '1';\n  let count = 1;\n  for (let i = 0; i < childrenLength; i++) {\n    if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(children[i])) {\n      gutter += '\\n' + ++count;\n    }\n  }\n  codeElement.setAttribute('data-gutter', gutter);\n}\n\n// Using `skipTransforms` to prevent extra transforms since reformatting the code\n// will not affect code block content itself.\n//\n// Using extra cache (`nodesCurrentlyHighlighting`) since both CodeNode and CodeHighlightNode\n// transforms might be called at the same time (e.g. new CodeHighlight node inserted) and\n// in both cases we'll rerun whole reformatting over CodeNode, which is redundant.\n// Especially when pasting code into CodeBlock.\n\nconst nodesCurrentlyHighlighting = new Set();\nfunction codeNodeTransform(node, editor, tokenizer) {\n  const nodeKey = node.getKey();\n  if (nodesCurrentlyHighlighting.has(nodeKey)) {\n    return;\n  }\n  nodesCurrentlyHighlighting.add(nodeKey);\n\n  // When new code block inserted it might not have language selected\n  if (node.getLanguage() === undefined) {\n    node.setLanguage(tokenizer.defaultLanguage);\n  }\n\n  // Using nested update call to pass `skipTransforms` since we don't want\n  // each individual codehighlight node to be transformed again as it's already\n  // in its final state\n  editor.update(() => {\n    $updateAndRetainSelection(nodeKey, () => {\n      const currentNode = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getNodeByKey)(nodeKey);\n      if (!$isCodeNode(currentNode) || !currentNode.isAttached()) {\n        return false;\n      }\n      const code = currentNode.getTextContent();\n      const tokens = tokenizer.tokenize(code, currentNode.getLanguage() || tokenizer.defaultLanguage);\n      const highlightNodes = $getHighlightNodes(tokens);\n      const diffRange = getDiffRange(currentNode.getChildren(), highlightNodes);\n      const {\n        from,\n        to,\n        nodesForReplacement\n      } = diffRange;\n      if (from !== to || nodesForReplacement.length) {\n        node.splice(from, to - from, nodesForReplacement);\n        return true;\n      }\n      return false;\n    });\n  }, {\n    onUpdate: () => {\n      nodesCurrentlyHighlighting.delete(nodeKey);\n    },\n    skipTransforms: true\n  });\n}\nfunction $getHighlightNodes(tokens, type) {\n  const nodes = [];\n  for (const token of tokens) {\n    if (typeof token === 'string') {\n      const partials = token.split(/(\\n|\\t)/);\n      const partialsLength = partials.length;\n      for (let i = 0; i < partialsLength; i++) {\n        const part = partials[i];\n        if (part === '\\n' || part === '\\r\\n') {\n          nodes.push((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createLineBreakNode)());\n        } else if (part === '\\t') {\n          nodes.push((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createTabNode)());\n        } else if (part.length > 0) {\n          nodes.push($createCodeHighlightNode(part, type));\n        }\n      }\n    } else {\n      const {\n        content\n      } = token;\n      if (typeof content === 'string') {\n        nodes.push(...$getHighlightNodes([content], token.type));\n      } else if (Array.isArray(content)) {\n        nodes.push(...$getHighlightNodes(content, token.type));\n      }\n    }\n  }\n  return nodes;\n}\n\n// Wrapping update function into selection retainer, that tries to keep cursor at the same\n// position as before.\nfunction $updateAndRetainSelection(nodeKey, updateFn) {\n  const node = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getNodeByKey)(nodeKey);\n  if (!$isCodeNode(node) || !node.isAttached()) {\n    return;\n  }\n  const selection = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getSelection)();\n  // If it's not range selection (or null selection) there's no need to change it,\n  // but we can still run highlighting logic\n  if (!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isRangeSelection)(selection)) {\n    updateFn();\n    return;\n  }\n  const anchor = selection.anchor;\n  const anchorOffset = anchor.offset;\n  const isNewLineAnchor = anchor.type === 'element' && (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(node.getChildAtIndex(anchor.offset - 1));\n  let textOffset = 0;\n\n  // Calculating previous text offset (all text node prior to anchor + anchor own text offset)\n  if (!isNewLineAnchor) {\n    const anchorNode = anchor.getNode();\n    textOffset = anchorOffset + anchorNode.getPreviousSiblings().reduce((offset, _node) => {\n      return offset + _node.getTextContentSize();\n    }, 0);\n  }\n  const hasChanges = updateFn();\n  if (!hasChanges) {\n    return;\n  }\n\n  // Non-text anchors only happen for line breaks, otherwise\n  // selection will be within text node (code highlight node)\n  if (isNewLineAnchor) {\n    anchor.getNode().select(anchorOffset, anchorOffset);\n    return;\n  }\n\n  // If it was non-element anchor then we walk through child nodes\n  // and looking for a position of original text offset\n  node.getChildren().some(_node => {\n    const isText = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTextNode)(_node);\n    if (isText || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(_node)) {\n      const textContentSize = _node.getTextContentSize();\n      if (isText && textContentSize >= textOffset) {\n        _node.select(textOffset, textOffset);\n        return true;\n      }\n      textOffset -= textContentSize;\n    }\n    return false;\n  });\n}\n\n// Finds minimal diff range between two nodes lists. It returns from/to range boundaries of prevNodes\n// that needs to be replaced with `nodes` (subset of nextNodes) to make prevNodes equal to nextNodes.\nfunction getDiffRange(prevNodes, nextNodes) {\n  let leadingMatch = 0;\n  while (leadingMatch < prevNodes.length) {\n    if (!isEqual(prevNodes[leadingMatch], nextNodes[leadingMatch])) {\n      break;\n    }\n    leadingMatch++;\n  }\n  const prevNodesLength = prevNodes.length;\n  const nextNodesLength = nextNodes.length;\n  const maxTrailingMatch = Math.min(prevNodesLength, nextNodesLength) - leadingMatch;\n  let trailingMatch = 0;\n  while (trailingMatch < maxTrailingMatch) {\n    trailingMatch++;\n    if (!isEqual(prevNodes[prevNodesLength - trailingMatch], nextNodes[nextNodesLength - trailingMatch])) {\n      trailingMatch--;\n      break;\n    }\n  }\n  const from = leadingMatch;\n  const to = prevNodesLength - trailingMatch;\n  const nodesForReplacement = nextNodes.slice(leadingMatch, nextNodesLength - trailingMatch);\n  return {\n    from,\n    nodesForReplacement,\n    to\n  };\n}\nfunction isEqual(nodeA, nodeB) {\n  // Only checking for code higlight nodes, tabs and linebreaks. If it's regular text node\n  // returning false so that it's transformed into code highlight node\n  return $isCodeHighlightNode(nodeA) && $isCodeHighlightNode(nodeB) && nodeA.__text === nodeB.__text && nodeA.__highlightType === nodeB.__highlightType || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(nodeA) && (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(nodeB) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(nodeA) && (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(nodeB);\n}\nfunction $isSelectionInCode(selection) {\n  if (!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isRangeSelection)(selection)) {\n    return false;\n  }\n  const anchorNode = selection.anchor.getNode();\n  const focusNode = selection.focus.getNode();\n  if (anchorNode.is(focusNode) && $isCodeNode(anchorNode)) {\n    return true;\n  }\n  const anchorParent = anchorNode.getParent();\n  return $isCodeNode(anchorParent) && anchorParent.is(focusNode.getParent());\n}\nfunction $getCodeLines(selection) {\n  const nodes = selection.getNodes();\n  const lines = [[]];\n  if (nodes.length === 1 && $isCodeNode(nodes[0])) {\n    return lines;\n  }\n  let lastLine = lines[0];\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!($isCodeHighlightNode(node) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(node) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(node))) {\n      throw Error(`Expected selection to be inside CodeBlock and consisting of CodeHighlightNode, TabNode and LineBreakNode`);\n    }\n    if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(node)) {\n      if (i !== 0 && lastLine.length > 0) {\n        lastLine = [];\n        lines.push(lastLine);\n      }\n    } else {\n      lastLine.push(node);\n    }\n  }\n  return lines;\n}\nfunction $handleTab(shiftKey) {\n  const selection = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getSelection)();\n  if (!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isRangeSelection)(selection) || !$isSelectionInCode(selection)) {\n    return null;\n  }\n  const indentOrOutdent = !shiftKey ? _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.INDENT_CONTENT_COMMAND : _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.OUTDENT_CONTENT_COMMAND;\n  const tabOrOutdent = !shiftKey ? _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.INSERT_TAB_COMMAND : _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.OUTDENT_CONTENT_COMMAND;\n  // 1. If multiple lines selected: indent/outdent\n  const codeLines = $getCodeLines(selection);\n  if (codeLines.length > 1) {\n    return indentOrOutdent;\n  }\n  // 2. If entire line selected: indent/outdent\n  const selectionNodes = selection.getNodes();\n  const firstNode = selectionNodes[0];\n  if (!($isCodeNode(firstNode) || $isCodeHighlightNode(firstNode) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(firstNode) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(firstNode))) {\n    throw Error(`Expected selection firstNode to be CodeHighlightNode or TabNode`);\n  }\n  if ($isCodeNode(firstNode)) {\n    return indentOrOutdent;\n  }\n  const firstOfLine = getFirstCodeNodeOfLine(firstNode);\n  const lastOfLine = getLastCodeNodeOfLine(firstNode);\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  let selectionFirst;\n  let selectionLast;\n  if (focus.isBefore(anchor)) {\n    selectionFirst = focus;\n    selectionLast = anchor;\n  } else {\n    selectionFirst = anchor;\n    selectionLast = focus;\n  }\n  if (firstOfLine !== null && lastOfLine !== null && selectionFirst.key === firstOfLine.getKey() && selectionFirst.offset === 0 && selectionLast.key === lastOfLine.getKey() && selectionLast.offset === lastOfLine.getTextContentSize()) {\n    return indentOrOutdent;\n  }\n  // 3. Else: tab/outdent\n  return tabOrOutdent;\n}\nfunction $handleMultilineIndent(type) {\n  const selection = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getSelection)();\n  if (!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isRangeSelection)(selection) || !$isSelectionInCode(selection)) {\n    return false;\n  }\n  const codeLines = $getCodeLines(selection);\n  const codeLinesLength = codeLines.length;\n  // Multiple lines selection\n  if (codeLines.length > 1) {\n    for (let i = 0; i < codeLinesLength; i++) {\n      const line = codeLines[i];\n      if (line.length > 0) {\n        let firstOfLine = line[0];\n        // First and last lines might not be complete\n        if (i === 0) {\n          firstOfLine = getFirstCodeNodeOfLine(firstOfLine);\n        }\n        if (firstOfLine !== null) {\n          if (type === _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.INDENT_CONTENT_COMMAND) {\n            firstOfLine.insertBefore((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createTabNode)());\n          } else if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(firstOfLine)) {\n            firstOfLine.remove();\n          }\n        }\n      }\n    }\n    return true;\n  }\n  // Just one line\n  const selectionNodes = selection.getNodes();\n  const firstNode = selectionNodes[0];\n  if (!($isCodeNode(firstNode) || $isCodeHighlightNode(firstNode) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(firstNode) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(firstNode))) {\n    throw Error(`Expected selection firstNode to be CodeHighlightNode or CodeTabNode`);\n  }\n  if ($isCodeNode(firstNode)) {\n    // CodeNode is empty\n    if (type === _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.INDENT_CONTENT_COMMAND) {\n      selection.insertNodes([(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createTabNode)()]);\n    }\n    return true;\n  }\n  const firstOfLine = getFirstCodeNodeOfLine(firstNode);\n  if (!(firstOfLine !== null)) {\n    throw Error(`Expected getFirstCodeNodeOfLine to return a valid Code Node`);\n  }\n  if (type === _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.INDENT_CONTENT_COMMAND) {\n    if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(firstOfLine)) {\n      firstOfLine.insertAfter((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createTabNode)());\n    } else {\n      firstOfLine.insertBefore((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createTabNode)());\n    }\n  } else if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(firstOfLine)) {\n    firstOfLine.remove();\n  }\n  return true;\n}\nfunction $handleShiftLines(type, event) {\n  // We only care about the alt+arrow keys\n  const selection = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getSelection)();\n  if (!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isRangeSelection)(selection)) {\n    return false;\n  }\n\n  // I'm not quite sure why, but it seems like calling anchor.getNode() collapses the selection here\n  // So first, get the anchor and the focus, then get their nodes\n  const {\n    anchor,\n    focus\n  } = selection;\n  const anchorOffset = anchor.offset;\n  const focusOffset = focus.offset;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  const arrowIsUp = type === _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.KEY_ARROW_UP_COMMAND;\n\n  // Ensure the selection is within the codeblock\n  if (!$isSelectionInCode(selection) || !($isCodeHighlightNode(anchorNode) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(anchorNode)) || !($isCodeHighlightNode(focusNode) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(focusNode))) {\n    return false;\n  }\n  if (!event.altKey) {\n    // Handle moving selection out of the code block, given there are no\n    // sibling thats can natively take the selection.\n    if (selection.isCollapsed()) {\n      const codeNode = anchorNode.getParentOrThrow();\n      if (arrowIsUp && anchorOffset === 0 && anchorNode.getPreviousSibling() === null) {\n        const codeNodeSibling = codeNode.getPreviousSibling();\n        if (codeNodeSibling === null) {\n          codeNode.selectPrevious();\n          event.preventDefault();\n          return true;\n        }\n      } else if (!arrowIsUp && anchorOffset === anchorNode.getTextContentSize() && anchorNode.getNextSibling() === null) {\n        const codeNodeSibling = codeNode.getNextSibling();\n        if (codeNodeSibling === null) {\n          codeNode.selectNext();\n          event.preventDefault();\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  let start;\n  let end;\n  if (anchorNode.isBefore(focusNode)) {\n    start = getFirstCodeNodeOfLine(anchorNode);\n    end = getLastCodeNodeOfLine(focusNode);\n  } else {\n    start = getFirstCodeNodeOfLine(focusNode);\n    end = getLastCodeNodeOfLine(anchorNode);\n  }\n  if (start == null || end == null) {\n    return false;\n  }\n  const range = start.getNodesBetween(end);\n  for (let i = 0; i < range.length; i++) {\n    const node = range[i];\n    if (!$isCodeHighlightNode(node) && !(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(node) && !(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(node)) {\n      return false;\n    }\n  }\n\n  // After this point, we know the selection is within the codeblock. We may not be able to\n  // actually move the lines around, but we want to return true either way to prevent\n  // the event's default behavior\n  event.preventDefault();\n  event.stopPropagation(); // required to stop cursor movement under Firefox\n\n  const linebreak = arrowIsUp ? start.getPreviousSibling() : end.getNextSibling();\n  if (!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(linebreak)) {\n    return true;\n  }\n  const sibling = arrowIsUp ? linebreak.getPreviousSibling() : linebreak.getNextSibling();\n  if (sibling == null) {\n    return true;\n  }\n  const maybeInsertionPoint = $isCodeHighlightNode(sibling) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(sibling) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(sibling) ? arrowIsUp ? getFirstCodeNodeOfLine(sibling) : getLastCodeNodeOfLine(sibling) : null;\n  let insertionPoint = maybeInsertionPoint != null ? maybeInsertionPoint : sibling;\n  linebreak.remove();\n  range.forEach(node => node.remove());\n  if (type === _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.KEY_ARROW_UP_COMMAND) {\n    range.forEach(node => insertionPoint.insertBefore(node));\n    insertionPoint.insertBefore(linebreak);\n  } else {\n    insertionPoint.insertAfter(linebreak);\n    insertionPoint = linebreak;\n    range.forEach(node => {\n      insertionPoint.insertAfter(node);\n      insertionPoint = node;\n    });\n  }\n  selection.setTextNodeRange(anchorNode, anchorOffset, focusNode, focusOffset);\n  return true;\n}\nfunction $handleMoveTo(type, event) {\n  const selection = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getSelection)();\n  if (!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isRangeSelection)(selection)) {\n    return false;\n  }\n  const {\n    anchor,\n    focus\n  } = selection;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  const isMoveToStart = type === _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.MOVE_TO_START;\n  if (!($isCodeHighlightNode(anchorNode) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(anchorNode)) || !($isCodeHighlightNode(focusNode) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(focusNode))) {\n    return false;\n  }\n  if (isMoveToStart) {\n    const start = getStartOfCodeInLine(focusNode, focus.offset);\n    if (start !== null) {\n      const {\n        node,\n        offset\n      } = start;\n      if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(node)) {\n        node.selectNext(0, 0);\n      } else {\n        selection.setTextNodeRange(node, offset, node, offset);\n      }\n    } else {\n      focusNode.getParentOrThrow().selectStart();\n    }\n  } else {\n    const node = getEndOfCodeInLine(focusNode);\n    node.select();\n  }\n  event.preventDefault();\n  event.stopPropagation();\n  return true;\n}\nfunction registerCodeHighlighting(editor, tokenizer) {\n  if (!editor.hasNodes([CodeNode, CodeHighlightNode])) {\n    throw new Error('CodeHighlightPlugin: CodeNode or CodeHighlightNode not registered on editor');\n  }\n  if (tokenizer == null) {\n    tokenizer = PrismTokenizer;\n  }\n  return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_17__.mergeRegister)(editor.registerMutationListener(CodeNode, mutations => {\n    editor.update(() => {\n      for (const [key, type] of mutations) {\n        if (type !== 'destroyed') {\n          const node = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getNodeByKey)(key);\n          if (node !== null) {\n            updateCodeGutter(node, editor);\n          }\n        }\n      }\n    });\n  }), editor.registerNodeTransform(CodeNode, node => codeNodeTransform(node, editor, tokenizer)), editor.registerNodeTransform(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.TextNode, node => $textNodeTransform(node, editor, tokenizer)), editor.registerNodeTransform(CodeHighlightNode, node => $textNodeTransform(node, editor, tokenizer)), editor.registerCommand(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.KEY_TAB_COMMAND, event => {\n    const command = $handleTab(event.shiftKey);\n    if (command === null) {\n      return false;\n    }\n    event.preventDefault();\n    editor.dispatchCommand(command, undefined);\n    return true;\n  }, _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.COMMAND_PRIORITY_LOW), editor.registerCommand(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.INSERT_TAB_COMMAND, () => {\n    const selection = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getSelection)();\n    if (!$isSelectionInCode(selection)) {\n      return false;\n    }\n    (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$insertNodes)([(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createTabNode)()]);\n    return true;\n  }, _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.COMMAND_PRIORITY_LOW), editor.registerCommand(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.INDENT_CONTENT_COMMAND, payload => $handleMultilineIndent(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.INDENT_CONTENT_COMMAND), _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.COMMAND_PRIORITY_LOW), editor.registerCommand(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.OUTDENT_CONTENT_COMMAND, payload => $handleMultilineIndent(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.OUTDENT_CONTENT_COMMAND), _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.COMMAND_PRIORITY_LOW), editor.registerCommand(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.KEY_ARROW_UP_COMMAND, payload => $handleShiftLines(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.KEY_ARROW_UP_COMMAND, payload), _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.COMMAND_PRIORITY_LOW), editor.registerCommand(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.KEY_ARROW_DOWN_COMMAND, payload => $handleShiftLines(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.KEY_ARROW_DOWN_COMMAND, payload), _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.COMMAND_PRIORITY_LOW), editor.registerCommand(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.MOVE_TO_END, payload => $handleMoveTo(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.MOVE_TO_END, payload), _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.COMMAND_PRIORITY_LOW), editor.registerCommand(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.MOVE_TO_START, payload => $handleMoveTo(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.MOVE_TO_START, payload), _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.COMMAND_PRIORITY_LOW));\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/code/LexicalCode.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/dragon/LexicalDragon.dev.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@lexical/dragon/LexicalDragon.dev.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   registerDragonSupport: () => (/* binding */ registerDragonSupport)\n/* harmony export */ });\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction registerDragonSupport(editor) {\n  const origin = window.location.origin;\n  const handler = event => {\n    if (event.origin !== origin) {\n      return;\n    }\n    const rootElement = editor.getRootElement();\n    if (document.activeElement !== rootElement) {\n      return;\n    }\n    const data = event.data;\n    if (typeof data === 'string') {\n      let parsedData;\n      try {\n        parsedData = JSON.parse(data);\n      } catch (e) {\n        return;\n      }\n      if (parsedData && parsedData.protocol === 'nuanria_messaging' && parsedData.type === 'request') {\n        const payload = parsedData.payload;\n        if (payload && payload.functionId === 'makeChanges') {\n          const args = payload.args;\n          if (args) {\n            const [elementStart, elementLength, text, selStart, selLength, formatCommand] = args;\n            editor.update(() => {\n              const selection = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$getSelection)();\n              if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(selection)) {\n                const anchor = selection.anchor;\n                let anchorNode = anchor.getNode();\n                let setSelStart = 0;\n                let setSelEnd = 0;\n                if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(anchorNode)) {\n                  // set initial selection\n                  if (elementStart >= 0 && elementLength >= 0) {\n                    setSelStart = elementStart;\n                    setSelEnd = elementStart + elementLength;\n                    // If the offset is more than the end, make it the end\n                    selection.setTextNodeRange(anchorNode, setSelStart, anchorNode, setSelEnd);\n                  }\n                }\n                if (setSelStart !== setSelEnd || text !== '') {\n                  selection.insertRawText(text);\n                  anchorNode = anchor.getNode();\n                }\n                if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(anchorNode)) {\n                  // set final selection\n                  setSelStart = selStart;\n                  setSelEnd = selStart + selLength;\n                  const anchorNodeTextLength = anchorNode.getTextContentSize();\n                  // If the offset is more than the end, make it the end\n                  setSelStart = setSelStart > anchorNodeTextLength ? anchorNodeTextLength : setSelStart;\n                  setSelEnd = setSelEnd > anchorNodeTextLength ? anchorNodeTextLength : setSelEnd;\n                  selection.setTextNodeRange(anchorNode, setSelStart, anchorNode, setSelEnd);\n                }\n\n                // block the chrome extension from handling this event\n                event.stopImmediatePropagation();\n              }\n            });\n          }\n        }\n      }\n    }\n  };\n  window.addEventListener('message', handler, true);\n  return () => {\n    window.removeEventListener('message', handler, true);\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9kcmFnb24vTGV4aWNhbERyYWdvbi5kZXYubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXdFOztBQUV4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHNEQUFhO0FBQzdDLGtCQUFrQiwwREFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isb0RBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9EQUFXO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9kcmFnb24vTGV4aWNhbERyYWdvbi5kZXYubWpzP2RiNmUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5pbXBvcnQgeyAkZ2V0U2VsZWN0aW9uLCAkaXNSYW5nZVNlbGVjdGlvbiwgJGlzVGV4dE5vZGUgfSBmcm9tICdsZXhpY2FsJztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5mdW5jdGlvbiByZWdpc3RlckRyYWdvblN1cHBvcnQoZWRpdG9yKSB7XG4gIGNvbnN0IG9yaWdpbiA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW47XG4gIGNvbnN0IGhhbmRsZXIgPSBldmVudCA9PiB7XG4gICAgaWYgKGV2ZW50Lm9yaWdpbiAhPT0gb3JpZ2luKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJvb3RFbGVtZW50ID0gZWRpdG9yLmdldFJvb3RFbGVtZW50KCk7XG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IHJvb3RFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBldmVudC5kYXRhO1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBwYXJzZWREYXRhO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcGFyc2VkRGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJzZWREYXRhICYmIHBhcnNlZERhdGEucHJvdG9jb2wgPT09ICdudWFucmlhX21lc3NhZ2luZycgJiYgcGFyc2VkRGF0YS50eXBlID09PSAncmVxdWVzdCcpIHtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHBhcnNlZERhdGEucGF5bG9hZDtcbiAgICAgICAgaWYgKHBheWxvYWQgJiYgcGF5bG9hZC5mdW5jdGlvbklkID09PSAnbWFrZUNoYW5nZXMnKSB7XG4gICAgICAgICAgY29uc3QgYXJncyA9IHBheWxvYWQuYXJncztcbiAgICAgICAgICBpZiAoYXJncykge1xuICAgICAgICAgICAgY29uc3QgW2VsZW1lbnRTdGFydCwgZWxlbWVudExlbmd0aCwgdGV4dCwgc2VsU3RhcnQsIHNlbExlbmd0aCwgZm9ybWF0Q29tbWFuZF0gPSBhcmdzO1xuICAgICAgICAgICAgZWRpdG9yLnVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9ICRnZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgaWYgKCRpc1JhbmdlU2VsZWN0aW9uKHNlbGVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhbmNob3IgPSBzZWxlY3Rpb24uYW5jaG9yO1xuICAgICAgICAgICAgICAgIGxldCBhbmNob3JOb2RlID0gYW5jaG9yLmdldE5vZGUoKTtcbiAgICAgICAgICAgICAgICBsZXQgc2V0U2VsU3RhcnQgPSAwO1xuICAgICAgICAgICAgICAgIGxldCBzZXRTZWxFbmQgPSAwO1xuICAgICAgICAgICAgICAgIGlmICgkaXNUZXh0Tm9kZShhbmNob3JOb2RlKSkge1xuICAgICAgICAgICAgICAgICAgLy8gc2V0IGluaXRpYWwgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudFN0YXJ0ID49IDAgJiYgZWxlbWVudExlbmd0aCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFNlbFN0YXJ0ID0gZWxlbWVudFN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICBzZXRTZWxFbmQgPSBlbGVtZW50U3RhcnQgKyBlbGVtZW50TGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgb2Zmc2V0IGlzIG1vcmUgdGhhbiB0aGUgZW5kLCBtYWtlIGl0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLnNldFRleHROb2RlUmFuZ2UoYW5jaG9yTm9kZSwgc2V0U2VsU3RhcnQsIGFuY2hvck5vZGUsIHNldFNlbEVuZCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzZXRTZWxTdGFydCAhPT0gc2V0U2VsRW5kIHx8IHRleHQgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uaW5zZXJ0UmF3VGV4dCh0ZXh0KTtcbiAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBhbmNob3IuZ2V0Tm9kZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoJGlzVGV4dE5vZGUoYW5jaG9yTm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgIC8vIHNldCBmaW5hbCBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgIHNldFNlbFN0YXJ0ID0gc2VsU3RhcnQ7XG4gICAgICAgICAgICAgICAgICBzZXRTZWxFbmQgPSBzZWxTdGFydCArIHNlbExlbmd0aDtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGFuY2hvck5vZGVUZXh0TGVuZ3RoID0gYW5jaG9yTm9kZS5nZXRUZXh0Q29udGVudFNpemUoKTtcbiAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBvZmZzZXQgaXMgbW9yZSB0aGFuIHRoZSBlbmQsIG1ha2UgaXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgc2V0U2VsU3RhcnQgPSBzZXRTZWxTdGFydCA+IGFuY2hvck5vZGVUZXh0TGVuZ3RoID8gYW5jaG9yTm9kZVRleHRMZW5ndGggOiBzZXRTZWxTdGFydDtcbiAgICAgICAgICAgICAgICAgIHNldFNlbEVuZCA9IHNldFNlbEVuZCA+IGFuY2hvck5vZGVUZXh0TGVuZ3RoID8gYW5jaG9yTm9kZVRleHRMZW5ndGggOiBzZXRTZWxFbmQ7XG4gICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uc2V0VGV4dE5vZGVSYW5nZShhbmNob3JOb2RlLCBzZXRTZWxTdGFydCwgYW5jaG9yTm9kZSwgc2V0U2VsRW5kKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBibG9jayB0aGUgY2hyb21lIGV4dGVuc2lvbiBmcm9tIGhhbmRsaW5nIHRoaXMgZXZlbnRcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGhhbmRsZXIsIHRydWUpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgaGFuZGxlciwgdHJ1ZSk7XG4gIH07XG59XG5cbmV4cG9ydCB7IHJlZ2lzdGVyRHJhZ29uU3VwcG9ydCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/dragon/LexicalDragon.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/history/LexicalHistory.dev.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@lexical/history/LexicalHistory.dev.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEmptyHistoryState: () => (/* binding */ createEmptyHistoryState),\n/* harmony export */   registerHistory: () => (/* binding */ registerHistory)\n/* harmony export */ });\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst HISTORY_MERGE = 0;\nconst HISTORY_PUSH = 1;\nconst DISCARD_HISTORY_CANDIDATE = 2;\nconst OTHER = 0;\nconst COMPOSING_CHARACTER = 1;\nconst INSERT_CHARACTER_AFTER_SELECTION = 2;\nconst DELETE_CHARACTER_BEFORE_SELECTION = 3;\nconst DELETE_CHARACTER_AFTER_SELECTION = 4;\nfunction getDirtyNodes(editorState, dirtyLeaves, dirtyElements) {\n  const nodeMap = editorState._nodeMap;\n  const nodes = [];\n  for (const dirtyLeafKey of dirtyLeaves) {\n    const dirtyLeaf = nodeMap.get(dirtyLeafKey);\n    if (dirtyLeaf !== undefined) {\n      nodes.push(dirtyLeaf);\n    }\n  }\n  for (const [dirtyElementKey, intentionallyMarkedAsDirty] of dirtyElements) {\n    if (!intentionallyMarkedAsDirty) {\n      continue;\n    }\n    const dirtyElement = nodeMap.get(dirtyElementKey);\n    if (dirtyElement !== undefined && !(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRootNode)(dirtyElement)) {\n      nodes.push(dirtyElement);\n    }\n  }\n  return nodes;\n}\nfunction getChangeType(prevEditorState, nextEditorState, dirtyLeavesSet, dirtyElementsSet, isComposing) {\n  if (prevEditorState === null || dirtyLeavesSet.size === 0 && dirtyElementsSet.size === 0 && !isComposing) {\n    return OTHER;\n  }\n  const nextSelection = nextEditorState._selection;\n  const prevSelection = prevEditorState._selection;\n  if (isComposing) {\n    return COMPOSING_CHARACTER;\n  }\n  if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(nextSelection) || !(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(prevSelection) || !prevSelection.isCollapsed() || !nextSelection.isCollapsed()) {\n    return OTHER;\n  }\n  const dirtyNodes = getDirtyNodes(nextEditorState, dirtyLeavesSet, dirtyElementsSet);\n  if (dirtyNodes.length === 0) {\n    return OTHER;\n  }\n\n  // Catching the case when inserting new text node into an element (e.g. first char in paragraph/list),\n  // or after existing node.\n  if (dirtyNodes.length > 1) {\n    const nextNodeMap = nextEditorState._nodeMap;\n    const nextAnchorNode = nextNodeMap.get(nextSelection.anchor.key);\n    const prevAnchorNode = nextNodeMap.get(prevSelection.anchor.key);\n    if (nextAnchorNode && prevAnchorNode && !prevEditorState._nodeMap.has(nextAnchorNode.__key) && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextAnchorNode) && nextAnchorNode.__text.length === 1 && nextSelection.anchor.offset === 1) {\n      return INSERT_CHARACTER_AFTER_SELECTION;\n    }\n    return OTHER;\n  }\n  const nextDirtyNode = dirtyNodes[0];\n  const prevDirtyNode = prevEditorState._nodeMap.get(nextDirtyNode.__key);\n  if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevDirtyNode) || !(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextDirtyNode) || prevDirtyNode.__mode !== nextDirtyNode.__mode) {\n    return OTHER;\n  }\n  const prevText = prevDirtyNode.__text;\n  const nextText = nextDirtyNode.__text;\n  if (prevText === nextText) {\n    return OTHER;\n  }\n  const nextAnchor = nextSelection.anchor;\n  const prevAnchor = prevSelection.anchor;\n  if (nextAnchor.key !== prevAnchor.key || nextAnchor.type !== 'text') {\n    return OTHER;\n  }\n  const nextAnchorOffset = nextAnchor.offset;\n  const prevAnchorOffset = prevAnchor.offset;\n  const textDiff = nextText.length - prevText.length;\n  if (textDiff === 1 && prevAnchorOffset === nextAnchorOffset - 1) {\n    return INSERT_CHARACTER_AFTER_SELECTION;\n  }\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset + 1) {\n    return DELETE_CHARACTER_BEFORE_SELECTION;\n  }\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset) {\n    return DELETE_CHARACTER_AFTER_SELECTION;\n  }\n  return OTHER;\n}\nfunction isTextNodeUnchanged(key, prevEditorState, nextEditorState) {\n  const prevNode = prevEditorState._nodeMap.get(key);\n  const nextNode = nextEditorState._nodeMap.get(key);\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  let isDeletingLine = false;\n  if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(prevSelection) && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(nextSelection)) {\n    isDeletingLine = prevSelection.anchor.type === 'element' && prevSelection.focus.type === 'element' && nextSelection.anchor.type === 'text' && nextSelection.focus.type === 'text';\n  }\n  if (!isDeletingLine && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevNode) && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextNode)) {\n    return prevNode.__type === nextNode.__type && prevNode.__text === nextNode.__text && prevNode.__mode === nextNode.__mode && prevNode.__detail === nextNode.__detail && prevNode.__style === nextNode.__style && prevNode.__format === nextNode.__format && prevNode.__parent === nextNode.__parent;\n  }\n  return false;\n}\nfunction createMergeActionGetter(editor, delay) {\n  let prevChangeTime = Date.now();\n  let prevChangeType = OTHER;\n  return (prevEditorState, nextEditorState, currentHistoryEntry, dirtyLeaves, dirtyElements, tags) => {\n    const changeTime = Date.now();\n\n    // If applying changes from history stack there's no need\n    // to run history logic again, as history entries already calculated\n    if (tags.has('historic')) {\n      prevChangeType = OTHER;\n      prevChangeTime = changeTime;\n      return DISCARD_HISTORY_CANDIDATE;\n    }\n    const changeType = getChangeType(prevEditorState, nextEditorState, dirtyLeaves, dirtyElements, editor.isComposing());\n    const mergeAction = (() => {\n      const isSameEditor = currentHistoryEntry === null || currentHistoryEntry.editor === editor;\n      const shouldPushHistory = tags.has('history-push');\n      const shouldMergeHistory = !shouldPushHistory && isSameEditor && tags.has('history-merge');\n      if (shouldMergeHistory) {\n        return HISTORY_MERGE;\n      }\n      if (prevEditorState === null) {\n        return HISTORY_PUSH;\n      }\n      const selection = nextEditorState._selection;\n      const hasDirtyNodes = dirtyLeaves.size > 0 || dirtyElements.size > 0;\n      if (!hasDirtyNodes) {\n        if (selection !== null) {\n          return HISTORY_MERGE;\n        }\n        return DISCARD_HISTORY_CANDIDATE;\n      }\n      if (shouldPushHistory === false && changeType !== OTHER && changeType === prevChangeType && changeTime < prevChangeTime + delay && isSameEditor) {\n        return HISTORY_MERGE;\n      }\n\n      // A single node might have been marked as dirty, but not have changed\n      // due to some node transform reverting the change.\n      if (dirtyLeaves.size === 1) {\n        const dirtyLeafKey = Array.from(dirtyLeaves)[0];\n        if (isTextNodeUnchanged(dirtyLeafKey, prevEditorState, nextEditorState)) {\n          return HISTORY_MERGE;\n        }\n      }\n      return HISTORY_PUSH;\n    })();\n    prevChangeTime = changeTime;\n    prevChangeType = changeType;\n    return mergeAction;\n  };\n}\nfunction redo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n  if (redoStack.length !== 0) {\n    const current = historyState.current;\n    if (current !== null) {\n      undoStack.push(current);\n      editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_UNDO_COMMAND, true);\n    }\n    const historyStateEntry = redoStack.pop();\n    if (redoStack.length === 0) {\n      editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_REDO_COMMAND, false);\n    }\n    historyState.current = historyStateEntry || null;\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState, {\n        tag: 'historic'\n      });\n    }\n  }\n}\nfunction undo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n  const undoStackLength = undoStack.length;\n  if (undoStackLength !== 0) {\n    const current = historyState.current;\n    const historyStateEntry = undoStack.pop();\n    if (current !== null) {\n      redoStack.push(current);\n      editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_REDO_COMMAND, true);\n    }\n    if (undoStack.length === 0) {\n      editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_UNDO_COMMAND, false);\n    }\n    historyState.current = historyStateEntry || null;\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState, {\n        tag: 'historic'\n      });\n    }\n  }\n}\nfunction clearHistory(historyState) {\n  historyState.undoStack = [];\n  historyState.redoStack = [];\n  historyState.current = null;\n}\n\n/**\n * Registers necessary listeners to manage undo/redo history stack and related editor commands.\n * It returns `unregister` callback that cleans up all listeners and should be called on editor unmount.\n * @param editor - The lexical editor.\n * @param historyState - The history state, containing the current state and the undo/redo stack.\n * @param delay - The time (in milliseconds) the editor should delay generating a new history stack,\n * instead of merging the current changes with the current stack.\n * @returns The listeners cleanup callback function.\n */\nfunction registerHistory(editor, historyState, delay) {\n  const getMergeAction = createMergeActionGetter(editor, delay);\n  const applyChange = ({\n    editorState,\n    prevEditorState,\n    dirtyLeaves,\n    dirtyElements,\n    tags\n  }) => {\n    const current = historyState.current;\n    const redoStack = historyState.redoStack;\n    const undoStack = historyState.undoStack;\n    const currentEditorState = current === null ? null : current.editorState;\n    if (current !== null && editorState === currentEditorState) {\n      return;\n    }\n    const mergeAction = getMergeAction(prevEditorState, editorState, current, dirtyLeaves, dirtyElements, tags);\n    if (mergeAction === HISTORY_PUSH) {\n      if (redoStack.length !== 0) {\n        historyState.redoStack = [];\n        editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_REDO_COMMAND, false);\n      }\n      if (current !== null) {\n        undoStack.push({\n          ...current\n        });\n        editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_UNDO_COMMAND, true);\n      }\n    } else if (mergeAction === DISCARD_HISTORY_CANDIDATE) {\n      return;\n    }\n\n    // Else we merge\n    historyState.current = {\n      editor,\n      editorState\n    };\n  };\n  const unregister = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_1__.mergeRegister)(editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.UNDO_COMMAND, () => {\n    undo(editor, historyState);\n    return true;\n  }, lexical__WEBPACK_IMPORTED_MODULE_0__.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.REDO_COMMAND, () => {\n    redo(editor, historyState);\n    return true;\n  }, lexical__WEBPACK_IMPORTED_MODULE_0__.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CLEAR_EDITOR_COMMAND, () => {\n    clearHistory(historyState);\n    return false;\n  }, lexical__WEBPACK_IMPORTED_MODULE_0__.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CLEAR_HISTORY_COMMAND, () => {\n    clearHistory(historyState);\n    editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_REDO_COMMAND, false);\n    editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_UNDO_COMMAND, false);\n    return true;\n  }, lexical__WEBPACK_IMPORTED_MODULE_0__.COMMAND_PRIORITY_EDITOR), editor.registerUpdateListener(applyChange));\n  return unregister;\n}\n\n/**\n * Creates an empty history state.\n * @returns - The empty history state, as an object.\n */\nfunction createEmptyHistoryState() {\n  return {\n    current: null,\n    redoStack: [],\n    undoStack: []\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/history/LexicalHistory.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/markdown/LexicalMarkdown.dev.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@lexical/markdown/LexicalMarkdown.dev.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $convertFromMarkdownString: () => (/* binding */ $convertFromMarkdownString),\n/* harmony export */   $convertToMarkdownString: () => (/* binding */ $convertToMarkdownString),\n/* harmony export */   BOLD_ITALIC_STAR: () => (/* binding */ BOLD_ITALIC_STAR),\n/* harmony export */   BOLD_ITALIC_UNDERSCORE: () => (/* binding */ BOLD_ITALIC_UNDERSCORE),\n/* harmony export */   BOLD_STAR: () => (/* binding */ BOLD_STAR),\n/* harmony export */   BOLD_UNDERSCORE: () => (/* binding */ BOLD_UNDERSCORE),\n/* harmony export */   CHECK_LIST: () => (/* binding */ CHECK_LIST),\n/* harmony export */   CODE: () => (/* binding */ CODE),\n/* harmony export */   ELEMENT_TRANSFORMERS: () => (/* binding */ ELEMENT_TRANSFORMERS),\n/* harmony export */   HEADING: () => (/* binding */ HEADING),\n/* harmony export */   HIGHLIGHT: () => (/* binding */ HIGHLIGHT),\n/* harmony export */   INLINE_CODE: () => (/* binding */ INLINE_CODE),\n/* harmony export */   ITALIC_STAR: () => (/* binding */ ITALIC_STAR),\n/* harmony export */   ITALIC_UNDERSCORE: () => (/* binding */ ITALIC_UNDERSCORE),\n/* harmony export */   LINK: () => (/* binding */ LINK),\n/* harmony export */   ORDERED_LIST: () => (/* binding */ ORDERED_LIST),\n/* harmony export */   QUOTE: () => (/* binding */ QUOTE),\n/* harmony export */   STRIKETHROUGH: () => (/* binding */ STRIKETHROUGH),\n/* harmony export */   TEXT_FORMAT_TRANSFORMERS: () => (/* binding */ TEXT_FORMAT_TRANSFORMERS),\n/* harmony export */   TEXT_MATCH_TRANSFORMERS: () => (/* binding */ TEXT_MATCH_TRANSFORMERS),\n/* harmony export */   TRANSFORMERS: () => (/* binding */ TRANSFORMERS),\n/* harmony export */   UNORDERED_LIST: () => (/* binding */ UNORDERED_LIST),\n/* harmony export */   registerMarkdownShortcuts: () => (/* binding */ registerMarkdownShortcuts)\n/* harmony export */ });\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/* harmony import */ var _lexical_code__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lexical/code */ \"(app-pages-browser)/./node_modules/@lexical/code/LexicalCode.dev.mjs\");\n/* harmony import */ var _lexical_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lexical/list */ \"(app-pages-browser)/./node_modules/@lexical/list/LexicalList.dev.mjs\");\n/* harmony import */ var _lexical_rich_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lexical/rich-text */ \"(app-pages-browser)/./node_modules/@lexical/rich-text/LexicalRichText.dev.mjs\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/* harmony import */ var _lexical_link__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lexical/link */ \"(app-pages-browser)/./node_modules/@lexical/link/LexicalLink.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction indexBy(list, callback) {\n  const index = {};\n  for (const item of list) {\n    const key = callback(item);\n    if (index[key]) {\n      index[key].push(item);\n    } else {\n      index[key] = [item];\n    }\n  }\n  return index;\n}\nfunction transformersByType(transformers) {\n  const byType = indexBy(transformers, t => t.type);\n  return {\n    element: byType.element || [],\n    textFormat: byType['text-format'] || [],\n    textMatch: byType['text-match'] || []\n  };\n}\nconst PUNCTUATION_OR_SPACE = /[!-/:-@[-`{-~\\s]/;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction createMarkdownExport(transformers) {\n  const byType = transformersByType(transformers);\n\n  // Export only uses text formats that are responsible for single format\n  // e.g. it will filter out *** (bold, italic) and instead use separate ** and *\n  const textFormatTransformers = byType.textFormat.filter(transformer => transformer.format.length === 1);\n  return node => {\n    const output = [];\n    const children = (node || (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$getRoot)()).getChildren();\n    for (const child of children) {\n      const result = exportTopLevelElements(child, byType.element, textFormatTransformers, byType.textMatch);\n      if (result != null) {\n        output.push(result);\n      }\n    }\n    return output.join('\\n\\n');\n  };\n}\nfunction exportTopLevelElements(node, elementTransformers, textTransformersIndex, textMatchTransformers) {\n  for (const transformer of elementTransformers) {\n    const result = transformer.export(node, _node => exportChildren(_node, textTransformersIndex, textMatchTransformers));\n    if (result != null) {\n      return result;\n    }\n  }\n  if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isElementNode)(node)) {\n    return exportChildren(node, textTransformersIndex, textMatchTransformers);\n  } else if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isDecoratorNode)(node)) {\n    return node.getTextContent();\n  } else {\n    return null;\n  }\n}\nfunction exportChildren(node, textTransformersIndex, textMatchTransformers) {\n  const output = [];\n  const children = node.getChildren();\n  mainLoop: for (const child of children) {\n    for (const transformer of textMatchTransformers) {\n      const result = transformer.export(child, parentNode => exportChildren(parentNode, textTransformersIndex, textMatchTransformers), (textNode, textContent) => exportTextFormat(textNode, textContent, textTransformersIndex));\n      if (result != null) {\n        output.push(result);\n        continue mainLoop;\n      }\n    }\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isLineBreakNode)(child)) {\n      output.push('\\n');\n    } else if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(child)) {\n      output.push(exportTextFormat(child, child.getTextContent(), textTransformersIndex));\n    } else if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isElementNode)(child)) {\n      output.push(exportChildren(child, textTransformersIndex, textMatchTransformers));\n    } else if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isDecoratorNode)(child)) {\n      output.push(child.getTextContent());\n    }\n  }\n  return output.join('');\n}\nfunction exportTextFormat(node, textContent, textTransformers) {\n  // This function handles the case of a string looking like this: \"   foo   \"\n  // Where it would be invalid markdown to generate: \"**   foo   **\"\n  // We instead want to trim the whitespace out, apply formatting, and then\n  // bring the whitespace back. So our returned string looks like this: \"   **foo**   \"\n  const frozenString = textContent.trim();\n  let output = frozenString;\n  const applied = new Set();\n  for (const transformer of textTransformers) {\n    const format = transformer.format[0];\n    const tag = transformer.tag;\n    if (hasFormat(node, format) && !applied.has(format)) {\n      // Multiple tags might be used for the same format (*, _)\n      applied.add(format);\n      // Prevent adding opening tag is already opened by the previous sibling\n      const previousNode = getTextSibling(node, true);\n      if (!hasFormat(previousNode, format)) {\n        output = tag + output;\n      }\n\n      // Prevent adding closing tag if next sibling will do it\n      const nextNode = getTextSibling(node, false);\n      if (!hasFormat(nextNode, format)) {\n        output += tag;\n      }\n    }\n  }\n\n  // Replace trimmed version of textContent ensuring surrounding whitespace is not modified\n  return textContent.replace(frozenString, () => output);\n}\n\n// Get next or previous text sibling a text node, including cases\n// when it's a child of inline element (e.g. link)\nfunction getTextSibling(node, backward) {\n  let sibling = backward ? node.getPreviousSibling() : node.getNextSibling();\n  if (!sibling) {\n    const parent = node.getParentOrThrow();\n    if (parent.isInline()) {\n      sibling = backward ? parent.getPreviousSibling() : parent.getNextSibling();\n    }\n  }\n  while (sibling) {\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isElementNode)(sibling)) {\n      if (!sibling.isInline()) {\n        break;\n      }\n      const descendant = backward ? sibling.getLastDescendant() : sibling.getFirstDescendant();\n      if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(descendant)) {\n        return descendant;\n      } else {\n        sibling = backward ? sibling.getPreviousSibling() : sibling.getNextSibling();\n      }\n    }\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(sibling)) {\n      return sibling;\n    }\n    if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isElementNode)(sibling)) {\n      return null;\n    }\n  }\n  return null;\n}\nfunction hasFormat(node, format) {\n  return (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(node) && node.hasFormat(format);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nCAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n// Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent);\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst MARKDOWN_EMPTY_LINE_REG_EXP = /^\\s{0,3}$/;\nconst CODE_BLOCK_REG_EXP = /^[ \\t]*```(\\w{1,10})?\\s?$/;\nfunction createMarkdownImport(transformers) {\n  const byType = transformersByType(transformers);\n  const textFormatTransformersIndex = createTextFormatTransformersIndex(byType.textFormat);\n  return (markdownString, node) => {\n    const lines = markdownString.split('\\n');\n    const linesLength = lines.length;\n    const root = node || (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$getRoot)();\n    root.clear();\n    for (let i = 0; i < linesLength; i++) {\n      const lineText = lines[i];\n      // Codeblocks are processed first as anything inside such block\n      // is ignored for further processing\n      // TODO:\n      // Abstract it to be dynamic as other transformers (add multiline match option)\n      const [codeBlockNode, shiftedIndex] = $importCodeBlock(lines, i, root);\n      if (codeBlockNode != null) {\n        i = shiftedIndex;\n        continue;\n      }\n      $importBlocks(lineText, root, byType.element, textFormatTransformersIndex, byType.textMatch);\n    }\n\n    // Removing empty paragraphs as md does not really\n    // allow empty lines and uses them as delimiter\n    const children = root.getChildren();\n    for (const child of children) {\n      if (isEmptyParagraph(child) && root.getChildrenSize() > 1) {\n        child.remove();\n      }\n    }\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$getSelection)() !== null) {\n      root.selectEnd();\n    }\n  };\n}\nfunction isEmptyParagraph(node) {\n  if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isParagraphNode)(node)) {\n    return false;\n  }\n  const firstChild = node.getFirstChild();\n  return firstChild == null || node.getChildrenSize() === 1 && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(firstChild) && MARKDOWN_EMPTY_LINE_REG_EXP.test(firstChild.getTextContent());\n}\nfunction $importBlocks(lineText, rootNode, elementTransformers, textFormatTransformersIndex, textMatchTransformers) {\n  const lineTextTrimmed = lineText.trim();\n  const textNode = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$createTextNode)(lineTextTrimmed);\n  const elementNode = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$createParagraphNode)();\n  elementNode.append(textNode);\n  rootNode.append(elementNode);\n  for (const {\n    regExp,\n    replace\n  } of elementTransformers) {\n    const match = lineText.match(regExp);\n    if (match) {\n      textNode.setTextContent(lineText.slice(match[0].length));\n      replace(elementNode, [textNode], match, true);\n      break;\n    }\n  }\n  importTextFormatTransformers(textNode, textFormatTransformersIndex, textMatchTransformers);\n\n  // If no transformer found and we left with original paragraph node\n  // can check if its content can be appended to the previous node\n  // if it's a paragraph, quote or list\n  if (elementNode.isAttached() && lineTextTrimmed.length > 0) {\n    const previousNode = elementNode.getPreviousSibling();\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isParagraphNode)(previousNode) || (0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_1__.$isQuoteNode)(previousNode) || (0,_lexical_list__WEBPACK_IMPORTED_MODULE_2__.$isListNode)(previousNode)) {\n      let targetNode = previousNode;\n      if ((0,_lexical_list__WEBPACK_IMPORTED_MODULE_2__.$isListNode)(previousNode)) {\n        const lastDescendant = previousNode.getLastDescendant();\n        if (lastDescendant == null) {\n          targetNode = null;\n        } else {\n          targetNode = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_3__.$findMatchingParent)(lastDescendant, _lexical_list__WEBPACK_IMPORTED_MODULE_2__.$isListItemNode);\n        }\n      }\n      if (targetNode != null && targetNode.getTextContentSize() > 0) {\n        targetNode.splice(targetNode.getChildrenSize(), 0, [(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$createLineBreakNode)(), ...elementNode.getChildren()]);\n        elementNode.remove();\n      }\n    }\n  }\n}\nfunction $importCodeBlock(lines, startLineIndex, rootNode) {\n  const openMatch = lines[startLineIndex].match(CODE_BLOCK_REG_EXP);\n  if (openMatch) {\n    let endLineIndex = startLineIndex;\n    const linesLength = lines.length;\n    while (++endLineIndex < linesLength) {\n      const closeMatch = lines[endLineIndex].match(CODE_BLOCK_REG_EXP);\n      if (closeMatch) {\n        const codeBlockNode = (0,_lexical_code__WEBPACK_IMPORTED_MODULE_4__.$createCodeNode)(openMatch[1]);\n        const textNode = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$createTextNode)(lines.slice(startLineIndex + 1, endLineIndex).join('\\n'));\n        codeBlockNode.append(textNode);\n        rootNode.append(codeBlockNode);\n        return [codeBlockNode, endLineIndex];\n      }\n    }\n  }\n  return [null, startLineIndex];\n}\n\n// Processing text content and replaces text format tags.\n// It takes outermost tag match and its content, creates text node with\n// format based on tag and then recursively executed over node's content\n//\n// E.g. for \"*Hello **world**!*\" string it will create text node with\n// \"Hello **world**!\" content and italic format and run recursively over\n// its content to transform \"**world**\" part\nfunction importTextFormatTransformers(textNode, textFormatTransformersIndex, textMatchTransformers) {\n  const textContent = textNode.getTextContent();\n  const match = findOutermostMatch(textContent, textFormatTransformersIndex);\n  if (!match) {\n    // Once text format processing is done run text match transformers, as it\n    // only can span within single text node (unline formats that can cover multiple nodes)\n    importTextMatchTransformers(textNode, textMatchTransformers);\n    return;\n  }\n  let currentNode, remainderNode, leadingNode;\n\n  // If matching full content there's no need to run splitText and can reuse existing textNode\n  // to update its content and apply format. E.g. for **_Hello_** string after applying bold\n  // format (**) it will reuse the same text node to apply italic (_)\n  if (match[0] === textContent) {\n    currentNode = textNode;\n  } else {\n    const startIndex = match.index || 0;\n    const endIndex = startIndex + match[0].length;\n    if (startIndex === 0) {\n      [currentNode, remainderNode] = textNode.splitText(endIndex);\n    } else {\n      [leadingNode, currentNode, remainderNode] = textNode.splitText(startIndex, endIndex);\n    }\n  }\n  currentNode.setTextContent(match[2]);\n  const transformer = textFormatTransformersIndex.transformersByTag[match[1]];\n  if (transformer) {\n    for (const format of transformer.format) {\n      if (!currentNode.hasFormat(format)) {\n        currentNode.toggleFormat(format);\n      }\n    }\n  }\n\n  // Recursively run over inner text if it's not inline code\n  if (!currentNode.hasFormat('code')) {\n    importTextFormatTransformers(currentNode, textFormatTransformersIndex, textMatchTransformers);\n  }\n\n  // Run over leading/remaining text if any\n  if (leadingNode) {\n    importTextFormatTransformers(leadingNode, textFormatTransformersIndex, textMatchTransformers);\n  }\n  if (remainderNode) {\n    importTextFormatTransformers(remainderNode, textFormatTransformersIndex, textMatchTransformers);\n  }\n}\nfunction importTextMatchTransformers(textNode_, textMatchTransformers) {\n  let textNode = textNode_;\n  mainLoop: while (textNode) {\n    for (const transformer of textMatchTransformers) {\n      const match = textNode.getTextContent().match(transformer.importRegExp);\n      if (!match) {\n        continue;\n      }\n      const startIndex = match.index || 0;\n      const endIndex = startIndex + match[0].length;\n      let replaceNode, newTextNode;\n      if (startIndex === 0) {\n        [replaceNode, textNode] = textNode.splitText(endIndex);\n      } else {\n        [, replaceNode, newTextNode] = textNode.splitText(startIndex, endIndex);\n      }\n      if (newTextNode) {\n        importTextMatchTransformers(newTextNode, textMatchTransformers);\n      }\n      transformer.replace(replaceNode, match);\n      continue mainLoop;\n    }\n    break;\n  }\n}\n\n// Finds first \"<tag>content<tag>\" match that is not nested into another tag\nfunction findOutermostMatch(textContent, textTransformersIndex) {\n  const openTagsMatch = textContent.match(textTransformersIndex.openTagsRegExp);\n  if (openTagsMatch == null) {\n    return null;\n  }\n  for (const match of openTagsMatch) {\n    // Open tags reg exp might capture leading space so removing it\n    // before using match to find transformer\n    const tag = match.replace(/^\\s/, '');\n    const fullMatchRegExp = textTransformersIndex.fullMatchRegExpByTag[tag];\n    if (fullMatchRegExp == null) {\n      continue;\n    }\n    const fullMatch = textContent.match(fullMatchRegExp);\n    const transformer = textTransformersIndex.transformersByTag[tag];\n    if (fullMatch != null && transformer != null) {\n      if (transformer.intraword !== false) {\n        return fullMatch;\n      }\n\n      // For non-intraword transformers checking if it's within a word\n      // or surrounded with space/punctuation/newline\n      const {\n        index = 0\n      } = fullMatch;\n      const beforeChar = textContent[index - 1];\n      const afterChar = textContent[index + fullMatch[0].length];\n      if ((!beforeChar || PUNCTUATION_OR_SPACE.test(beforeChar)) && (!afterChar || PUNCTUATION_OR_SPACE.test(afterChar))) {\n        return fullMatch;\n      }\n    }\n  }\n  return null;\n}\nfunction createTextFormatTransformersIndex(textTransformers) {\n  const transformersByTag = {};\n  const fullMatchRegExpByTag = {};\n  const openTagsRegExp = [];\n  const escapeRegExp = `(?<![\\\\\\\\])`;\n  for (const transformer of textTransformers) {\n    const {\n      tag\n    } = transformer;\n    transformersByTag[tag] = transformer;\n    const tagRegExp = tag.replace(/(\\*|\\^|\\+)/g, '\\\\$1');\n    openTagsRegExp.push(tagRegExp);\n    if (IS_SAFARI || IS_IOS || IS_APPLE_WEBKIT) {\n      fullMatchRegExpByTag[tag] = new RegExp(`(${tagRegExp})(?![${tagRegExp}\\\\s])(.*?[^${tagRegExp}\\\\s])${tagRegExp}(?!${tagRegExp})`);\n    } else {\n      fullMatchRegExpByTag[tag] = new RegExp(`(?<![\\\\\\\\${tagRegExp}])(${tagRegExp})((\\\\\\\\${tagRegExp})?.*?[^${tagRegExp}\\\\s](\\\\\\\\${tagRegExp})?)((?<!\\\\\\\\)|(?<=\\\\\\\\\\\\\\\\))(${tagRegExp})(?![\\\\\\\\${tagRegExp}])`);\n    }\n  }\n  return {\n    // Reg exp to find open tag + content + close tag\n    fullMatchRegExpByTag,\n    // Reg exp to find opening tags\n    openTagsRegExp: new RegExp((IS_SAFARI || IS_IOS || IS_APPLE_WEBKIT ? '' : `${escapeRegExp}`) + '(' + openTagsRegExp.join('|') + ')', 'g'),\n    transformersByTag\n  };\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction runElementTransformers(parentNode, anchorNode, anchorOffset, elementTransformers) {\n  const grandParentNode = parentNode.getParent();\n  if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRootOrShadowRoot)(grandParentNode) || parentNode.getFirstChild() !== anchorNode) {\n    return false;\n  }\n  const textContent = anchorNode.getTextContent();\n\n  // Checking for anchorOffset position to prevent any checks for cases when caret is too far\n  // from a line start to be a part of block-level markdown trigger.\n  //\n  // TODO:\n  // Can have a quick check if caret is close enough to the beginning of the string (e.g. offset less than 10-20)\n  // since otherwise it won't be a markdown shortcut, but tables are exception\n  if (textContent[anchorOffset - 1] !== ' ') {\n    return false;\n  }\n  for (const {\n    regExp,\n    replace\n  } of elementTransformers) {\n    const match = textContent.match(regExp);\n    if (match && match[0].length === anchorOffset) {\n      const nextSiblings = anchorNode.getNextSiblings();\n      const [leadingNode, remainderNode] = anchorNode.splitText(anchorOffset);\n      leadingNode.remove();\n      const siblings = remainderNode ? [remainderNode, ...nextSiblings] : nextSiblings;\n      replace(parentNode, siblings, match, false);\n      return true;\n    }\n  }\n  return false;\n}\nfunction runTextMatchTransformers(anchorNode, anchorOffset, transformersByTrigger) {\n  let textContent = anchorNode.getTextContent();\n  const lastChar = textContent[anchorOffset - 1];\n  const transformers = transformersByTrigger[lastChar];\n  if (transformers == null) {\n    return false;\n  }\n\n  // If typing in the middle of content, remove the tail to do\n  // reg exp match up to a string end (caret position)\n  if (anchorOffset < textContent.length) {\n    textContent = textContent.slice(0, anchorOffset);\n  }\n  for (const transformer of transformers) {\n    const match = textContent.match(transformer.regExp);\n    if (match === null) {\n      continue;\n    }\n    const startIndex = match.index || 0;\n    const endIndex = startIndex + match[0].length;\n    let replaceNode;\n    if (startIndex === 0) {\n      [replaceNode] = anchorNode.splitText(endIndex);\n    } else {\n      [, replaceNode] = anchorNode.splitText(startIndex, endIndex);\n    }\n    replaceNode.selectNext(0, 0);\n    transformer.replace(replaceNode, match);\n    return true;\n  }\n  return false;\n}\nfunction $runTextFormatTransformers(anchorNode, anchorOffset, textFormatTransformers) {\n  const textContent = anchorNode.getTextContent();\n  const closeTagEndIndex = anchorOffset - 1;\n  const closeChar = textContent[closeTagEndIndex];\n  // Quick check if we're possibly at the end of inline markdown style\n  const matchers = textFormatTransformers[closeChar];\n  if (!matchers) {\n    return false;\n  }\n  for (const matcher of matchers) {\n    const {\n      tag\n    } = matcher;\n    const tagLength = tag.length;\n    const closeTagStartIndex = closeTagEndIndex - tagLength + 1;\n\n    // If tag is not single char check if rest of it matches with text content\n    if (tagLength > 1) {\n      if (!isEqualSubString(textContent, closeTagStartIndex, tag, 0, tagLength)) {\n        continue;\n      }\n    }\n\n    // Space before closing tag cancels inline markdown\n    if (textContent[closeTagStartIndex - 1] === ' ') {\n      continue;\n    }\n\n    // Some tags can not be used within words, hence should have newline/space/punctuation after it\n    const afterCloseTagChar = textContent[closeTagEndIndex + 1];\n    if (matcher.intraword === false && afterCloseTagChar && !PUNCTUATION_OR_SPACE.test(afterCloseTagChar)) {\n      continue;\n    }\n    const closeNode = anchorNode;\n    let openNode = closeNode;\n    let openTagStartIndex = getOpenTagStartIndex(textContent, closeTagStartIndex, tag);\n\n    // Go through text node siblings and search for opening tag\n    // if haven't found it within the same text node as closing tag\n    let sibling = openNode;\n    while (openTagStartIndex < 0 && (sibling = sibling.getPreviousSibling())) {\n      if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isLineBreakNode)(sibling)) {\n        break;\n      }\n      if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(sibling)) {\n        const siblingTextContent = sibling.getTextContent();\n        openNode = sibling;\n        openTagStartIndex = getOpenTagStartIndex(siblingTextContent, siblingTextContent.length, tag);\n      }\n    }\n\n    // Opening tag is not found\n    if (openTagStartIndex < 0) {\n      continue;\n    }\n\n    // No content between opening and closing tag\n    if (openNode === closeNode && openTagStartIndex + tagLength === closeTagStartIndex) {\n      continue;\n    }\n\n    // Checking longer tags for repeating chars (e.g. *** vs **)\n    const prevOpenNodeText = openNode.getTextContent();\n    if (openTagStartIndex > 0 && prevOpenNodeText[openTagStartIndex - 1] === closeChar) {\n      continue;\n    }\n\n    // Some tags can not be used within words, hence should have newline/space/punctuation before it\n    const beforeOpenTagChar = prevOpenNodeText[openTagStartIndex - 1];\n    if (matcher.intraword === false && beforeOpenTagChar && !PUNCTUATION_OR_SPACE.test(beforeOpenTagChar)) {\n      continue;\n    }\n\n    // Clean text from opening and closing tags (starting from closing tag\n    // to prevent any offset shifts if we start from opening one)\n    const prevCloseNodeText = closeNode.getTextContent();\n    const closeNodeText = prevCloseNodeText.slice(0, closeTagStartIndex) + prevCloseNodeText.slice(closeTagEndIndex + 1);\n    closeNode.setTextContent(closeNodeText);\n    const openNodeText = openNode === closeNode ? closeNodeText : prevOpenNodeText;\n    openNode.setTextContent(openNodeText.slice(0, openTagStartIndex) + openNodeText.slice(openTagStartIndex + tagLength));\n    const selection = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$getSelection)();\n    const nextSelection = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$createRangeSelection)();\n    (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$setSelection)(nextSelection);\n    // Adjust offset based on deleted chars\n    const newOffset = closeTagEndIndex - tagLength * (openNode === closeNode ? 2 : 1) + 1;\n    nextSelection.anchor.set(openNode.__key, openTagStartIndex, 'text');\n    nextSelection.focus.set(closeNode.__key, newOffset, 'text');\n\n    // Apply formatting to selected text\n    for (const format of matcher.format) {\n      if (!nextSelection.hasFormat(format)) {\n        nextSelection.formatText(format);\n      }\n    }\n\n    // Collapse selection up to the focus point\n    nextSelection.anchor.set(nextSelection.focus.key, nextSelection.focus.offset, nextSelection.focus.type);\n\n    // Remove formatting from collapsed selection\n    for (const format of matcher.format) {\n      if (nextSelection.hasFormat(format)) {\n        nextSelection.toggleFormat(format);\n      }\n    }\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(selection)) {\n      nextSelection.format = selection.format;\n    }\n    return true;\n  }\n  return false;\n}\nfunction getOpenTagStartIndex(string, maxIndex, tag) {\n  const tagLength = tag.length;\n  for (let i = maxIndex; i >= tagLength; i--) {\n    const startIndex = i - tagLength;\n    if (isEqualSubString(string, startIndex, tag, 0, tagLength) &&\n    // Space after opening tag cancels transformation\n    string[startIndex + tagLength] !== ' ') {\n      return startIndex;\n    }\n  }\n  return -1;\n}\nfunction isEqualSubString(stringA, aStart, stringB, bStart, length) {\n  for (let i = 0; i < length; i++) {\n    if (stringA[aStart + i] !== stringB[bStart + i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction registerMarkdownShortcuts(editor, transformers = TRANSFORMERS) {\n  const byType = transformersByType(transformers);\n  const textFormatTransformersIndex = indexBy(byType.textFormat, ({\n    tag\n  }) => tag[tag.length - 1]);\n  const textMatchTransformersIndex = indexBy(byType.textMatch, ({\n    trigger\n  }) => trigger);\n  for (const transformer of transformers) {\n    const type = transformer.type;\n    if (type === 'element' || type === 'text-match') {\n      const dependencies = transformer.dependencies;\n      for (const node of dependencies) {\n        if (!editor.hasNode(node)) {\n          {\n            throw Error(`MarkdownShortcuts: missing dependency ${node.getType()} for transformer. Ensure node dependency is included in editor initial config.`);\n          }\n        }\n      }\n    }\n  }\n  const $transform = (parentNode, anchorNode, anchorOffset) => {\n    if (runElementTransformers(parentNode, anchorNode, anchorOffset, byType.element)) {\n      return;\n    }\n    if (runTextMatchTransformers(anchorNode, anchorOffset, textMatchTransformersIndex)) {\n      return;\n    }\n    $runTextFormatTransformers(anchorNode, anchorOffset, textFormatTransformersIndex);\n  };\n  return editor.registerUpdateListener(({\n    tags,\n    dirtyLeaves,\n    editorState,\n    prevEditorState\n  }) => {\n    // Ignore updates from collaboration and undo/redo (as changes already calculated)\n    if (tags.has('collaboration') || tags.has('historic')) {\n      return;\n    }\n\n    // If editor is still composing (i.e. backticks) we must wait before the user confirms the key\n    if (editor.isComposing()) {\n      return;\n    }\n    const selection = editorState.read(lexical__WEBPACK_IMPORTED_MODULE_0__.$getSelection);\n    const prevSelection = prevEditorState.read(lexical__WEBPACK_IMPORTED_MODULE_0__.$getSelection);\n    if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(prevSelection) || !(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(selection) || !selection.isCollapsed()) {\n      return;\n    }\n    const anchorKey = selection.anchor.key;\n    const anchorOffset = selection.anchor.offset;\n    const anchorNode = editorState._nodeMap.get(anchorKey);\n    if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(anchorNode) || !dirtyLeaves.has(anchorKey) || anchorOffset !== 1 && anchorOffset > prevSelection.anchor.offset + 1) {\n      return;\n    }\n    editor.update(() => {\n      // Markdown is not available inside code\n      if (anchorNode.hasFormat('code')) {\n        return;\n      }\n      const parentNode = anchorNode.getParent();\n      if (parentNode === null || (0,_lexical_code__WEBPACK_IMPORTED_MODULE_4__.$isCodeNode)(parentNode)) {\n        return;\n      }\n      $transform(parentNode, anchorNode, selection.anchor.offset);\n    });\n  });\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst createBlockNode = createNode => {\n  return (parentNode, children, match) => {\n    const node = createNode(match);\n    node.append(...children);\n    parentNode.replace(node);\n    node.select(0, 0);\n  };\n};\n\n// Amount of spaces that define indentation level\n// TODO: should be an option\nconst LIST_INDENT_SIZE = 4;\nfunction getIndent(whitespaces) {\n  const tabs = whitespaces.match(/\\t/g);\n  const spaces = whitespaces.match(/ /g);\n  let indent = 0;\n  if (tabs) {\n    indent += tabs.length;\n  }\n  if (spaces) {\n    indent += Math.floor(spaces.length / LIST_INDENT_SIZE);\n  }\n  return indent;\n}\nconst listReplace = listType => {\n  return (parentNode, children, match) => {\n    const previousNode = parentNode.getPreviousSibling();\n    const nextNode = parentNode.getNextSibling();\n    const listItem = (0,_lexical_list__WEBPACK_IMPORTED_MODULE_2__.$createListItemNode)(listType === 'check' ? match[3] === 'x' : undefined);\n    if ((0,_lexical_list__WEBPACK_IMPORTED_MODULE_2__.$isListNode)(nextNode) && nextNode.getListType() === listType) {\n      const firstChild = nextNode.getFirstChild();\n      if (firstChild !== null) {\n        firstChild.insertBefore(listItem);\n      } else {\n        // should never happen, but let's handle gracefully, just in case.\n        nextNode.append(listItem);\n      }\n      parentNode.remove();\n    } else if ((0,_lexical_list__WEBPACK_IMPORTED_MODULE_2__.$isListNode)(previousNode) && previousNode.getListType() === listType) {\n      previousNode.append(listItem);\n      parentNode.remove();\n    } else {\n      const list = (0,_lexical_list__WEBPACK_IMPORTED_MODULE_2__.$createListNode)(listType, listType === 'number' ? Number(match[2]) : undefined);\n      list.append(listItem);\n      parentNode.replace(list);\n    }\n    listItem.append(...children);\n    listItem.select(0, 0);\n    const indent = getIndent(match[1]);\n    if (indent) {\n      listItem.setIndent(indent);\n    }\n  };\n};\nconst listExport = (listNode, exportChildren, depth) => {\n  const output = [];\n  const children = listNode.getChildren();\n  let index = 0;\n  for (const listItemNode of children) {\n    if ((0,_lexical_list__WEBPACK_IMPORTED_MODULE_2__.$isListItemNode)(listItemNode)) {\n      if (listItemNode.getChildrenSize() === 1) {\n        const firstChild = listItemNode.getFirstChild();\n        if ((0,_lexical_list__WEBPACK_IMPORTED_MODULE_2__.$isListNode)(firstChild)) {\n          output.push(listExport(firstChild, exportChildren, depth + 1));\n          continue;\n        }\n      }\n      const indent = ' '.repeat(depth * LIST_INDENT_SIZE);\n      const listType = listNode.getListType();\n      const prefix = listType === 'number' ? `${listNode.getStart() + index}. ` : listType === 'check' ? `- [${listItemNode.getChecked() ? 'x' : ' '}] ` : '- ';\n      output.push(indent + prefix + exportChildren(listItemNode));\n      index++;\n    }\n  }\n  return output.join('\\n');\n};\nconst HEADING = {\n  dependencies: [_lexical_rich_text__WEBPACK_IMPORTED_MODULE_1__.HeadingNode],\n  export: (node, exportChildren) => {\n    if (!(0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_1__.$isHeadingNode)(node)) {\n      return null;\n    }\n    const level = Number(node.getTag().slice(1));\n    return '#'.repeat(level) + ' ' + exportChildren(node);\n  },\n  regExp: /^(#{1,6})\\s/,\n  replace: createBlockNode(match => {\n    const tag = 'h' + match[1].length;\n    return (0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_1__.$createHeadingNode)(tag);\n  }),\n  type: 'element'\n};\nconst QUOTE = {\n  dependencies: [_lexical_rich_text__WEBPACK_IMPORTED_MODULE_1__.QuoteNode],\n  export: (node, exportChildren) => {\n    if (!(0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_1__.$isQuoteNode)(node)) {\n      return null;\n    }\n    const lines = exportChildren(node).split('\\n');\n    const output = [];\n    for (const line of lines) {\n      output.push('> ' + line);\n    }\n    return output.join('\\n');\n  },\n  regExp: /^>\\s/,\n  replace: (parentNode, children, _match, isImport) => {\n    if (isImport) {\n      const previousNode = parentNode.getPreviousSibling();\n      if ((0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_1__.$isQuoteNode)(previousNode)) {\n        previousNode.splice(previousNode.getChildrenSize(), 0, [(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$createLineBreakNode)(), ...children]);\n        previousNode.select(0, 0);\n        parentNode.remove();\n        return;\n      }\n    }\n    const node = (0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_1__.$createQuoteNode)();\n    node.append(...children);\n    parentNode.replace(node);\n    node.select(0, 0);\n  },\n  type: 'element'\n};\nconst CODE = {\n  dependencies: [_lexical_code__WEBPACK_IMPORTED_MODULE_4__.CodeNode],\n  export: node => {\n    if (!(0,_lexical_code__WEBPACK_IMPORTED_MODULE_4__.$isCodeNode)(node)) {\n      return null;\n    }\n    const textContent = node.getTextContent();\n    return '```' + (node.getLanguage() || '') + (textContent ? '\\n' + textContent : '') + '\\n' + '```';\n  },\n  regExp: /^[ \\t]*```(\\w{1,10})?\\s/,\n  replace: createBlockNode(match => {\n    return (0,_lexical_code__WEBPACK_IMPORTED_MODULE_4__.$createCodeNode)(match ? match[1] : undefined);\n  }),\n  type: 'element'\n};\nconst UNORDERED_LIST = {\n  dependencies: [_lexical_list__WEBPACK_IMPORTED_MODULE_2__.ListNode, _lexical_list__WEBPACK_IMPORTED_MODULE_2__.ListItemNode],\n  export: (node, exportChildren) => {\n    return (0,_lexical_list__WEBPACK_IMPORTED_MODULE_2__.$isListNode)(node) ? listExport(node, exportChildren, 0) : null;\n  },\n  regExp: /^(\\s*)[-*+]\\s/,\n  replace: listReplace('bullet'),\n  type: 'element'\n};\nconst CHECK_LIST = {\n  dependencies: [_lexical_list__WEBPACK_IMPORTED_MODULE_2__.ListNode, _lexical_list__WEBPACK_IMPORTED_MODULE_2__.ListItemNode],\n  export: (node, exportChildren) => {\n    return (0,_lexical_list__WEBPACK_IMPORTED_MODULE_2__.$isListNode)(node) ? listExport(node, exportChildren, 0) : null;\n  },\n  regExp: /^(\\s*)(?:-\\s)?\\s?(\\[(\\s|x)?\\])\\s/i,\n  replace: listReplace('check'),\n  type: 'element'\n};\nconst ORDERED_LIST = {\n  dependencies: [_lexical_list__WEBPACK_IMPORTED_MODULE_2__.ListNode, _lexical_list__WEBPACK_IMPORTED_MODULE_2__.ListItemNode],\n  export: (node, exportChildren) => {\n    return (0,_lexical_list__WEBPACK_IMPORTED_MODULE_2__.$isListNode)(node) ? listExport(node, exportChildren, 0) : null;\n  },\n  regExp: /^(\\s*)(\\d{1,})\\.\\s/,\n  replace: listReplace('number'),\n  type: 'element'\n};\nconst INLINE_CODE = {\n  format: ['code'],\n  tag: '`',\n  type: 'text-format'\n};\nconst HIGHLIGHT = {\n  format: ['highlight'],\n  tag: '==',\n  type: 'text-format'\n};\nconst BOLD_ITALIC_STAR = {\n  format: ['bold', 'italic'],\n  tag: '***',\n  type: 'text-format'\n};\nconst BOLD_ITALIC_UNDERSCORE = {\n  format: ['bold', 'italic'],\n  intraword: false,\n  tag: '___',\n  type: 'text-format'\n};\nconst BOLD_STAR = {\n  format: ['bold'],\n  tag: '**',\n  type: 'text-format'\n};\nconst BOLD_UNDERSCORE = {\n  format: ['bold'],\n  intraword: false,\n  tag: '__',\n  type: 'text-format'\n};\nconst STRIKETHROUGH = {\n  format: ['strikethrough'],\n  tag: '~~',\n  type: 'text-format'\n};\nconst ITALIC_STAR = {\n  format: ['italic'],\n  tag: '*',\n  type: 'text-format'\n};\nconst ITALIC_UNDERSCORE = {\n  format: ['italic'],\n  intraword: false,\n  tag: '_',\n  type: 'text-format'\n};\n\n// Order of text transformers matters:\n//\n// - code should go first as it prevents any transformations inside\n// - then longer tags match (e.g. ** or __ should go before * or _)\nconst LINK = {\n  dependencies: [_lexical_link__WEBPACK_IMPORTED_MODULE_5__.LinkNode],\n  export: (node, exportChildren, exportFormat) => {\n    if (!(0,_lexical_link__WEBPACK_IMPORTED_MODULE_5__.$isLinkNode)(node)) {\n      return null;\n    }\n    const title = node.getTitle();\n    const linkContent = title ? `[${node.getTextContent()}](${node.getURL()} \"${title}\")` : `[${node.getTextContent()}](${node.getURL()})`;\n    const firstChild = node.getFirstChild();\n    // Add text styles only if link has single text node inside. If it's more\n    // then one we ignore it as markdown does not support nested styles for links\n    if (node.getChildrenSize() === 1 && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(firstChild)) {\n      return exportFormat(firstChild, linkContent);\n    } else {\n      return linkContent;\n    }\n  },\n  importRegExp: /(?:\\[([^[]+)\\])(?:\\((?:([^()\\s]+)(?:\\s\"((?:[^\"]*\\\\\")*[^\"]*)\"\\s*)?)\\))/,\n  regExp: /(?:\\[([^[]+)\\])(?:\\((?:([^()\\s]+)(?:\\s\"((?:[^\"]*\\\\\")*[^\"]*)\"\\s*)?)\\))$/,\n  replace: (textNode, match) => {\n    const [, linkText, linkUrl, linkTitle] = match;\n    const linkNode = (0,_lexical_link__WEBPACK_IMPORTED_MODULE_5__.$createLinkNode)(linkUrl, {\n      title: linkTitle\n    });\n    const linkTextNode = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$createTextNode)(linkText);\n    linkTextNode.setFormat(textNode.getFormat());\n    linkNode.append(linkTextNode);\n    textNode.replace(linkNode);\n  },\n  trigger: ')',\n  type: 'text-match'\n};\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst ELEMENT_TRANSFORMERS = [HEADING, QUOTE, CODE, UNORDERED_LIST, ORDERED_LIST];\n\n// Order of text format transformers matters:\n//\n// - code should go first as it prevents any transformations inside\n// - then longer tags match (e.g. ** or __ should go before * or _)\nconst TEXT_FORMAT_TRANSFORMERS = [INLINE_CODE, BOLD_ITALIC_STAR, BOLD_ITALIC_UNDERSCORE, BOLD_STAR, BOLD_UNDERSCORE, HIGHLIGHT, ITALIC_STAR, ITALIC_UNDERSCORE, STRIKETHROUGH];\nconst TEXT_MATCH_TRANSFORMERS = [LINK];\nconst TRANSFORMERS = [...ELEMENT_TRANSFORMERS, ...TEXT_FORMAT_TRANSFORMERS, ...TEXT_MATCH_TRANSFORMERS];\nfunction $convertFromMarkdownString(markdown, transformers = TRANSFORMERS, node) {\n  const importMarkdown = createMarkdownImport(transformers);\n  return importMarkdown(markdown, node);\n}\nfunction $convertToMarkdownString(transformers = TRANSFORMERS, node) {\n  const exportMarkdown = createMarkdownExport(transformers);\n  return exportMarkdown(node);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9tYXJrZG93bi9MZXhpY2FsTWFya2Rvd24uZGV2Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVnUjtBQUN6TTtBQUNvRDtBQUNLO0FBQzNFO0FBQ2tCOztBQUV2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixpREFBUTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sdURBQWM7QUFDcEI7QUFDQSxJQUFJLFNBQVMseURBQWdCO0FBQzdCO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHlEQUFnQjtBQUN4QjtBQUNBLE1BQU0sU0FBUyxvREFBVztBQUMxQjtBQUNBLE1BQU0sU0FBUyx1REFBYztBQUM3QjtBQUNBLE1BQU0sU0FBUyx5REFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1REFBYztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsb0RBQVc7QUFDckI7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsUUFBUSxvREFBVztBQUNuQjtBQUNBO0FBQ0EsU0FBUyx1REFBYztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLG9EQUFXO0FBQ3BCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHlDQUF5QyxJQUFJO0FBQzdDLDBDQUEwQyxLQUFLO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixpREFBUTtBQUNqQztBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFhO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLHlEQUFnQjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSwrREFBK0Qsb0RBQVc7QUFDMUU7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHdEQUFlO0FBQ2xDLHNCQUFzQiw2REFBb0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHlEQUFnQixrQkFBa0IsZ0VBQVksa0JBQWtCLDBEQUFXO0FBQ25GO0FBQ0EsVUFBVSwwREFBVztBQUNyQjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsdUJBQXVCLG1FQUFtQixpQkFBaUIsMERBQWU7QUFDMUU7QUFDQTtBQUNBO0FBQ0EsNERBQTRELDZEQUFvQjtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qiw4REFBZTtBQUM3Qyx5QkFBeUIsd0RBQWU7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxVQUFVLE9BQU8sVUFBVSxhQUFhLFVBQVUsT0FBTyxVQUFVLEtBQUssVUFBVTtBQUNuSSxNQUFNO0FBQ04seURBQXlELFVBQVUsS0FBSyxVQUFVLFNBQVMsVUFBVSxTQUFTLFVBQVUsV0FBVyxVQUFVLCtCQUErQixVQUFVLFdBQVcsVUFBVTtBQUMzTTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsYUFBYTtBQUM5RjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU8sNERBQW1CO0FBQzFCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUseURBQWdCO0FBQzFCO0FBQ0E7QUFDQSxVQUFVLG9EQUFXO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNEQUFhO0FBQ25DLDBCQUEwQiw4REFBcUI7QUFDL0MsSUFBSSxzREFBYTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDBEQUFpQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGdCQUFnQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixZQUFZO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsZ0JBQWdCO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGtEQUFhO0FBQ3BELCtDQUErQyxrREFBYTtBQUM1RCxTQUFTLDBEQUFpQixvQkFBb0IsMERBQWlCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLG9EQUFXO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsMERBQVc7QUFDNUM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGtFQUFtQjtBQUN4QyxRQUFRLDBEQUFXO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sU0FBUywwREFBVztBQUMxQjtBQUNBO0FBQ0EsTUFBTTtBQUNOLG1CQUFtQiw4REFBZTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsOERBQWU7QUFDdkI7QUFDQTtBQUNBLFlBQVksMERBQVc7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELDRCQUE0QixtQ0FBbUMsc0NBQXNDO0FBQ3JKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDJEQUFXO0FBQzVCO0FBQ0EsU0FBUyxrRUFBYztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxlQUFlLElBQUk7QUFDbkI7QUFDQTtBQUNBLFdBQVcsc0VBQWtCO0FBQzdCLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIseURBQVM7QUFDMUI7QUFDQSxTQUFTLGdFQUFZO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGdFQUFZO0FBQ3RCLGdFQUFnRSw2REFBb0I7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixvRUFBZ0I7QUFDakM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixtREFBUTtBQUN6QjtBQUNBLFNBQVMsMERBQVc7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gseUJBQXlCLEtBQUs7QUFDOUI7QUFDQSxXQUFXLDhEQUFlO0FBQzFCLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbURBQVEsRUFBRSx1REFBWTtBQUN2QztBQUNBLFdBQVcsMERBQVc7QUFDdEIsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbURBQVEsRUFBRSx1REFBWTtBQUN2QztBQUNBLFdBQVcsMERBQVc7QUFDdEIsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbURBQVEsRUFBRSx1REFBWTtBQUN2QztBQUNBLFdBQVcsMERBQVc7QUFDdEIsR0FBRztBQUNILHFCQUFxQixHQUFHO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1EQUFRO0FBQ3pCO0FBQ0EsU0FBUywwREFBVztBQUNwQjtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0Msc0JBQXNCLElBQUksZUFBZSxHQUFHLE1BQU0sVUFBVSxzQkFBc0IsSUFBSSxjQUFjO0FBQ3hJO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxvREFBVztBQUNuRDtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDhEQUFlO0FBQ3BDO0FBQ0EsS0FBSztBQUNMLHlCQUF5Qix3REFBZTtBQUN4QztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFcVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL21hcmtkb3duL0xleGljYWxNYXJrZG93bi5kZXYubWpzPzc2YjEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5pbXBvcnQgeyAkZ2V0Um9vdCwgJGlzRWxlbWVudE5vZGUsICRpc0RlY29yYXRvck5vZGUsICRpc0xpbmVCcmVha05vZGUsICRpc1RleHROb2RlLCAkZ2V0U2VsZWN0aW9uLCAkaXNQYXJhZ3JhcGhOb2RlLCAkY3JlYXRlVGV4dE5vZGUsICRjcmVhdGVQYXJhZ3JhcGhOb2RlLCAkY3JlYXRlTGluZUJyZWFrTm9kZSwgJGlzUmFuZ2VTZWxlY3Rpb24sICRpc1Jvb3RPclNoYWRvd1Jvb3QsICRjcmVhdGVSYW5nZVNlbGVjdGlvbiwgJHNldFNlbGVjdGlvbiB9IGZyb20gJ2xleGljYWwnO1xuaW1wb3J0IHsgJGNyZWF0ZUNvZGVOb2RlLCAkaXNDb2RlTm9kZSwgQ29kZU5vZGUgfSBmcm9tICdAbGV4aWNhbC9jb2RlJztcbmltcG9ydCB7ICRpc0xpc3ROb2RlLCAkaXNMaXN0SXRlbU5vZGUsIExpc3ROb2RlLCBMaXN0SXRlbU5vZGUsICRjcmVhdGVMaXN0SXRlbU5vZGUsICRjcmVhdGVMaXN0Tm9kZSB9IGZyb20gJ0BsZXhpY2FsL2xpc3QnO1xuaW1wb3J0IHsgJGlzUXVvdGVOb2RlLCBIZWFkaW5nTm9kZSwgJGlzSGVhZGluZ05vZGUsIFF1b3RlTm9kZSwgJGNyZWF0ZVF1b3RlTm9kZSwgJGNyZWF0ZUhlYWRpbmdOb2RlIH0gZnJvbSAnQGxleGljYWwvcmljaC10ZXh0JztcbmltcG9ydCB7ICRmaW5kTWF0Y2hpbmdQYXJlbnQgfSBmcm9tICdAbGV4aWNhbC91dGlscyc7XG5pbXBvcnQgeyBMaW5rTm9kZSwgJGlzTGlua05vZGUsICRjcmVhdGVMaW5rTm9kZSB9IGZyb20gJ0BsZXhpY2FsL2xpbmsnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmZ1bmN0aW9uIGluZGV4QnkobGlzdCwgY2FsbGJhY2spIHtcbiAgY29uc3QgaW5kZXggPSB7fTtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGxpc3QpIHtcbiAgICBjb25zdCBrZXkgPSBjYWxsYmFjayhpdGVtKTtcbiAgICBpZiAoaW5kZXhba2V5XSkge1xuICAgICAgaW5kZXhba2V5XS5wdXNoKGl0ZW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleFtrZXldID0gW2l0ZW1dO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaW5kZXg7XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1lcnNCeVR5cGUodHJhbnNmb3JtZXJzKSB7XG4gIGNvbnN0IGJ5VHlwZSA9IGluZGV4QnkodHJhbnNmb3JtZXJzLCB0ID0+IHQudHlwZSk7XG4gIHJldHVybiB7XG4gICAgZWxlbWVudDogYnlUeXBlLmVsZW1lbnQgfHwgW10sXG4gICAgdGV4dEZvcm1hdDogYnlUeXBlWyd0ZXh0LWZvcm1hdCddIHx8IFtdLFxuICAgIHRleHRNYXRjaDogYnlUeXBlWyd0ZXh0LW1hdGNoJ10gfHwgW11cbiAgfTtcbn1cbmNvbnN0IFBVTkNUVUFUSU9OX09SX1NQQUNFID0gL1shLS86LUBbLWB7LX5cXHNdLztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVNYXJrZG93bkV4cG9ydCh0cmFuc2Zvcm1lcnMpIHtcbiAgY29uc3QgYnlUeXBlID0gdHJhbnNmb3JtZXJzQnlUeXBlKHRyYW5zZm9ybWVycyk7XG5cbiAgLy8gRXhwb3J0IG9ubHkgdXNlcyB0ZXh0IGZvcm1hdHMgdGhhdCBhcmUgcmVzcG9uc2libGUgZm9yIHNpbmdsZSBmb3JtYXRcbiAgLy8gZS5nLiBpdCB3aWxsIGZpbHRlciBvdXQgKioqIChib2xkLCBpdGFsaWMpIGFuZCBpbnN0ZWFkIHVzZSBzZXBhcmF0ZSAqKiBhbmQgKlxuICBjb25zdCB0ZXh0Rm9ybWF0VHJhbnNmb3JtZXJzID0gYnlUeXBlLnRleHRGb3JtYXQuZmlsdGVyKHRyYW5zZm9ybWVyID0+IHRyYW5zZm9ybWVyLmZvcm1hdC5sZW5ndGggPT09IDEpO1xuICByZXR1cm4gbm9kZSA9PiB7XG4gICAgY29uc3Qgb3V0cHV0ID0gW107XG4gICAgY29uc3QgY2hpbGRyZW4gPSAobm9kZSB8fCAkZ2V0Um9vdCgpKS5nZXRDaGlsZHJlbigpO1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGV4cG9ydFRvcExldmVsRWxlbWVudHMoY2hpbGQsIGJ5VHlwZS5lbGVtZW50LCB0ZXh0Rm9ybWF0VHJhbnNmb3JtZXJzLCBieVR5cGUudGV4dE1hdGNoKTtcbiAgICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgICAgICBvdXRwdXQucHVzaChyZXN1bHQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0LmpvaW4oJ1xcblxcbicpO1xuICB9O1xufVxuZnVuY3Rpb24gZXhwb3J0VG9wTGV2ZWxFbGVtZW50cyhub2RlLCBlbGVtZW50VHJhbnNmb3JtZXJzLCB0ZXh0VHJhbnNmb3JtZXJzSW5kZXgsIHRleHRNYXRjaFRyYW5zZm9ybWVycykge1xuICBmb3IgKGNvbnN0IHRyYW5zZm9ybWVyIG9mIGVsZW1lbnRUcmFuc2Zvcm1lcnMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0cmFuc2Zvcm1lci5leHBvcnQobm9kZSwgX25vZGUgPT4gZXhwb3J0Q2hpbGRyZW4oX25vZGUsIHRleHRUcmFuc2Zvcm1lcnNJbmRleCwgdGV4dE1hdGNoVHJhbnNmb3JtZXJzKSk7XG4gICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuICBpZiAoJGlzRWxlbWVudE5vZGUobm9kZSkpIHtcbiAgICByZXR1cm4gZXhwb3J0Q2hpbGRyZW4obm9kZSwgdGV4dFRyYW5zZm9ybWVyc0luZGV4LCB0ZXh0TWF0Y2hUcmFuc2Zvcm1lcnMpO1xuICB9IGVsc2UgaWYgKCRpc0RlY29yYXRvck5vZGUobm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZS5nZXRUZXh0Q29udGVudCgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5mdW5jdGlvbiBleHBvcnRDaGlsZHJlbihub2RlLCB0ZXh0VHJhbnNmb3JtZXJzSW5kZXgsIHRleHRNYXRjaFRyYW5zZm9ybWVycykge1xuICBjb25zdCBvdXRwdXQgPSBbXTtcbiAgY29uc3QgY2hpbGRyZW4gPSBub2RlLmdldENoaWxkcmVuKCk7XG4gIG1haW5Mb29wOiBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgZm9yIChjb25zdCB0cmFuc2Zvcm1lciBvZiB0ZXh0TWF0Y2hUcmFuc2Zvcm1lcnMpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHRyYW5zZm9ybWVyLmV4cG9ydChjaGlsZCwgcGFyZW50Tm9kZSA9PiBleHBvcnRDaGlsZHJlbihwYXJlbnROb2RlLCB0ZXh0VHJhbnNmb3JtZXJzSW5kZXgsIHRleHRNYXRjaFRyYW5zZm9ybWVycyksICh0ZXh0Tm9kZSwgdGV4dENvbnRlbnQpID0+IGV4cG9ydFRleHRGb3JtYXQodGV4dE5vZGUsIHRleHRDb250ZW50LCB0ZXh0VHJhbnNmb3JtZXJzSW5kZXgpKTtcbiAgICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgICAgICBvdXRwdXQucHVzaChyZXN1bHQpO1xuICAgICAgICBjb250aW51ZSBtYWluTG9vcDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCRpc0xpbmVCcmVha05vZGUoY2hpbGQpKSB7XG4gICAgICBvdXRwdXQucHVzaCgnXFxuJyk7XG4gICAgfSBlbHNlIGlmICgkaXNUZXh0Tm9kZShjaGlsZCkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGV4cG9ydFRleHRGb3JtYXQoY2hpbGQsIGNoaWxkLmdldFRleHRDb250ZW50KCksIHRleHRUcmFuc2Zvcm1lcnNJbmRleCkpO1xuICAgIH0gZWxzZSBpZiAoJGlzRWxlbWVudE5vZGUoY2hpbGQpKSB7XG4gICAgICBvdXRwdXQucHVzaChleHBvcnRDaGlsZHJlbihjaGlsZCwgdGV4dFRyYW5zZm9ybWVyc0luZGV4LCB0ZXh0TWF0Y2hUcmFuc2Zvcm1lcnMpKTtcbiAgICB9IGVsc2UgaWYgKCRpc0RlY29yYXRvck5vZGUoY2hpbGQpKSB7XG4gICAgICBvdXRwdXQucHVzaChjaGlsZC5nZXRUZXh0Q29udGVudCgpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKTtcbn1cbmZ1bmN0aW9uIGV4cG9ydFRleHRGb3JtYXQobm9kZSwgdGV4dENvbnRlbnQsIHRleHRUcmFuc2Zvcm1lcnMpIHtcbiAgLy8gVGhpcyBmdW5jdGlvbiBoYW5kbGVzIHRoZSBjYXNlIG9mIGEgc3RyaW5nIGxvb2tpbmcgbGlrZSB0aGlzOiBcIiAgIGZvbyAgIFwiXG4gIC8vIFdoZXJlIGl0IHdvdWxkIGJlIGludmFsaWQgbWFya2Rvd24gdG8gZ2VuZXJhdGU6IFwiKiogICBmb28gICAqKlwiXG4gIC8vIFdlIGluc3RlYWQgd2FudCB0byB0cmltIHRoZSB3aGl0ZXNwYWNlIG91dCwgYXBwbHkgZm9ybWF0dGluZywgYW5kIHRoZW5cbiAgLy8gYnJpbmcgdGhlIHdoaXRlc3BhY2UgYmFjay4gU28gb3VyIHJldHVybmVkIHN0cmluZyBsb29rcyBsaWtlIHRoaXM6IFwiICAgKipmb28qKiAgIFwiXG4gIGNvbnN0IGZyb3plblN0cmluZyA9IHRleHRDb250ZW50LnRyaW0oKTtcbiAgbGV0IG91dHB1dCA9IGZyb3plblN0cmluZztcbiAgY29uc3QgYXBwbGllZCA9IG5ldyBTZXQoKTtcbiAgZm9yIChjb25zdCB0cmFuc2Zvcm1lciBvZiB0ZXh0VHJhbnNmb3JtZXJzKSB7XG4gICAgY29uc3QgZm9ybWF0ID0gdHJhbnNmb3JtZXIuZm9ybWF0WzBdO1xuICAgIGNvbnN0IHRhZyA9IHRyYW5zZm9ybWVyLnRhZztcbiAgICBpZiAoaGFzRm9ybWF0KG5vZGUsIGZvcm1hdCkgJiYgIWFwcGxpZWQuaGFzKGZvcm1hdCkpIHtcbiAgICAgIC8vIE11bHRpcGxlIHRhZ3MgbWlnaHQgYmUgdXNlZCBmb3IgdGhlIHNhbWUgZm9ybWF0ICgqLCBfKVxuICAgICAgYXBwbGllZC5hZGQoZm9ybWF0KTtcbiAgICAgIC8vIFByZXZlbnQgYWRkaW5nIG9wZW5pbmcgdGFnIGlzIGFscmVhZHkgb3BlbmVkIGJ5IHRoZSBwcmV2aW91cyBzaWJsaW5nXG4gICAgICBjb25zdCBwcmV2aW91c05vZGUgPSBnZXRUZXh0U2libGluZyhub2RlLCB0cnVlKTtcbiAgICAgIGlmICghaGFzRm9ybWF0KHByZXZpb3VzTm9kZSwgZm9ybWF0KSkge1xuICAgICAgICBvdXRwdXQgPSB0YWcgKyBvdXRwdXQ7XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXZlbnQgYWRkaW5nIGNsb3NpbmcgdGFnIGlmIG5leHQgc2libGluZyB3aWxsIGRvIGl0XG4gICAgICBjb25zdCBuZXh0Tm9kZSA9IGdldFRleHRTaWJsaW5nKG5vZGUsIGZhbHNlKTtcbiAgICAgIGlmICghaGFzRm9ybWF0KG5leHROb2RlLCBmb3JtYXQpKSB7XG4gICAgICAgIG91dHB1dCArPSB0YWc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gUmVwbGFjZSB0cmltbWVkIHZlcnNpb24gb2YgdGV4dENvbnRlbnQgZW5zdXJpbmcgc3Vycm91bmRpbmcgd2hpdGVzcGFjZSBpcyBub3QgbW9kaWZpZWRcbiAgcmV0dXJuIHRleHRDb250ZW50LnJlcGxhY2UoZnJvemVuU3RyaW5nLCAoKSA9PiBvdXRwdXQpO1xufVxuXG4vLyBHZXQgbmV4dCBvciBwcmV2aW91cyB0ZXh0IHNpYmxpbmcgYSB0ZXh0IG5vZGUsIGluY2x1ZGluZyBjYXNlc1xuLy8gd2hlbiBpdCdzIGEgY2hpbGQgb2YgaW5saW5lIGVsZW1lbnQgKGUuZy4gbGluaylcbmZ1bmN0aW9uIGdldFRleHRTaWJsaW5nKG5vZGUsIGJhY2t3YXJkKSB7XG4gIGxldCBzaWJsaW5nID0gYmFja3dhcmQgPyBub2RlLmdldFByZXZpb3VzU2libGluZygpIDogbm9kZS5nZXROZXh0U2libGluZygpO1xuICBpZiAoIXNpYmxpbmcpIHtcbiAgICBjb25zdCBwYXJlbnQgPSBub2RlLmdldFBhcmVudE9yVGhyb3coKTtcbiAgICBpZiAocGFyZW50LmlzSW5saW5lKCkpIHtcbiAgICAgIHNpYmxpbmcgPSBiYWNrd2FyZCA/IHBhcmVudC5nZXRQcmV2aW91c1NpYmxpbmcoKSA6IHBhcmVudC5nZXROZXh0U2libGluZygpO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoc2libGluZykge1xuICAgIGlmICgkaXNFbGVtZW50Tm9kZShzaWJsaW5nKSkge1xuICAgICAgaWYgKCFzaWJsaW5nLmlzSW5saW5lKCkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjb25zdCBkZXNjZW5kYW50ID0gYmFja3dhcmQgPyBzaWJsaW5nLmdldExhc3REZXNjZW5kYW50KCkgOiBzaWJsaW5nLmdldEZpcnN0RGVzY2VuZGFudCgpO1xuICAgICAgaWYgKCRpc1RleHROb2RlKGRlc2NlbmRhbnQpKSB7XG4gICAgICAgIHJldHVybiBkZXNjZW5kYW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2libGluZyA9IGJhY2t3YXJkID8gc2libGluZy5nZXRQcmV2aW91c1NpYmxpbmcoKSA6IHNpYmxpbmcuZ2V0TmV4dFNpYmxpbmcoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCRpc1RleHROb2RlKHNpYmxpbmcpKSB7XG4gICAgICByZXR1cm4gc2libGluZztcbiAgICB9XG4gICAgaWYgKCEkaXNFbGVtZW50Tm9kZShzaWJsaW5nKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gaGFzRm9ybWF0KG5vZGUsIGZvcm1hdCkge1xuICByZXR1cm4gJGlzVGV4dE5vZGUobm9kZSkgJiYgbm9kZS5oYXNGb3JtYXQoZm9ybWF0KTtcbn1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5jb25zdCBDQU5fVVNFX0RPTSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuY29uc3QgZG9jdW1lbnRNb2RlID0gQ0FOX1VTRV9ET00gJiYgJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQgPyBkb2N1bWVudC5kb2N1bWVudE1vZGUgOiBudWxsO1xuQ0FOX1VTRV9ET00gJiYgJ0lucHV0RXZlbnQnIGluIHdpbmRvdyAmJiAhZG9jdW1lbnRNb2RlID8gJ2dldFRhcmdldFJhbmdlcycgaW4gbmV3IHdpbmRvdy5JbnB1dEV2ZW50KCdpbnB1dCcpIDogZmFsc2U7XG5jb25zdCBJU19TQUZBUkkgPSBDQU5fVVNFX0RPTSAmJiAvVmVyc2lvblxcL1tcXGQuXSsuKlNhZmFyaS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbmNvbnN0IElTX0lPUyA9IENBTl9VU0VfRE9NICYmIC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmICF3aW5kb3cuTVNTdHJlYW07XG5cbi8vIEtlZXAgdGhlc2UgaW4gY2FzZSB3ZSBuZWVkIHRvIHVzZSB0aGVtIGluIHRoZSBmdXR1cmUuXG4vLyBleHBvcnQgY29uc3QgSVNfV0lORE9XUzogYm9vbGVhbiA9IENBTl9VU0VfRE9NICYmIC9XaW4vLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKTtcbmNvbnN0IElTX0NIUk9NRSA9IENBTl9VU0VfRE9NICYmIC9eKD89LipDaHJvbWUpLiovaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuY29uc3QgSVNfQVBQTEVfV0VCS0lUID0gQ0FOX1VTRV9ET00gJiYgL0FwcGxlV2ViS2l0XFwvW1xcZC5dKy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhSVNfQ0hST01FO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmNvbnN0IE1BUktET1dOX0VNUFRZX0xJTkVfUkVHX0VYUCA9IC9eXFxzezAsM30kLztcbmNvbnN0IENPREVfQkxPQ0tfUkVHX0VYUCA9IC9eWyBcXHRdKmBgYChcXHd7MSwxMH0pP1xccz8kLztcbmZ1bmN0aW9uIGNyZWF0ZU1hcmtkb3duSW1wb3J0KHRyYW5zZm9ybWVycykge1xuICBjb25zdCBieVR5cGUgPSB0cmFuc2Zvcm1lcnNCeVR5cGUodHJhbnNmb3JtZXJzKTtcbiAgY29uc3QgdGV4dEZvcm1hdFRyYW5zZm9ybWVyc0luZGV4ID0gY3JlYXRlVGV4dEZvcm1hdFRyYW5zZm9ybWVyc0luZGV4KGJ5VHlwZS50ZXh0Rm9ybWF0KTtcbiAgcmV0dXJuIChtYXJrZG93blN0cmluZywgbm9kZSkgPT4ge1xuICAgIGNvbnN0IGxpbmVzID0gbWFya2Rvd25TdHJpbmcuc3BsaXQoJ1xcbicpO1xuICAgIGNvbnN0IGxpbmVzTGVuZ3RoID0gbGluZXMubGVuZ3RoO1xuICAgIGNvbnN0IHJvb3QgPSBub2RlIHx8ICRnZXRSb290KCk7XG4gICAgcm9vdC5jbGVhcigpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXNMZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbGluZVRleHQgPSBsaW5lc1tpXTtcbiAgICAgIC8vIENvZGVibG9ja3MgYXJlIHByb2Nlc3NlZCBmaXJzdCBhcyBhbnl0aGluZyBpbnNpZGUgc3VjaCBibG9ja1xuICAgICAgLy8gaXMgaWdub3JlZCBmb3IgZnVydGhlciBwcm9jZXNzaW5nXG4gICAgICAvLyBUT0RPOlxuICAgICAgLy8gQWJzdHJhY3QgaXQgdG8gYmUgZHluYW1pYyBhcyBvdGhlciB0cmFuc2Zvcm1lcnMgKGFkZCBtdWx0aWxpbmUgbWF0Y2ggb3B0aW9uKVxuICAgICAgY29uc3QgW2NvZGVCbG9ja05vZGUsIHNoaWZ0ZWRJbmRleF0gPSAkaW1wb3J0Q29kZUJsb2NrKGxpbmVzLCBpLCByb290KTtcbiAgICAgIGlmIChjb2RlQmxvY2tOb2RlICE9IG51bGwpIHtcbiAgICAgICAgaSA9IHNoaWZ0ZWRJbmRleDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICAkaW1wb3J0QmxvY2tzKGxpbmVUZXh0LCByb290LCBieVR5cGUuZWxlbWVudCwgdGV4dEZvcm1hdFRyYW5zZm9ybWVyc0luZGV4LCBieVR5cGUudGV4dE1hdGNoKTtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmluZyBlbXB0eSBwYXJhZ3JhcGhzIGFzIG1kIGRvZXMgbm90IHJlYWxseVxuICAgIC8vIGFsbG93IGVtcHR5IGxpbmVzIGFuZCB1c2VzIHRoZW0gYXMgZGVsaW1pdGVyXG4gICAgY29uc3QgY2hpbGRyZW4gPSByb290LmdldENoaWxkcmVuKCk7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgICAgaWYgKGlzRW1wdHlQYXJhZ3JhcGgoY2hpbGQpICYmIHJvb3QuZ2V0Q2hpbGRyZW5TaXplKCkgPiAxKSB7XG4gICAgICAgIGNoaWxkLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoJGdldFNlbGVjdGlvbigpICE9PSBudWxsKSB7XG4gICAgICByb290LnNlbGVjdEVuZCgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGlzRW1wdHlQYXJhZ3JhcGgobm9kZSkge1xuICBpZiAoISRpc1BhcmFncmFwaE5vZGUobm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgZmlyc3RDaGlsZCA9IG5vZGUuZ2V0Rmlyc3RDaGlsZCgpO1xuICByZXR1cm4gZmlyc3RDaGlsZCA9PSBudWxsIHx8IG5vZGUuZ2V0Q2hpbGRyZW5TaXplKCkgPT09IDEgJiYgJGlzVGV4dE5vZGUoZmlyc3RDaGlsZCkgJiYgTUFSS0RPV05fRU1QVFlfTElORV9SRUdfRVhQLnRlc3QoZmlyc3RDaGlsZC5nZXRUZXh0Q29udGVudCgpKTtcbn1cbmZ1bmN0aW9uICRpbXBvcnRCbG9ja3MobGluZVRleHQsIHJvb3ROb2RlLCBlbGVtZW50VHJhbnNmb3JtZXJzLCB0ZXh0Rm9ybWF0VHJhbnNmb3JtZXJzSW5kZXgsIHRleHRNYXRjaFRyYW5zZm9ybWVycykge1xuICBjb25zdCBsaW5lVGV4dFRyaW1tZWQgPSBsaW5lVGV4dC50cmltKCk7XG4gIGNvbnN0IHRleHROb2RlID0gJGNyZWF0ZVRleHROb2RlKGxpbmVUZXh0VHJpbW1lZCk7XG4gIGNvbnN0IGVsZW1lbnROb2RlID0gJGNyZWF0ZVBhcmFncmFwaE5vZGUoKTtcbiAgZWxlbWVudE5vZGUuYXBwZW5kKHRleHROb2RlKTtcbiAgcm9vdE5vZGUuYXBwZW5kKGVsZW1lbnROb2RlKTtcbiAgZm9yIChjb25zdCB7XG4gICAgcmVnRXhwLFxuICAgIHJlcGxhY2VcbiAgfSBvZiBlbGVtZW50VHJhbnNmb3JtZXJzKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBsaW5lVGV4dC5tYXRjaChyZWdFeHApO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgdGV4dE5vZGUuc2V0VGV4dENvbnRlbnQobGluZVRleHQuc2xpY2UobWF0Y2hbMF0ubGVuZ3RoKSk7XG4gICAgICByZXBsYWNlKGVsZW1lbnROb2RlLCBbdGV4dE5vZGVdLCBtYXRjaCwgdHJ1ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaW1wb3J0VGV4dEZvcm1hdFRyYW5zZm9ybWVycyh0ZXh0Tm9kZSwgdGV4dEZvcm1hdFRyYW5zZm9ybWVyc0luZGV4LCB0ZXh0TWF0Y2hUcmFuc2Zvcm1lcnMpO1xuXG4gIC8vIElmIG5vIHRyYW5zZm9ybWVyIGZvdW5kIGFuZCB3ZSBsZWZ0IHdpdGggb3JpZ2luYWwgcGFyYWdyYXBoIG5vZGVcbiAgLy8gY2FuIGNoZWNrIGlmIGl0cyBjb250ZW50IGNhbiBiZSBhcHBlbmRlZCB0byB0aGUgcHJldmlvdXMgbm9kZVxuICAvLyBpZiBpdCdzIGEgcGFyYWdyYXBoLCBxdW90ZSBvciBsaXN0XG4gIGlmIChlbGVtZW50Tm9kZS5pc0F0dGFjaGVkKCkgJiYgbGluZVRleHRUcmltbWVkLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBwcmV2aW91c05vZGUgPSBlbGVtZW50Tm9kZS5nZXRQcmV2aW91c1NpYmxpbmcoKTtcbiAgICBpZiAoJGlzUGFyYWdyYXBoTm9kZShwcmV2aW91c05vZGUpIHx8ICRpc1F1b3RlTm9kZShwcmV2aW91c05vZGUpIHx8ICRpc0xpc3ROb2RlKHByZXZpb3VzTm9kZSkpIHtcbiAgICAgIGxldCB0YXJnZXROb2RlID0gcHJldmlvdXNOb2RlO1xuICAgICAgaWYgKCRpc0xpc3ROb2RlKHByZXZpb3VzTm9kZSkpIHtcbiAgICAgICAgY29uc3QgbGFzdERlc2NlbmRhbnQgPSBwcmV2aW91c05vZGUuZ2V0TGFzdERlc2NlbmRhbnQoKTtcbiAgICAgICAgaWYgKGxhc3REZXNjZW5kYW50ID09IG51bGwpIHtcbiAgICAgICAgICB0YXJnZXROb2RlID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXROb2RlID0gJGZpbmRNYXRjaGluZ1BhcmVudChsYXN0RGVzY2VuZGFudCwgJGlzTGlzdEl0ZW1Ob2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRhcmdldE5vZGUgIT0gbnVsbCAmJiB0YXJnZXROb2RlLmdldFRleHRDb250ZW50U2l6ZSgpID4gMCkge1xuICAgICAgICB0YXJnZXROb2RlLnNwbGljZSh0YXJnZXROb2RlLmdldENoaWxkcmVuU2l6ZSgpLCAwLCBbJGNyZWF0ZUxpbmVCcmVha05vZGUoKSwgLi4uZWxlbWVudE5vZGUuZ2V0Q2hpbGRyZW4oKV0pO1xuICAgICAgICBlbGVtZW50Tm9kZS5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uICRpbXBvcnRDb2RlQmxvY2sobGluZXMsIHN0YXJ0TGluZUluZGV4LCByb290Tm9kZSkge1xuICBjb25zdCBvcGVuTWF0Y2ggPSBsaW5lc1tzdGFydExpbmVJbmRleF0ubWF0Y2goQ09ERV9CTE9DS19SRUdfRVhQKTtcbiAgaWYgKG9wZW5NYXRjaCkge1xuICAgIGxldCBlbmRMaW5lSW5kZXggPSBzdGFydExpbmVJbmRleDtcbiAgICBjb25zdCBsaW5lc0xlbmd0aCA9IGxpbmVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytlbmRMaW5lSW5kZXggPCBsaW5lc0xlbmd0aCkge1xuICAgICAgY29uc3QgY2xvc2VNYXRjaCA9IGxpbmVzW2VuZExpbmVJbmRleF0ubWF0Y2goQ09ERV9CTE9DS19SRUdfRVhQKTtcbiAgICAgIGlmIChjbG9zZU1hdGNoKSB7XG4gICAgICAgIGNvbnN0IGNvZGVCbG9ja05vZGUgPSAkY3JlYXRlQ29kZU5vZGUob3Blbk1hdGNoWzFdKTtcbiAgICAgICAgY29uc3QgdGV4dE5vZGUgPSAkY3JlYXRlVGV4dE5vZGUobGluZXMuc2xpY2Uoc3RhcnRMaW5lSW5kZXggKyAxLCBlbmRMaW5lSW5kZXgpLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgY29kZUJsb2NrTm9kZS5hcHBlbmQodGV4dE5vZGUpO1xuICAgICAgICByb290Tm9kZS5hcHBlbmQoY29kZUJsb2NrTm9kZSk7XG4gICAgICAgIHJldHVybiBbY29kZUJsb2NrTm9kZSwgZW5kTGluZUluZGV4XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtudWxsLCBzdGFydExpbmVJbmRleF07XG59XG5cbi8vIFByb2Nlc3NpbmcgdGV4dCBjb250ZW50IGFuZCByZXBsYWNlcyB0ZXh0IGZvcm1hdCB0YWdzLlxuLy8gSXQgdGFrZXMgb3V0ZXJtb3N0IHRhZyBtYXRjaCBhbmQgaXRzIGNvbnRlbnQsIGNyZWF0ZXMgdGV4dCBub2RlIHdpdGhcbi8vIGZvcm1hdCBiYXNlZCBvbiB0YWcgYW5kIHRoZW4gcmVjdXJzaXZlbHkgZXhlY3V0ZWQgb3ZlciBub2RlJ3MgY29udGVudFxuLy9cbi8vIEUuZy4gZm9yIFwiKkhlbGxvICoqd29ybGQqKiEqXCIgc3RyaW5nIGl0IHdpbGwgY3JlYXRlIHRleHQgbm9kZSB3aXRoXG4vLyBcIkhlbGxvICoqd29ybGQqKiFcIiBjb250ZW50IGFuZCBpdGFsaWMgZm9ybWF0IGFuZCBydW4gcmVjdXJzaXZlbHkgb3ZlclxuLy8gaXRzIGNvbnRlbnQgdG8gdHJhbnNmb3JtIFwiKip3b3JsZCoqXCIgcGFydFxuZnVuY3Rpb24gaW1wb3J0VGV4dEZvcm1hdFRyYW5zZm9ybWVycyh0ZXh0Tm9kZSwgdGV4dEZvcm1hdFRyYW5zZm9ybWVyc0luZGV4LCB0ZXh0TWF0Y2hUcmFuc2Zvcm1lcnMpIHtcbiAgY29uc3QgdGV4dENvbnRlbnQgPSB0ZXh0Tm9kZS5nZXRUZXh0Q29udGVudCgpO1xuICBjb25zdCBtYXRjaCA9IGZpbmRPdXRlcm1vc3RNYXRjaCh0ZXh0Q29udGVudCwgdGV4dEZvcm1hdFRyYW5zZm9ybWVyc0luZGV4KTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIC8vIE9uY2UgdGV4dCBmb3JtYXQgcHJvY2Vzc2luZyBpcyBkb25lIHJ1biB0ZXh0IG1hdGNoIHRyYW5zZm9ybWVycywgYXMgaXRcbiAgICAvLyBvbmx5IGNhbiBzcGFuIHdpdGhpbiBzaW5nbGUgdGV4dCBub2RlICh1bmxpbmUgZm9ybWF0cyB0aGF0IGNhbiBjb3ZlciBtdWx0aXBsZSBub2RlcylcbiAgICBpbXBvcnRUZXh0TWF0Y2hUcmFuc2Zvcm1lcnModGV4dE5vZGUsIHRleHRNYXRjaFRyYW5zZm9ybWVycyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBjdXJyZW50Tm9kZSwgcmVtYWluZGVyTm9kZSwgbGVhZGluZ05vZGU7XG5cbiAgLy8gSWYgbWF0Y2hpbmcgZnVsbCBjb250ZW50IHRoZXJlJ3Mgbm8gbmVlZCB0byBydW4gc3BsaXRUZXh0IGFuZCBjYW4gcmV1c2UgZXhpc3RpbmcgdGV4dE5vZGVcbiAgLy8gdG8gdXBkYXRlIGl0cyBjb250ZW50IGFuZCBhcHBseSBmb3JtYXQuIEUuZy4gZm9yICoqX0hlbGxvXyoqIHN0cmluZyBhZnRlciBhcHBseWluZyBib2xkXG4gIC8vIGZvcm1hdCAoKiopIGl0IHdpbGwgcmV1c2UgdGhlIHNhbWUgdGV4dCBub2RlIHRvIGFwcGx5IGl0YWxpYyAoXylcbiAgaWYgKG1hdGNoWzBdID09PSB0ZXh0Q29udGVudCkge1xuICAgIGN1cnJlbnROb2RlID0gdGV4dE5vZGU7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IG1hdGNoLmluZGV4IHx8IDA7XG4gICAgY29uc3QgZW5kSW5kZXggPSBzdGFydEluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgIGlmIChzdGFydEluZGV4ID09PSAwKSB7XG4gICAgICBbY3VycmVudE5vZGUsIHJlbWFpbmRlck5vZGVdID0gdGV4dE5vZGUuc3BsaXRUZXh0KGVuZEluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgW2xlYWRpbmdOb2RlLCBjdXJyZW50Tm9kZSwgcmVtYWluZGVyTm9kZV0gPSB0ZXh0Tm9kZS5zcGxpdFRleHQoc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuICAgIH1cbiAgfVxuICBjdXJyZW50Tm9kZS5zZXRUZXh0Q29udGVudChtYXRjaFsyXSk7XG4gIGNvbnN0IHRyYW5zZm9ybWVyID0gdGV4dEZvcm1hdFRyYW5zZm9ybWVyc0luZGV4LnRyYW5zZm9ybWVyc0J5VGFnW21hdGNoWzFdXTtcbiAgaWYgKHRyYW5zZm9ybWVyKSB7XG4gICAgZm9yIChjb25zdCBmb3JtYXQgb2YgdHJhbnNmb3JtZXIuZm9ybWF0KSB7XG4gICAgICBpZiAoIWN1cnJlbnROb2RlLmhhc0Zvcm1hdChmb3JtYXQpKSB7XG4gICAgICAgIGN1cnJlbnROb2RlLnRvZ2dsZUZvcm1hdChmb3JtYXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFJlY3Vyc2l2ZWx5IHJ1biBvdmVyIGlubmVyIHRleHQgaWYgaXQncyBub3QgaW5saW5lIGNvZGVcbiAgaWYgKCFjdXJyZW50Tm9kZS5oYXNGb3JtYXQoJ2NvZGUnKSkge1xuICAgIGltcG9ydFRleHRGb3JtYXRUcmFuc2Zvcm1lcnMoY3VycmVudE5vZGUsIHRleHRGb3JtYXRUcmFuc2Zvcm1lcnNJbmRleCwgdGV4dE1hdGNoVHJhbnNmb3JtZXJzKTtcbiAgfVxuXG4gIC8vIFJ1biBvdmVyIGxlYWRpbmcvcmVtYWluaW5nIHRleHQgaWYgYW55XG4gIGlmIChsZWFkaW5nTm9kZSkge1xuICAgIGltcG9ydFRleHRGb3JtYXRUcmFuc2Zvcm1lcnMobGVhZGluZ05vZGUsIHRleHRGb3JtYXRUcmFuc2Zvcm1lcnNJbmRleCwgdGV4dE1hdGNoVHJhbnNmb3JtZXJzKTtcbiAgfVxuICBpZiAocmVtYWluZGVyTm9kZSkge1xuICAgIGltcG9ydFRleHRGb3JtYXRUcmFuc2Zvcm1lcnMocmVtYWluZGVyTm9kZSwgdGV4dEZvcm1hdFRyYW5zZm9ybWVyc0luZGV4LCB0ZXh0TWF0Y2hUcmFuc2Zvcm1lcnMpO1xuICB9XG59XG5mdW5jdGlvbiBpbXBvcnRUZXh0TWF0Y2hUcmFuc2Zvcm1lcnModGV4dE5vZGVfLCB0ZXh0TWF0Y2hUcmFuc2Zvcm1lcnMpIHtcbiAgbGV0IHRleHROb2RlID0gdGV4dE5vZGVfO1xuICBtYWluTG9vcDogd2hpbGUgKHRleHROb2RlKSB7XG4gICAgZm9yIChjb25zdCB0cmFuc2Zvcm1lciBvZiB0ZXh0TWF0Y2hUcmFuc2Zvcm1lcnMpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gdGV4dE5vZGUuZ2V0VGV4dENvbnRlbnQoKS5tYXRjaCh0cmFuc2Zvcm1lci5pbXBvcnRSZWdFeHApO1xuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBtYXRjaC5pbmRleCB8fCAwO1xuICAgICAgY29uc3QgZW5kSW5kZXggPSBzdGFydEluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgbGV0IHJlcGxhY2VOb2RlLCBuZXdUZXh0Tm9kZTtcbiAgICAgIGlmIChzdGFydEluZGV4ID09PSAwKSB7XG4gICAgICAgIFtyZXBsYWNlTm9kZSwgdGV4dE5vZGVdID0gdGV4dE5vZGUuc3BsaXRUZXh0KGVuZEluZGV4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFssIHJlcGxhY2VOb2RlLCBuZXdUZXh0Tm9kZV0gPSB0ZXh0Tm9kZS5zcGxpdFRleHQoc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuICAgICAgfVxuICAgICAgaWYgKG5ld1RleHROb2RlKSB7XG4gICAgICAgIGltcG9ydFRleHRNYXRjaFRyYW5zZm9ybWVycyhuZXdUZXh0Tm9kZSwgdGV4dE1hdGNoVHJhbnNmb3JtZXJzKTtcbiAgICAgIH1cbiAgICAgIHRyYW5zZm9ybWVyLnJlcGxhY2UocmVwbGFjZU5vZGUsIG1hdGNoKTtcbiAgICAgIGNvbnRpbnVlIG1haW5Mb29wO1xuICAgIH1cbiAgICBicmVhaztcbiAgfVxufVxuXG4vLyBGaW5kcyBmaXJzdCBcIjx0YWc+Y29udGVudDx0YWc+XCIgbWF0Y2ggdGhhdCBpcyBub3QgbmVzdGVkIGludG8gYW5vdGhlciB0YWdcbmZ1bmN0aW9uIGZpbmRPdXRlcm1vc3RNYXRjaCh0ZXh0Q29udGVudCwgdGV4dFRyYW5zZm9ybWVyc0luZGV4KSB7XG4gIGNvbnN0IG9wZW5UYWdzTWF0Y2ggPSB0ZXh0Q29udGVudC5tYXRjaCh0ZXh0VHJhbnNmb3JtZXJzSW5kZXgub3BlblRhZ3NSZWdFeHApO1xuICBpZiAob3BlblRhZ3NNYXRjaCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZm9yIChjb25zdCBtYXRjaCBvZiBvcGVuVGFnc01hdGNoKSB7XG4gICAgLy8gT3BlbiB0YWdzIHJlZyBleHAgbWlnaHQgY2FwdHVyZSBsZWFkaW5nIHNwYWNlIHNvIHJlbW92aW5nIGl0XG4gICAgLy8gYmVmb3JlIHVzaW5nIG1hdGNoIHRvIGZpbmQgdHJhbnNmb3JtZXJcbiAgICBjb25zdCB0YWcgPSBtYXRjaC5yZXBsYWNlKC9eXFxzLywgJycpO1xuICAgIGNvbnN0IGZ1bGxNYXRjaFJlZ0V4cCA9IHRleHRUcmFuc2Zvcm1lcnNJbmRleC5mdWxsTWF0Y2hSZWdFeHBCeVRhZ1t0YWddO1xuICAgIGlmIChmdWxsTWF0Y2hSZWdFeHAgPT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IGZ1bGxNYXRjaCA9IHRleHRDb250ZW50Lm1hdGNoKGZ1bGxNYXRjaFJlZ0V4cCk7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSB0ZXh0VHJhbnNmb3JtZXJzSW5kZXgudHJhbnNmb3JtZXJzQnlUYWdbdGFnXTtcbiAgICBpZiAoZnVsbE1hdGNoICE9IG51bGwgJiYgdHJhbnNmb3JtZXIgIT0gbnVsbCkge1xuICAgICAgaWYgKHRyYW5zZm9ybWVyLmludHJhd29yZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZ1bGxNYXRjaDtcbiAgICAgIH1cblxuICAgICAgLy8gRm9yIG5vbi1pbnRyYXdvcmQgdHJhbnNmb3JtZXJzIGNoZWNraW5nIGlmIGl0J3Mgd2l0aGluIGEgd29yZFxuICAgICAgLy8gb3Igc3Vycm91bmRlZCB3aXRoIHNwYWNlL3B1bmN0dWF0aW9uL25ld2xpbmVcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgaW5kZXggPSAwXG4gICAgICB9ID0gZnVsbE1hdGNoO1xuICAgICAgY29uc3QgYmVmb3JlQ2hhciA9IHRleHRDb250ZW50W2luZGV4IC0gMV07XG4gICAgICBjb25zdCBhZnRlckNoYXIgPSB0ZXh0Q29udGVudFtpbmRleCArIGZ1bGxNYXRjaFswXS5sZW5ndGhdO1xuICAgICAgaWYgKCghYmVmb3JlQ2hhciB8fCBQVU5DVFVBVElPTl9PUl9TUEFDRS50ZXN0KGJlZm9yZUNoYXIpKSAmJiAoIWFmdGVyQ2hhciB8fCBQVU5DVFVBVElPTl9PUl9TUEFDRS50ZXN0KGFmdGVyQ2hhcikpKSB7XG4gICAgICAgIHJldHVybiBmdWxsTWF0Y2g7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gY3JlYXRlVGV4dEZvcm1hdFRyYW5zZm9ybWVyc0luZGV4KHRleHRUcmFuc2Zvcm1lcnMpIHtcbiAgY29uc3QgdHJhbnNmb3JtZXJzQnlUYWcgPSB7fTtcbiAgY29uc3QgZnVsbE1hdGNoUmVnRXhwQnlUYWcgPSB7fTtcbiAgY29uc3Qgb3BlblRhZ3NSZWdFeHAgPSBbXTtcbiAgY29uc3QgZXNjYXBlUmVnRXhwID0gYCg/PCFbXFxcXFxcXFxdKWA7XG4gIGZvciAoY29uc3QgdHJhbnNmb3JtZXIgb2YgdGV4dFRyYW5zZm9ybWVycykge1xuICAgIGNvbnN0IHtcbiAgICAgIHRhZ1xuICAgIH0gPSB0cmFuc2Zvcm1lcjtcbiAgICB0cmFuc2Zvcm1lcnNCeVRhZ1t0YWddID0gdHJhbnNmb3JtZXI7XG4gICAgY29uc3QgdGFnUmVnRXhwID0gdGFnLnJlcGxhY2UoLyhcXCp8XFxefFxcKykvZywgJ1xcXFwkMScpO1xuICAgIG9wZW5UYWdzUmVnRXhwLnB1c2godGFnUmVnRXhwKTtcbiAgICBpZiAoSVNfU0FGQVJJIHx8IElTX0lPUyB8fCBJU19BUFBMRV9XRUJLSVQpIHtcbiAgICAgIGZ1bGxNYXRjaFJlZ0V4cEJ5VGFnW3RhZ10gPSBuZXcgUmVnRXhwKGAoJHt0YWdSZWdFeHB9KSg/IVske3RhZ1JlZ0V4cH1cXFxcc10pKC4qP1teJHt0YWdSZWdFeHB9XFxcXHNdKSR7dGFnUmVnRXhwfSg/ISR7dGFnUmVnRXhwfSlgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnVsbE1hdGNoUmVnRXhwQnlUYWdbdGFnXSA9IG5ldyBSZWdFeHAoYCg/PCFbXFxcXFxcXFwke3RhZ1JlZ0V4cH1dKSgke3RhZ1JlZ0V4cH0pKChcXFxcXFxcXCR7dGFnUmVnRXhwfSk/Lio/W14ke3RhZ1JlZ0V4cH1cXFxcc10oXFxcXFxcXFwke3RhZ1JlZ0V4cH0pPykoKD88IVxcXFxcXFxcKXwoPzw9XFxcXFxcXFxcXFxcXFxcXCkpKCR7dGFnUmVnRXhwfSkoPyFbXFxcXFxcXFwke3RhZ1JlZ0V4cH1dKWApO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIC8vIFJlZyBleHAgdG8gZmluZCBvcGVuIHRhZyArIGNvbnRlbnQgKyBjbG9zZSB0YWdcbiAgICBmdWxsTWF0Y2hSZWdFeHBCeVRhZyxcbiAgICAvLyBSZWcgZXhwIHRvIGZpbmQgb3BlbmluZyB0YWdzXG4gICAgb3BlblRhZ3NSZWdFeHA6IG5ldyBSZWdFeHAoKElTX1NBRkFSSSB8fCBJU19JT1MgfHwgSVNfQVBQTEVfV0VCS0lUID8gJycgOiBgJHtlc2NhcGVSZWdFeHB9YCkgKyAnKCcgKyBvcGVuVGFnc1JlZ0V4cC5qb2luKCd8JykgKyAnKScsICdnJyksXG4gICAgdHJhbnNmb3JtZXJzQnlUYWdcbiAgfTtcbn1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5mdW5jdGlvbiBydW5FbGVtZW50VHJhbnNmb3JtZXJzKHBhcmVudE5vZGUsIGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCwgZWxlbWVudFRyYW5zZm9ybWVycykge1xuICBjb25zdCBncmFuZFBhcmVudE5vZGUgPSBwYXJlbnROb2RlLmdldFBhcmVudCgpO1xuICBpZiAoISRpc1Jvb3RPclNoYWRvd1Jvb3QoZ3JhbmRQYXJlbnROb2RlKSB8fCBwYXJlbnROb2RlLmdldEZpcnN0Q2hpbGQoKSAhPT0gYW5jaG9yTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCB0ZXh0Q29udGVudCA9IGFuY2hvck5vZGUuZ2V0VGV4dENvbnRlbnQoKTtcblxuICAvLyBDaGVja2luZyBmb3IgYW5jaG9yT2Zmc2V0IHBvc2l0aW9uIHRvIHByZXZlbnQgYW55IGNoZWNrcyBmb3IgY2FzZXMgd2hlbiBjYXJldCBpcyB0b28gZmFyXG4gIC8vIGZyb20gYSBsaW5lIHN0YXJ0IHRvIGJlIGEgcGFydCBvZiBibG9jay1sZXZlbCBtYXJrZG93biB0cmlnZ2VyLlxuICAvL1xuICAvLyBUT0RPOlxuICAvLyBDYW4gaGF2ZSBhIHF1aWNrIGNoZWNrIGlmIGNhcmV0IGlzIGNsb3NlIGVub3VnaCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzdHJpbmcgKGUuZy4gb2Zmc2V0IGxlc3MgdGhhbiAxMC0yMClcbiAgLy8gc2luY2Ugb3RoZXJ3aXNlIGl0IHdvbid0IGJlIGEgbWFya2Rvd24gc2hvcnRjdXQsIGJ1dCB0YWJsZXMgYXJlIGV4Y2VwdGlvblxuICBpZiAodGV4dENvbnRlbnRbYW5jaG9yT2Zmc2V0IC0gMV0gIT09ICcgJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGNvbnN0IHtcbiAgICByZWdFeHAsXG4gICAgcmVwbGFjZVxuICB9IG9mIGVsZW1lbnRUcmFuc2Zvcm1lcnMpIHtcbiAgICBjb25zdCBtYXRjaCA9IHRleHRDb250ZW50Lm1hdGNoKHJlZ0V4cCk7XG4gICAgaWYgKG1hdGNoICYmIG1hdGNoWzBdLmxlbmd0aCA9PT0gYW5jaG9yT2Zmc2V0KSB7XG4gICAgICBjb25zdCBuZXh0U2libGluZ3MgPSBhbmNob3JOb2RlLmdldE5leHRTaWJsaW5ncygpO1xuICAgICAgY29uc3QgW2xlYWRpbmdOb2RlLCByZW1haW5kZXJOb2RlXSA9IGFuY2hvck5vZGUuc3BsaXRUZXh0KGFuY2hvck9mZnNldCk7XG4gICAgICBsZWFkaW5nTm9kZS5yZW1vdmUoKTtcbiAgICAgIGNvbnN0IHNpYmxpbmdzID0gcmVtYWluZGVyTm9kZSA/IFtyZW1haW5kZXJOb2RlLCAuLi5uZXh0U2libGluZ3NdIDogbmV4dFNpYmxpbmdzO1xuICAgICAgcmVwbGFjZShwYXJlbnROb2RlLCBzaWJsaW5ncywgbWF0Y2gsIGZhbHNlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBydW5UZXh0TWF0Y2hUcmFuc2Zvcm1lcnMoYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0LCB0cmFuc2Zvcm1lcnNCeVRyaWdnZXIpIHtcbiAgbGV0IHRleHRDb250ZW50ID0gYW5jaG9yTm9kZS5nZXRUZXh0Q29udGVudCgpO1xuICBjb25zdCBsYXN0Q2hhciA9IHRleHRDb250ZW50W2FuY2hvck9mZnNldCAtIDFdO1xuICBjb25zdCB0cmFuc2Zvcm1lcnMgPSB0cmFuc2Zvcm1lcnNCeVRyaWdnZXJbbGFzdENoYXJdO1xuICBpZiAodHJhbnNmb3JtZXJzID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBJZiB0eXBpbmcgaW4gdGhlIG1pZGRsZSBvZiBjb250ZW50LCByZW1vdmUgdGhlIHRhaWwgdG8gZG9cbiAgLy8gcmVnIGV4cCBtYXRjaCB1cCB0byBhIHN0cmluZyBlbmQgKGNhcmV0IHBvc2l0aW9uKVxuICBpZiAoYW5jaG9yT2Zmc2V0IDwgdGV4dENvbnRlbnQubGVuZ3RoKSB7XG4gICAgdGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudC5zbGljZSgwLCBhbmNob3JPZmZzZXQpO1xuICB9XG4gIGZvciAoY29uc3QgdHJhbnNmb3JtZXIgb2YgdHJhbnNmb3JtZXJzKSB7XG4gICAgY29uc3QgbWF0Y2ggPSB0ZXh0Q29udGVudC5tYXRjaCh0cmFuc2Zvcm1lci5yZWdFeHApO1xuICAgIGlmIChtYXRjaCA9PT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBtYXRjaC5pbmRleCB8fCAwO1xuICAgIGNvbnN0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgICBsZXQgcmVwbGFjZU5vZGU7XG4gICAgaWYgKHN0YXJ0SW5kZXggPT09IDApIHtcbiAgICAgIFtyZXBsYWNlTm9kZV0gPSBhbmNob3JOb2RlLnNwbGl0VGV4dChlbmRJbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFssIHJlcGxhY2VOb2RlXSA9IGFuY2hvck5vZGUuc3BsaXRUZXh0KHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgICB9XG4gICAgcmVwbGFjZU5vZGUuc2VsZWN0TmV4dCgwLCAwKTtcbiAgICB0cmFuc2Zvcm1lci5yZXBsYWNlKHJlcGxhY2VOb2RlLCBtYXRjaCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gJHJ1blRleHRGb3JtYXRUcmFuc2Zvcm1lcnMoYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0LCB0ZXh0Rm9ybWF0VHJhbnNmb3JtZXJzKSB7XG4gIGNvbnN0IHRleHRDb250ZW50ID0gYW5jaG9yTm9kZS5nZXRUZXh0Q29udGVudCgpO1xuICBjb25zdCBjbG9zZVRhZ0VuZEluZGV4ID0gYW5jaG9yT2Zmc2V0IC0gMTtcbiAgY29uc3QgY2xvc2VDaGFyID0gdGV4dENvbnRlbnRbY2xvc2VUYWdFbmRJbmRleF07XG4gIC8vIFF1aWNrIGNoZWNrIGlmIHdlJ3JlIHBvc3NpYmx5IGF0IHRoZSBlbmQgb2YgaW5saW5lIG1hcmtkb3duIHN0eWxlXG4gIGNvbnN0IG1hdGNoZXJzID0gdGV4dEZvcm1hdFRyYW5zZm9ybWVyc1tjbG9zZUNoYXJdO1xuICBpZiAoIW1hdGNoZXJzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAoY29uc3QgbWF0Y2hlciBvZiBtYXRjaGVycykge1xuICAgIGNvbnN0IHtcbiAgICAgIHRhZ1xuICAgIH0gPSBtYXRjaGVyO1xuICAgIGNvbnN0IHRhZ0xlbmd0aCA9IHRhZy5sZW5ndGg7XG4gICAgY29uc3QgY2xvc2VUYWdTdGFydEluZGV4ID0gY2xvc2VUYWdFbmRJbmRleCAtIHRhZ0xlbmd0aCArIDE7XG5cbiAgICAvLyBJZiB0YWcgaXMgbm90IHNpbmdsZSBjaGFyIGNoZWNrIGlmIHJlc3Qgb2YgaXQgbWF0Y2hlcyB3aXRoIHRleHQgY29udGVudFxuICAgIGlmICh0YWdMZW5ndGggPiAxKSB7XG4gICAgICBpZiAoIWlzRXF1YWxTdWJTdHJpbmcodGV4dENvbnRlbnQsIGNsb3NlVGFnU3RhcnRJbmRleCwgdGFnLCAwLCB0YWdMZW5ndGgpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNwYWNlIGJlZm9yZSBjbG9zaW5nIHRhZyBjYW5jZWxzIGlubGluZSBtYXJrZG93blxuICAgIGlmICh0ZXh0Q29udGVudFtjbG9zZVRhZ1N0YXJ0SW5kZXggLSAxXSA9PT0gJyAnKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBTb21lIHRhZ3MgY2FuIG5vdCBiZSB1c2VkIHdpdGhpbiB3b3JkcywgaGVuY2Ugc2hvdWxkIGhhdmUgbmV3bGluZS9zcGFjZS9wdW5jdHVhdGlvbiBhZnRlciBpdFxuICAgIGNvbnN0IGFmdGVyQ2xvc2VUYWdDaGFyID0gdGV4dENvbnRlbnRbY2xvc2VUYWdFbmRJbmRleCArIDFdO1xuICAgIGlmIChtYXRjaGVyLmludHJhd29yZCA9PT0gZmFsc2UgJiYgYWZ0ZXJDbG9zZVRhZ0NoYXIgJiYgIVBVTkNUVUFUSU9OX09SX1NQQUNFLnRlc3QoYWZ0ZXJDbG9zZVRhZ0NoYXIpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgY2xvc2VOb2RlID0gYW5jaG9yTm9kZTtcbiAgICBsZXQgb3Blbk5vZGUgPSBjbG9zZU5vZGU7XG4gICAgbGV0IG9wZW5UYWdTdGFydEluZGV4ID0gZ2V0T3BlblRhZ1N0YXJ0SW5kZXgodGV4dENvbnRlbnQsIGNsb3NlVGFnU3RhcnRJbmRleCwgdGFnKTtcblxuICAgIC8vIEdvIHRocm91Z2ggdGV4dCBub2RlIHNpYmxpbmdzIGFuZCBzZWFyY2ggZm9yIG9wZW5pbmcgdGFnXG4gICAgLy8gaWYgaGF2ZW4ndCBmb3VuZCBpdCB3aXRoaW4gdGhlIHNhbWUgdGV4dCBub2RlIGFzIGNsb3NpbmcgdGFnXG4gICAgbGV0IHNpYmxpbmcgPSBvcGVuTm9kZTtcbiAgICB3aGlsZSAob3BlblRhZ1N0YXJ0SW5kZXggPCAwICYmIChzaWJsaW5nID0gc2libGluZy5nZXRQcmV2aW91c1NpYmxpbmcoKSkpIHtcbiAgICAgIGlmICgkaXNMaW5lQnJlYWtOb2RlKHNpYmxpbmcpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKCRpc1RleHROb2RlKHNpYmxpbmcpKSB7XG4gICAgICAgIGNvbnN0IHNpYmxpbmdUZXh0Q29udGVudCA9IHNpYmxpbmcuZ2V0VGV4dENvbnRlbnQoKTtcbiAgICAgICAgb3Blbk5vZGUgPSBzaWJsaW5nO1xuICAgICAgICBvcGVuVGFnU3RhcnRJbmRleCA9IGdldE9wZW5UYWdTdGFydEluZGV4KHNpYmxpbmdUZXh0Q29udGVudCwgc2libGluZ1RleHRDb250ZW50Lmxlbmd0aCwgdGFnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPcGVuaW5nIHRhZyBpcyBub3QgZm91bmRcbiAgICBpZiAob3BlblRhZ1N0YXJ0SW5kZXggPCAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBObyBjb250ZW50IGJldHdlZW4gb3BlbmluZyBhbmQgY2xvc2luZyB0YWdcbiAgICBpZiAob3Blbk5vZGUgPT09IGNsb3NlTm9kZSAmJiBvcGVuVGFnU3RhcnRJbmRleCArIHRhZ0xlbmd0aCA9PT0gY2xvc2VUYWdTdGFydEluZGV4KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBDaGVja2luZyBsb25nZXIgdGFncyBmb3IgcmVwZWF0aW5nIGNoYXJzIChlLmcuICoqKiB2cyAqKilcbiAgICBjb25zdCBwcmV2T3Blbk5vZGVUZXh0ID0gb3Blbk5vZGUuZ2V0VGV4dENvbnRlbnQoKTtcbiAgICBpZiAob3BlblRhZ1N0YXJ0SW5kZXggPiAwICYmIHByZXZPcGVuTm9kZVRleHRbb3BlblRhZ1N0YXJ0SW5kZXggLSAxXSA9PT0gY2xvc2VDaGFyKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBTb21lIHRhZ3MgY2FuIG5vdCBiZSB1c2VkIHdpdGhpbiB3b3JkcywgaGVuY2Ugc2hvdWxkIGhhdmUgbmV3bGluZS9zcGFjZS9wdW5jdHVhdGlvbiBiZWZvcmUgaXRcbiAgICBjb25zdCBiZWZvcmVPcGVuVGFnQ2hhciA9IHByZXZPcGVuTm9kZVRleHRbb3BlblRhZ1N0YXJ0SW5kZXggLSAxXTtcbiAgICBpZiAobWF0Y2hlci5pbnRyYXdvcmQgPT09IGZhbHNlICYmIGJlZm9yZU9wZW5UYWdDaGFyICYmICFQVU5DVFVBVElPTl9PUl9TUEFDRS50ZXN0KGJlZm9yZU9wZW5UYWdDaGFyKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gQ2xlYW4gdGV4dCBmcm9tIG9wZW5pbmcgYW5kIGNsb3NpbmcgdGFncyAoc3RhcnRpbmcgZnJvbSBjbG9zaW5nIHRhZ1xuICAgIC8vIHRvIHByZXZlbnQgYW55IG9mZnNldCBzaGlmdHMgaWYgd2Ugc3RhcnQgZnJvbSBvcGVuaW5nIG9uZSlcbiAgICBjb25zdCBwcmV2Q2xvc2VOb2RlVGV4dCA9IGNsb3NlTm9kZS5nZXRUZXh0Q29udGVudCgpO1xuICAgIGNvbnN0IGNsb3NlTm9kZVRleHQgPSBwcmV2Q2xvc2VOb2RlVGV4dC5zbGljZSgwLCBjbG9zZVRhZ1N0YXJ0SW5kZXgpICsgcHJldkNsb3NlTm9kZVRleHQuc2xpY2UoY2xvc2VUYWdFbmRJbmRleCArIDEpO1xuICAgIGNsb3NlTm9kZS5zZXRUZXh0Q29udGVudChjbG9zZU5vZGVUZXh0KTtcbiAgICBjb25zdCBvcGVuTm9kZVRleHQgPSBvcGVuTm9kZSA9PT0gY2xvc2VOb2RlID8gY2xvc2VOb2RlVGV4dCA6IHByZXZPcGVuTm9kZVRleHQ7XG4gICAgb3Blbk5vZGUuc2V0VGV4dENvbnRlbnQob3Blbk5vZGVUZXh0LnNsaWNlKDAsIG9wZW5UYWdTdGFydEluZGV4KSArIG9wZW5Ob2RlVGV4dC5zbGljZShvcGVuVGFnU3RhcnRJbmRleCArIHRhZ0xlbmd0aCkpO1xuICAgIGNvbnN0IHNlbGVjdGlvbiA9ICRnZXRTZWxlY3Rpb24oKTtcbiAgICBjb25zdCBuZXh0U2VsZWN0aW9uID0gJGNyZWF0ZVJhbmdlU2VsZWN0aW9uKCk7XG4gICAgJHNldFNlbGVjdGlvbihuZXh0U2VsZWN0aW9uKTtcbiAgICAvLyBBZGp1c3Qgb2Zmc2V0IGJhc2VkIG9uIGRlbGV0ZWQgY2hhcnNcbiAgICBjb25zdCBuZXdPZmZzZXQgPSBjbG9zZVRhZ0VuZEluZGV4IC0gdGFnTGVuZ3RoICogKG9wZW5Ob2RlID09PSBjbG9zZU5vZGUgPyAyIDogMSkgKyAxO1xuICAgIG5leHRTZWxlY3Rpb24uYW5jaG9yLnNldChvcGVuTm9kZS5fX2tleSwgb3BlblRhZ1N0YXJ0SW5kZXgsICd0ZXh0Jyk7XG4gICAgbmV4dFNlbGVjdGlvbi5mb2N1cy5zZXQoY2xvc2VOb2RlLl9fa2V5LCBuZXdPZmZzZXQsICd0ZXh0Jyk7XG5cbiAgICAvLyBBcHBseSBmb3JtYXR0aW5nIHRvIHNlbGVjdGVkIHRleHRcbiAgICBmb3IgKGNvbnN0IGZvcm1hdCBvZiBtYXRjaGVyLmZvcm1hdCkge1xuICAgICAgaWYgKCFuZXh0U2VsZWN0aW9uLmhhc0Zvcm1hdChmb3JtYXQpKSB7XG4gICAgICAgIG5leHRTZWxlY3Rpb24uZm9ybWF0VGV4dChmb3JtYXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvbGxhcHNlIHNlbGVjdGlvbiB1cCB0byB0aGUgZm9jdXMgcG9pbnRcbiAgICBuZXh0U2VsZWN0aW9uLmFuY2hvci5zZXQobmV4dFNlbGVjdGlvbi5mb2N1cy5rZXksIG5leHRTZWxlY3Rpb24uZm9jdXMub2Zmc2V0LCBuZXh0U2VsZWN0aW9uLmZvY3VzLnR5cGUpO1xuXG4gICAgLy8gUmVtb3ZlIGZvcm1hdHRpbmcgZnJvbSBjb2xsYXBzZWQgc2VsZWN0aW9uXG4gICAgZm9yIChjb25zdCBmb3JtYXQgb2YgbWF0Y2hlci5mb3JtYXQpIHtcbiAgICAgIGlmIChuZXh0U2VsZWN0aW9uLmhhc0Zvcm1hdChmb3JtYXQpKSB7XG4gICAgICAgIG5leHRTZWxlY3Rpb24udG9nZ2xlRm9ybWF0KGZvcm1hdCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgkaXNSYW5nZVNlbGVjdGlvbihzZWxlY3Rpb24pKSB7XG4gICAgICBuZXh0U2VsZWN0aW9uLmZvcm1hdCA9IHNlbGVjdGlvbi5mb3JtYXQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGdldE9wZW5UYWdTdGFydEluZGV4KHN0cmluZywgbWF4SW5kZXgsIHRhZykge1xuICBjb25zdCB0YWdMZW5ndGggPSB0YWcubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gbWF4SW5kZXg7IGkgPj0gdGFnTGVuZ3RoOyBpLS0pIHtcbiAgICBjb25zdCBzdGFydEluZGV4ID0gaSAtIHRhZ0xlbmd0aDtcbiAgICBpZiAoaXNFcXVhbFN1YlN0cmluZyhzdHJpbmcsIHN0YXJ0SW5kZXgsIHRhZywgMCwgdGFnTGVuZ3RoKSAmJlxuICAgIC8vIFNwYWNlIGFmdGVyIG9wZW5pbmcgdGFnIGNhbmNlbHMgdHJhbnNmb3JtYXRpb25cbiAgICBzdHJpbmdbc3RhcnRJbmRleCArIHRhZ0xlbmd0aF0gIT09ICcgJykge1xuICAgICAgcmV0dXJuIHN0YXJ0SW5kZXg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cbmZ1bmN0aW9uIGlzRXF1YWxTdWJTdHJpbmcoc3RyaW5nQSwgYVN0YXJ0LCBzdHJpbmdCLCBiU3RhcnQsIGxlbmd0aCkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0cmluZ0FbYVN0YXJ0ICsgaV0gIT09IHN0cmluZ0JbYlN0YXJ0ICsgaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiByZWdpc3Rlck1hcmtkb3duU2hvcnRjdXRzKGVkaXRvciwgdHJhbnNmb3JtZXJzID0gVFJBTlNGT1JNRVJTKSB7XG4gIGNvbnN0IGJ5VHlwZSA9IHRyYW5zZm9ybWVyc0J5VHlwZSh0cmFuc2Zvcm1lcnMpO1xuICBjb25zdCB0ZXh0Rm9ybWF0VHJhbnNmb3JtZXJzSW5kZXggPSBpbmRleEJ5KGJ5VHlwZS50ZXh0Rm9ybWF0LCAoe1xuICAgIHRhZ1xuICB9KSA9PiB0YWdbdGFnLmxlbmd0aCAtIDFdKTtcbiAgY29uc3QgdGV4dE1hdGNoVHJhbnNmb3JtZXJzSW5kZXggPSBpbmRleEJ5KGJ5VHlwZS50ZXh0TWF0Y2gsICh7XG4gICAgdHJpZ2dlclxuICB9KSA9PiB0cmlnZ2VyKTtcbiAgZm9yIChjb25zdCB0cmFuc2Zvcm1lciBvZiB0cmFuc2Zvcm1lcnMpIHtcbiAgICBjb25zdCB0eXBlID0gdHJhbnNmb3JtZXIudHlwZTtcbiAgICBpZiAodHlwZSA9PT0gJ2VsZW1lbnQnIHx8IHR5cGUgPT09ICd0ZXh0LW1hdGNoJykge1xuICAgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gdHJhbnNmb3JtZXIuZGVwZW5kZW5jaWVzO1xuICAgICAgZm9yIChjb25zdCBub2RlIG9mIGRlcGVuZGVuY2llcykge1xuICAgICAgICBpZiAoIWVkaXRvci5oYXNOb2RlKG5vZGUpKSB7XG4gICAgICAgICAge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYE1hcmtkb3duU2hvcnRjdXRzOiBtaXNzaW5nIGRlcGVuZGVuY3kgJHtub2RlLmdldFR5cGUoKX0gZm9yIHRyYW5zZm9ybWVyLiBFbnN1cmUgbm9kZSBkZXBlbmRlbmN5IGlzIGluY2x1ZGVkIGluIGVkaXRvciBpbml0aWFsIGNvbmZpZy5gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3QgJHRyYW5zZm9ybSA9IChwYXJlbnROb2RlLCBhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQpID0+IHtcbiAgICBpZiAocnVuRWxlbWVudFRyYW5zZm9ybWVycyhwYXJlbnROb2RlLCBhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQsIGJ5VHlwZS5lbGVtZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocnVuVGV4dE1hdGNoVHJhbnNmb3JtZXJzKGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCwgdGV4dE1hdGNoVHJhbnNmb3JtZXJzSW5kZXgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgICRydW5UZXh0Rm9ybWF0VHJhbnNmb3JtZXJzKGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCwgdGV4dEZvcm1hdFRyYW5zZm9ybWVyc0luZGV4KTtcbiAgfTtcbiAgcmV0dXJuIGVkaXRvci5yZWdpc3RlclVwZGF0ZUxpc3RlbmVyKCh7XG4gICAgdGFncyxcbiAgICBkaXJ0eUxlYXZlcyxcbiAgICBlZGl0b3JTdGF0ZSxcbiAgICBwcmV2RWRpdG9yU3RhdGVcbiAgfSkgPT4ge1xuICAgIC8vIElnbm9yZSB1cGRhdGVzIGZyb20gY29sbGFib3JhdGlvbiBhbmQgdW5kby9yZWRvIChhcyBjaGFuZ2VzIGFscmVhZHkgY2FsY3VsYXRlZClcbiAgICBpZiAodGFncy5oYXMoJ2NvbGxhYm9yYXRpb24nKSB8fCB0YWdzLmhhcygnaGlzdG9yaWMnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIGVkaXRvciBpcyBzdGlsbCBjb21wb3NpbmcgKGkuZS4gYmFja3RpY2tzKSB3ZSBtdXN0IHdhaXQgYmVmb3JlIHRoZSB1c2VyIGNvbmZpcm1zIHRoZSBrZXlcbiAgICBpZiAoZWRpdG9yLmlzQ29tcG9zaW5nKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUucmVhZCgkZ2V0U2VsZWN0aW9uKTtcbiAgICBjb25zdCBwcmV2U2VsZWN0aW9uID0gcHJldkVkaXRvclN0YXRlLnJlYWQoJGdldFNlbGVjdGlvbik7XG4gICAgaWYgKCEkaXNSYW5nZVNlbGVjdGlvbihwcmV2U2VsZWN0aW9uKSB8fCAhJGlzUmFuZ2VTZWxlY3Rpb24oc2VsZWN0aW9uKSB8fCAhc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYW5jaG9yS2V5ID0gc2VsZWN0aW9uLmFuY2hvci5rZXk7XG4gICAgY29uc3QgYW5jaG9yT2Zmc2V0ID0gc2VsZWN0aW9uLmFuY2hvci5vZmZzZXQ7XG4gICAgY29uc3QgYW5jaG9yTm9kZSA9IGVkaXRvclN0YXRlLl9ub2RlTWFwLmdldChhbmNob3JLZXkpO1xuICAgIGlmICghJGlzVGV4dE5vZGUoYW5jaG9yTm9kZSkgfHwgIWRpcnR5TGVhdmVzLmhhcyhhbmNob3JLZXkpIHx8IGFuY2hvck9mZnNldCAhPT0gMSAmJiBhbmNob3JPZmZzZXQgPiBwcmV2U2VsZWN0aW9uLmFuY2hvci5vZmZzZXQgKyAxKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVkaXRvci51cGRhdGUoKCkgPT4ge1xuICAgICAgLy8gTWFya2Rvd24gaXMgbm90IGF2YWlsYWJsZSBpbnNpZGUgY29kZVxuICAgICAgaWYgKGFuY2hvck5vZGUuaGFzRm9ybWF0KCdjb2RlJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgcGFyZW50Tm9kZSA9IGFuY2hvck5vZGUuZ2V0UGFyZW50KCk7XG4gICAgICBpZiAocGFyZW50Tm9kZSA9PT0gbnVsbCB8fCAkaXNDb2RlTm9kZShwYXJlbnROb2RlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAkdHJhbnNmb3JtKHBhcmVudE5vZGUsIGFuY2hvck5vZGUsIHNlbGVjdGlvbi5hbmNob3Iub2Zmc2V0KTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuY29uc3QgY3JlYXRlQmxvY2tOb2RlID0gY3JlYXRlTm9kZSA9PiB7XG4gIHJldHVybiAocGFyZW50Tm9kZSwgY2hpbGRyZW4sIG1hdGNoKSA9PiB7XG4gICAgY29uc3Qgbm9kZSA9IGNyZWF0ZU5vZGUobWF0Y2gpO1xuICAgIG5vZGUuYXBwZW5kKC4uLmNoaWxkcmVuKTtcbiAgICBwYXJlbnROb2RlLnJlcGxhY2Uobm9kZSk7XG4gICAgbm9kZS5zZWxlY3QoMCwgMCk7XG4gIH07XG59O1xuXG4vLyBBbW91bnQgb2Ygc3BhY2VzIHRoYXQgZGVmaW5lIGluZGVudGF0aW9uIGxldmVsXG4vLyBUT0RPOiBzaG91bGQgYmUgYW4gb3B0aW9uXG5jb25zdCBMSVNUX0lOREVOVF9TSVpFID0gNDtcbmZ1bmN0aW9uIGdldEluZGVudCh3aGl0ZXNwYWNlcykge1xuICBjb25zdCB0YWJzID0gd2hpdGVzcGFjZXMubWF0Y2goL1xcdC9nKTtcbiAgY29uc3Qgc3BhY2VzID0gd2hpdGVzcGFjZXMubWF0Y2goLyAvZyk7XG4gIGxldCBpbmRlbnQgPSAwO1xuICBpZiAodGFicykge1xuICAgIGluZGVudCArPSB0YWJzLmxlbmd0aDtcbiAgfVxuICBpZiAoc3BhY2VzKSB7XG4gICAgaW5kZW50ICs9IE1hdGguZmxvb3Ioc3BhY2VzLmxlbmd0aCAvIExJU1RfSU5ERU5UX1NJWkUpO1xuICB9XG4gIHJldHVybiBpbmRlbnQ7XG59XG5jb25zdCBsaXN0UmVwbGFjZSA9IGxpc3RUeXBlID0+IHtcbiAgcmV0dXJuIChwYXJlbnROb2RlLCBjaGlsZHJlbiwgbWF0Y2gpID0+IHtcbiAgICBjb25zdCBwcmV2aW91c05vZGUgPSBwYXJlbnROb2RlLmdldFByZXZpb3VzU2libGluZygpO1xuICAgIGNvbnN0IG5leHROb2RlID0gcGFyZW50Tm9kZS5nZXROZXh0U2libGluZygpO1xuICAgIGNvbnN0IGxpc3RJdGVtID0gJGNyZWF0ZUxpc3RJdGVtTm9kZShsaXN0VHlwZSA9PT0gJ2NoZWNrJyA/IG1hdGNoWzNdID09PSAneCcgOiB1bmRlZmluZWQpO1xuICAgIGlmICgkaXNMaXN0Tm9kZShuZXh0Tm9kZSkgJiYgbmV4dE5vZGUuZ2V0TGlzdFR5cGUoKSA9PT0gbGlzdFR5cGUpIHtcbiAgICAgIGNvbnN0IGZpcnN0Q2hpbGQgPSBuZXh0Tm9kZS5nZXRGaXJzdENoaWxkKCk7XG4gICAgICBpZiAoZmlyc3RDaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICBmaXJzdENoaWxkLmluc2VydEJlZm9yZShsaXN0SXRlbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzaG91bGQgbmV2ZXIgaGFwcGVuLCBidXQgbGV0J3MgaGFuZGxlIGdyYWNlZnVsbHksIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgbmV4dE5vZGUuYXBwZW5kKGxpc3RJdGVtKTtcbiAgICAgIH1cbiAgICAgIHBhcmVudE5vZGUucmVtb3ZlKCk7XG4gICAgfSBlbHNlIGlmICgkaXNMaXN0Tm9kZShwcmV2aW91c05vZGUpICYmIHByZXZpb3VzTm9kZS5nZXRMaXN0VHlwZSgpID09PSBsaXN0VHlwZSkge1xuICAgICAgcHJldmlvdXNOb2RlLmFwcGVuZChsaXN0SXRlbSk7XG4gICAgICBwYXJlbnROb2RlLnJlbW92ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBsaXN0ID0gJGNyZWF0ZUxpc3ROb2RlKGxpc3RUeXBlLCBsaXN0VHlwZSA9PT0gJ251bWJlcicgPyBOdW1iZXIobWF0Y2hbMl0pIDogdW5kZWZpbmVkKTtcbiAgICAgIGxpc3QuYXBwZW5kKGxpc3RJdGVtKTtcbiAgICAgIHBhcmVudE5vZGUucmVwbGFjZShsaXN0KTtcbiAgICB9XG4gICAgbGlzdEl0ZW0uYXBwZW5kKC4uLmNoaWxkcmVuKTtcbiAgICBsaXN0SXRlbS5zZWxlY3QoMCwgMCk7XG4gICAgY29uc3QgaW5kZW50ID0gZ2V0SW5kZW50KG1hdGNoWzFdKTtcbiAgICBpZiAoaW5kZW50KSB7XG4gICAgICBsaXN0SXRlbS5zZXRJbmRlbnQoaW5kZW50KTtcbiAgICB9XG4gIH07XG59O1xuY29uc3QgbGlzdEV4cG9ydCA9IChsaXN0Tm9kZSwgZXhwb3J0Q2hpbGRyZW4sIGRlcHRoKSA9PiB7XG4gIGNvbnN0IG91dHB1dCA9IFtdO1xuICBjb25zdCBjaGlsZHJlbiA9IGxpc3ROb2RlLmdldENoaWxkcmVuKCk7XG4gIGxldCBpbmRleCA9IDA7XG4gIGZvciAoY29uc3QgbGlzdEl0ZW1Ob2RlIG9mIGNoaWxkcmVuKSB7XG4gICAgaWYgKCRpc0xpc3RJdGVtTm9kZShsaXN0SXRlbU5vZGUpKSB7XG4gICAgICBpZiAobGlzdEl0ZW1Ob2RlLmdldENoaWxkcmVuU2l6ZSgpID09PSAxKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0Q2hpbGQgPSBsaXN0SXRlbU5vZGUuZ2V0Rmlyc3RDaGlsZCgpO1xuICAgICAgICBpZiAoJGlzTGlzdE5vZGUoZmlyc3RDaGlsZCkpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChsaXN0RXhwb3J0KGZpcnN0Q2hpbGQsIGV4cG9ydENoaWxkcmVuLCBkZXB0aCArIDEpKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgaW5kZW50ID0gJyAnLnJlcGVhdChkZXB0aCAqIExJU1RfSU5ERU5UX1NJWkUpO1xuICAgICAgY29uc3QgbGlzdFR5cGUgPSBsaXN0Tm9kZS5nZXRMaXN0VHlwZSgpO1xuICAgICAgY29uc3QgcHJlZml4ID0gbGlzdFR5cGUgPT09ICdudW1iZXInID8gYCR7bGlzdE5vZGUuZ2V0U3RhcnQoKSArIGluZGV4fS4gYCA6IGxpc3RUeXBlID09PSAnY2hlY2snID8gYC0gWyR7bGlzdEl0ZW1Ob2RlLmdldENoZWNrZWQoKSA/ICd4JyA6ICcgJ31dIGAgOiAnLSAnO1xuICAgICAgb3V0cHV0LnB1c2goaW5kZW50ICsgcHJlZml4ICsgZXhwb3J0Q2hpbGRyZW4obGlzdEl0ZW1Ob2RlKSk7XG4gICAgICBpbmRleCsrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJ1xcbicpO1xufTtcbmNvbnN0IEhFQURJTkcgPSB7XG4gIGRlcGVuZGVuY2llczogW0hlYWRpbmdOb2RlXSxcbiAgZXhwb3J0OiAobm9kZSwgZXhwb3J0Q2hpbGRyZW4pID0+IHtcbiAgICBpZiAoISRpc0hlYWRpbmdOb2RlKG5vZGUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgbGV2ZWwgPSBOdW1iZXIobm9kZS5nZXRUYWcoKS5zbGljZSgxKSk7XG4gICAgcmV0dXJuICcjJy5yZXBlYXQobGV2ZWwpICsgJyAnICsgZXhwb3J0Q2hpbGRyZW4obm9kZSk7XG4gIH0sXG4gIHJlZ0V4cDogL14oI3sxLDZ9KVxccy8sXG4gIHJlcGxhY2U6IGNyZWF0ZUJsb2NrTm9kZShtYXRjaCA9PiB7XG4gICAgY29uc3QgdGFnID0gJ2gnICsgbWF0Y2hbMV0ubGVuZ3RoO1xuICAgIHJldHVybiAkY3JlYXRlSGVhZGluZ05vZGUodGFnKTtcbiAgfSksXG4gIHR5cGU6ICdlbGVtZW50J1xufTtcbmNvbnN0IFFVT1RFID0ge1xuICBkZXBlbmRlbmNpZXM6IFtRdW90ZU5vZGVdLFxuICBleHBvcnQ6IChub2RlLCBleHBvcnRDaGlsZHJlbikgPT4ge1xuICAgIGlmICghJGlzUXVvdGVOb2RlKG5vZGUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgbGluZXMgPSBleHBvcnRDaGlsZHJlbihub2RlKS5zcGxpdCgnXFxuJyk7XG4gICAgY29uc3Qgb3V0cHV0ID0gW107XG4gICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XG4gICAgICBvdXRwdXQucHVzaCgnPiAnICsgbGluZSk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQuam9pbignXFxuJyk7XG4gIH0sXG4gIHJlZ0V4cDogL14+XFxzLyxcbiAgcmVwbGFjZTogKHBhcmVudE5vZGUsIGNoaWxkcmVuLCBfbWF0Y2gsIGlzSW1wb3J0KSA9PiB7XG4gICAgaWYgKGlzSW1wb3J0KSB7XG4gICAgICBjb25zdCBwcmV2aW91c05vZGUgPSBwYXJlbnROb2RlLmdldFByZXZpb3VzU2libGluZygpO1xuICAgICAgaWYgKCRpc1F1b3RlTm9kZShwcmV2aW91c05vZGUpKSB7XG4gICAgICAgIHByZXZpb3VzTm9kZS5zcGxpY2UocHJldmlvdXNOb2RlLmdldENoaWxkcmVuU2l6ZSgpLCAwLCBbJGNyZWF0ZUxpbmVCcmVha05vZGUoKSwgLi4uY2hpbGRyZW5dKTtcbiAgICAgICAgcHJldmlvdXNOb2RlLnNlbGVjdCgwLCAwKTtcbiAgICAgICAgcGFyZW50Tm9kZS5yZW1vdmUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBub2RlID0gJGNyZWF0ZVF1b3RlTm9kZSgpO1xuICAgIG5vZGUuYXBwZW5kKC4uLmNoaWxkcmVuKTtcbiAgICBwYXJlbnROb2RlLnJlcGxhY2Uobm9kZSk7XG4gICAgbm9kZS5zZWxlY3QoMCwgMCk7XG4gIH0sXG4gIHR5cGU6ICdlbGVtZW50J1xufTtcbmNvbnN0IENPREUgPSB7XG4gIGRlcGVuZGVuY2llczogW0NvZGVOb2RlXSxcbiAgZXhwb3J0OiBub2RlID0+IHtcbiAgICBpZiAoISRpc0NvZGVOb2RlKG5vZGUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgdGV4dENvbnRlbnQgPSBub2RlLmdldFRleHRDb250ZW50KCk7XG4gICAgcmV0dXJuICdgYGAnICsgKG5vZGUuZ2V0TGFuZ3VhZ2UoKSB8fCAnJykgKyAodGV4dENvbnRlbnQgPyAnXFxuJyArIHRleHRDb250ZW50IDogJycpICsgJ1xcbicgKyAnYGBgJztcbiAgfSxcbiAgcmVnRXhwOiAvXlsgXFx0XSpgYGAoXFx3ezEsMTB9KT9cXHMvLFxuICByZXBsYWNlOiBjcmVhdGVCbG9ja05vZGUobWF0Y2ggPT4ge1xuICAgIHJldHVybiAkY3JlYXRlQ29kZU5vZGUobWF0Y2ggPyBtYXRjaFsxXSA6IHVuZGVmaW5lZCk7XG4gIH0pLFxuICB0eXBlOiAnZWxlbWVudCdcbn07XG5jb25zdCBVTk9SREVSRURfTElTVCA9IHtcbiAgZGVwZW5kZW5jaWVzOiBbTGlzdE5vZGUsIExpc3RJdGVtTm9kZV0sXG4gIGV4cG9ydDogKG5vZGUsIGV4cG9ydENoaWxkcmVuKSA9PiB7XG4gICAgcmV0dXJuICRpc0xpc3ROb2RlKG5vZGUpID8gbGlzdEV4cG9ydChub2RlLCBleHBvcnRDaGlsZHJlbiwgMCkgOiBudWxsO1xuICB9LFxuICByZWdFeHA6IC9eKFxccyopWy0qK11cXHMvLFxuICByZXBsYWNlOiBsaXN0UmVwbGFjZSgnYnVsbGV0JyksXG4gIHR5cGU6ICdlbGVtZW50J1xufTtcbmNvbnN0IENIRUNLX0xJU1QgPSB7XG4gIGRlcGVuZGVuY2llczogW0xpc3ROb2RlLCBMaXN0SXRlbU5vZGVdLFxuICBleHBvcnQ6IChub2RlLCBleHBvcnRDaGlsZHJlbikgPT4ge1xuICAgIHJldHVybiAkaXNMaXN0Tm9kZShub2RlKSA/IGxpc3RFeHBvcnQobm9kZSwgZXhwb3J0Q2hpbGRyZW4sIDApIDogbnVsbDtcbiAgfSxcbiAgcmVnRXhwOiAvXihcXHMqKSg/Oi1cXHMpP1xccz8oXFxbKFxcc3x4KT9cXF0pXFxzL2ksXG4gIHJlcGxhY2U6IGxpc3RSZXBsYWNlKCdjaGVjaycpLFxuICB0eXBlOiAnZWxlbWVudCdcbn07XG5jb25zdCBPUkRFUkVEX0xJU1QgPSB7XG4gIGRlcGVuZGVuY2llczogW0xpc3ROb2RlLCBMaXN0SXRlbU5vZGVdLFxuICBleHBvcnQ6IChub2RlLCBleHBvcnRDaGlsZHJlbikgPT4ge1xuICAgIHJldHVybiAkaXNMaXN0Tm9kZShub2RlKSA/IGxpc3RFeHBvcnQobm9kZSwgZXhwb3J0Q2hpbGRyZW4sIDApIDogbnVsbDtcbiAgfSxcbiAgcmVnRXhwOiAvXihcXHMqKShcXGR7MSx9KVxcLlxccy8sXG4gIHJlcGxhY2U6IGxpc3RSZXBsYWNlKCdudW1iZXInKSxcbiAgdHlwZTogJ2VsZW1lbnQnXG59O1xuY29uc3QgSU5MSU5FX0NPREUgPSB7XG4gIGZvcm1hdDogWydjb2RlJ10sXG4gIHRhZzogJ2AnLFxuICB0eXBlOiAndGV4dC1mb3JtYXQnXG59O1xuY29uc3QgSElHSExJR0hUID0ge1xuICBmb3JtYXQ6IFsnaGlnaGxpZ2h0J10sXG4gIHRhZzogJz09JyxcbiAgdHlwZTogJ3RleHQtZm9ybWF0J1xufTtcbmNvbnN0IEJPTERfSVRBTElDX1NUQVIgPSB7XG4gIGZvcm1hdDogWydib2xkJywgJ2l0YWxpYyddLFxuICB0YWc6ICcqKionLFxuICB0eXBlOiAndGV4dC1mb3JtYXQnXG59O1xuY29uc3QgQk9MRF9JVEFMSUNfVU5ERVJTQ09SRSA9IHtcbiAgZm9ybWF0OiBbJ2JvbGQnLCAnaXRhbGljJ10sXG4gIGludHJhd29yZDogZmFsc2UsXG4gIHRhZzogJ19fXycsXG4gIHR5cGU6ICd0ZXh0LWZvcm1hdCdcbn07XG5jb25zdCBCT0xEX1NUQVIgPSB7XG4gIGZvcm1hdDogWydib2xkJ10sXG4gIHRhZzogJyoqJyxcbiAgdHlwZTogJ3RleHQtZm9ybWF0J1xufTtcbmNvbnN0IEJPTERfVU5ERVJTQ09SRSA9IHtcbiAgZm9ybWF0OiBbJ2JvbGQnXSxcbiAgaW50cmF3b3JkOiBmYWxzZSxcbiAgdGFnOiAnX18nLFxuICB0eXBlOiAndGV4dC1mb3JtYXQnXG59O1xuY29uc3QgU1RSSUtFVEhST1VHSCA9IHtcbiAgZm9ybWF0OiBbJ3N0cmlrZXRocm91Z2gnXSxcbiAgdGFnOiAnfn4nLFxuICB0eXBlOiAndGV4dC1mb3JtYXQnXG59O1xuY29uc3QgSVRBTElDX1NUQVIgPSB7XG4gIGZvcm1hdDogWydpdGFsaWMnXSxcbiAgdGFnOiAnKicsXG4gIHR5cGU6ICd0ZXh0LWZvcm1hdCdcbn07XG5jb25zdCBJVEFMSUNfVU5ERVJTQ09SRSA9IHtcbiAgZm9ybWF0OiBbJ2l0YWxpYyddLFxuICBpbnRyYXdvcmQ6IGZhbHNlLFxuICB0YWc6ICdfJyxcbiAgdHlwZTogJ3RleHQtZm9ybWF0J1xufTtcblxuLy8gT3JkZXIgb2YgdGV4dCB0cmFuc2Zvcm1lcnMgbWF0dGVyczpcbi8vXG4vLyAtIGNvZGUgc2hvdWxkIGdvIGZpcnN0IGFzIGl0IHByZXZlbnRzIGFueSB0cmFuc2Zvcm1hdGlvbnMgaW5zaWRlXG4vLyAtIHRoZW4gbG9uZ2VyIHRhZ3MgbWF0Y2ggKGUuZy4gKiogb3IgX18gc2hvdWxkIGdvIGJlZm9yZSAqIG9yIF8pXG5jb25zdCBMSU5LID0ge1xuICBkZXBlbmRlbmNpZXM6IFtMaW5rTm9kZV0sXG4gIGV4cG9ydDogKG5vZGUsIGV4cG9ydENoaWxkcmVuLCBleHBvcnRGb3JtYXQpID0+IHtcbiAgICBpZiAoISRpc0xpbmtOb2RlKG5vZGUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgdGl0bGUgPSBub2RlLmdldFRpdGxlKCk7XG4gICAgY29uc3QgbGlua0NvbnRlbnQgPSB0aXRsZSA/IGBbJHtub2RlLmdldFRleHRDb250ZW50KCl9XSgke25vZGUuZ2V0VVJMKCl9IFwiJHt0aXRsZX1cIilgIDogYFske25vZGUuZ2V0VGV4dENvbnRlbnQoKX1dKCR7bm9kZS5nZXRVUkwoKX0pYDtcbiAgICBjb25zdCBmaXJzdENoaWxkID0gbm9kZS5nZXRGaXJzdENoaWxkKCk7XG4gICAgLy8gQWRkIHRleHQgc3R5bGVzIG9ubHkgaWYgbGluayBoYXMgc2luZ2xlIHRleHQgbm9kZSBpbnNpZGUuIElmIGl0J3MgbW9yZVxuICAgIC8vIHRoZW4gb25lIHdlIGlnbm9yZSBpdCBhcyBtYXJrZG93biBkb2VzIG5vdCBzdXBwb3J0IG5lc3RlZCBzdHlsZXMgZm9yIGxpbmtzXG4gICAgaWYgKG5vZGUuZ2V0Q2hpbGRyZW5TaXplKCkgPT09IDEgJiYgJGlzVGV4dE5vZGUoZmlyc3RDaGlsZCkpIHtcbiAgICAgIHJldHVybiBleHBvcnRGb3JtYXQoZmlyc3RDaGlsZCwgbGlua0NvbnRlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbGlua0NvbnRlbnQ7XG4gICAgfVxuICB9LFxuICBpbXBvcnRSZWdFeHA6IC8oPzpcXFsoW15bXSspXFxdKSg/OlxcKCg/OihbXigpXFxzXSspKD86XFxzXCIoKD86W15cIl0qXFxcXFwiKSpbXlwiXSopXCJcXHMqKT8pXFwpKS8sXG4gIHJlZ0V4cDogLyg/OlxcWyhbXltdKylcXF0pKD86XFwoKD86KFteKClcXHNdKykoPzpcXHNcIigoPzpbXlwiXSpcXFxcXCIpKlteXCJdKilcIlxccyopPylcXCkpJC8sXG4gIHJlcGxhY2U6ICh0ZXh0Tm9kZSwgbWF0Y2gpID0+IHtcbiAgICBjb25zdCBbLCBsaW5rVGV4dCwgbGlua1VybCwgbGlua1RpdGxlXSA9IG1hdGNoO1xuICAgIGNvbnN0IGxpbmtOb2RlID0gJGNyZWF0ZUxpbmtOb2RlKGxpbmtVcmwsIHtcbiAgICAgIHRpdGxlOiBsaW5rVGl0bGVcbiAgICB9KTtcbiAgICBjb25zdCBsaW5rVGV4dE5vZGUgPSAkY3JlYXRlVGV4dE5vZGUobGlua1RleHQpO1xuICAgIGxpbmtUZXh0Tm9kZS5zZXRGb3JtYXQodGV4dE5vZGUuZ2V0Rm9ybWF0KCkpO1xuICAgIGxpbmtOb2RlLmFwcGVuZChsaW5rVGV4dE5vZGUpO1xuICAgIHRleHROb2RlLnJlcGxhY2UobGlua05vZGUpO1xuICB9LFxuICB0cmlnZ2VyOiAnKScsXG4gIHR5cGU6ICd0ZXh0LW1hdGNoJ1xufTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5jb25zdCBFTEVNRU5UX1RSQU5TRk9STUVSUyA9IFtIRUFESU5HLCBRVU9URSwgQ09ERSwgVU5PUkRFUkVEX0xJU1QsIE9SREVSRURfTElTVF07XG5cbi8vIE9yZGVyIG9mIHRleHQgZm9ybWF0IHRyYW5zZm9ybWVycyBtYXR0ZXJzOlxuLy9cbi8vIC0gY29kZSBzaG91bGQgZ28gZmlyc3QgYXMgaXQgcHJldmVudHMgYW55IHRyYW5zZm9ybWF0aW9ucyBpbnNpZGVcbi8vIC0gdGhlbiBsb25nZXIgdGFncyBtYXRjaCAoZS5nLiAqKiBvciBfXyBzaG91bGQgZ28gYmVmb3JlICogb3IgXylcbmNvbnN0IFRFWFRfRk9STUFUX1RSQU5TRk9STUVSUyA9IFtJTkxJTkVfQ09ERSwgQk9MRF9JVEFMSUNfU1RBUiwgQk9MRF9JVEFMSUNfVU5ERVJTQ09SRSwgQk9MRF9TVEFSLCBCT0xEX1VOREVSU0NPUkUsIEhJR0hMSUdIVCwgSVRBTElDX1NUQVIsIElUQUxJQ19VTkRFUlNDT1JFLCBTVFJJS0VUSFJPVUdIXTtcbmNvbnN0IFRFWFRfTUFUQ0hfVFJBTlNGT1JNRVJTID0gW0xJTktdO1xuY29uc3QgVFJBTlNGT1JNRVJTID0gWy4uLkVMRU1FTlRfVFJBTlNGT1JNRVJTLCAuLi5URVhUX0ZPUk1BVF9UUkFOU0ZPUk1FUlMsIC4uLlRFWFRfTUFUQ0hfVFJBTlNGT1JNRVJTXTtcbmZ1bmN0aW9uICRjb252ZXJ0RnJvbU1hcmtkb3duU3RyaW5nKG1hcmtkb3duLCB0cmFuc2Zvcm1lcnMgPSBUUkFOU0ZPUk1FUlMsIG5vZGUpIHtcbiAgY29uc3QgaW1wb3J0TWFya2Rvd24gPSBjcmVhdGVNYXJrZG93bkltcG9ydCh0cmFuc2Zvcm1lcnMpO1xuICByZXR1cm4gaW1wb3J0TWFya2Rvd24obWFya2Rvd24sIG5vZGUpO1xufVxuZnVuY3Rpb24gJGNvbnZlcnRUb01hcmtkb3duU3RyaW5nKHRyYW5zZm9ybWVycyA9IFRSQU5TRk9STUVSUywgbm9kZSkge1xuICBjb25zdCBleHBvcnRNYXJrZG93biA9IGNyZWF0ZU1hcmtkb3duRXhwb3J0KHRyYW5zZm9ybWVycyk7XG4gIHJldHVybiBleHBvcnRNYXJrZG93bihub2RlKTtcbn1cblxuZXhwb3J0IHsgJGNvbnZlcnRGcm9tTWFya2Rvd25TdHJpbmcsICRjb252ZXJ0VG9NYXJrZG93blN0cmluZywgQk9MRF9JVEFMSUNfU1RBUiwgQk9MRF9JVEFMSUNfVU5ERVJTQ09SRSwgQk9MRF9TVEFSLCBCT0xEX1VOREVSU0NPUkUsIENIRUNLX0xJU1QsIENPREUsIEVMRU1FTlRfVFJBTlNGT1JNRVJTLCBIRUFESU5HLCBISUdITElHSFQsIElOTElORV9DT0RFLCBJVEFMSUNfU1RBUiwgSVRBTElDX1VOREVSU0NPUkUsIExJTkssIE9SREVSRURfTElTVCwgUVVPVEUsIFNUUklLRVRIUk9VR0gsIFRFWFRfRk9STUFUX1RSQU5TRk9STUVSUywgVEVYVF9NQVRDSF9UUkFOU0ZPUk1FUlMsIFRSQU5TRk9STUVSUywgVU5PUkRFUkVEX0xJU1QsIHJlZ2lzdGVyTWFya2Rvd25TaG9ydGN1dHMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/markdown/LexicalMarkdown.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalComposer.dev.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalComposer.dev.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LexicalComposer: () => (/* binding */ LexicalComposer)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst useLayoutEffectImpl = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst HISTORY_MERGE_OPTIONS = {\n  tag: 'history-merge'\n};\nfunction LexicalComposer({\n  initialConfig,\n  children\n}) {\n  const composerContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const {\n      theme,\n      namespace,\n      editor__DEPRECATED: initialEditor,\n      nodes,\n      onError,\n      editorState: initialEditorState,\n      html\n    } = initialConfig;\n    const context = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_1__.createLexicalComposerContext)(null, theme);\n    let editor = initialEditor || null;\n    if (editor === null) {\n      const newEditor = (0,lexical__WEBPACK_IMPORTED_MODULE_2__.createEditor)({\n        editable: initialConfig.editable,\n        html,\n        namespace,\n        nodes,\n        onError: error => onError(error, newEditor),\n        theme\n      });\n      initializeEditor(newEditor, initialEditorState);\n      editor = newEditor;\n    }\n    return [editor, context];\n  },\n  // We only do this for init\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  useLayoutEffectImpl(() => {\n    const isEditable = initialConfig.editable;\n    const [editor] = composerContext;\n    editor.setEditable(isEditable !== undefined ? isEditable : true);\n\n    // We only do this for init\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_1__.LexicalComposerContext.Provider, {\n    value: composerContext\n  }, children);\n}\nfunction initializeEditor(editor, initialEditorState) {\n  if (initialEditorState === null) {\n    return;\n  } else if (initialEditorState === undefined) {\n    editor.update(() => {\n      const root = (0,lexical__WEBPACK_IMPORTED_MODULE_2__.$getRoot)();\n      if (root.isEmpty()) {\n        const paragraph = (0,lexical__WEBPACK_IMPORTED_MODULE_2__.$createParagraphNode)();\n        root.append(paragraph);\n        const activeElement = CAN_USE_DOM ? document.activeElement : null;\n        if ((0,lexical__WEBPACK_IMPORTED_MODULE_2__.$getSelection)() !== null || activeElement !== null && activeElement === editor.getRootElement()) {\n          paragraph.select();\n        }\n      }\n    }, HISTORY_MERGE_OPTIONS);\n  } else if (initialEditorState !== null) {\n    switch (typeof initialEditorState) {\n      case 'string':\n        {\n          const parsedEditorState = editor.parseEditorState(initialEditorState);\n          editor.setEditorState(parsedEditorState, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n      case 'object':\n        {\n          editor.setEditorState(initialEditorState, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n      case 'function':\n        {\n          editor.update(() => {\n            const root = (0,lexical__WEBPACK_IMPORTED_MODULE_2__.$getRoot)();\n            if (root.isEmpty()) {\n              initialEditorState(editor);\n            }\n          }, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n    }\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29tcG9zZXIuZGV2Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTZHO0FBQ3ZCO0FBQ3ZEO0FBQzZCOztBQUU1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQ0FBMEMsa0RBQWUsR0FBRyw0Q0FBUzs7QUFFckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDBCQUEwQiw4Q0FBTztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLG9CQUFvQixtR0FBNEI7QUFDaEQ7QUFDQTtBQUNBLHdCQUF3QixxREFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSCxzQkFBc0IsZ0RBQW1CLENBQUMseUZBQXNCO0FBQ2hFO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsbUJBQW1CLGlEQUFRO0FBQzNCO0FBQ0EsMEJBQTBCLDZEQUFvQjtBQUM5QztBQUNBO0FBQ0EsWUFBWSxzREFBYTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixpREFBUTtBQUNqQztBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3Nlci5kZXYubWpzPzJjNzIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5pbXBvcnQgeyBjcmVhdGVMZXhpY2FsQ29tcG9zZXJDb250ZXh0LCBMZXhpY2FsQ29tcG9zZXJDb250ZXh0IH0gZnJvbSAnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCc7XG5pbXBvcnQgeyBjcmVhdGVFZGl0b3IsICRnZXRSb290LCAkY3JlYXRlUGFyYWdyYXBoTm9kZSwgJGdldFNlbGVjdGlvbiB9IGZyb20gJ2xleGljYWwnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0LCB1c2VFZmZlY3QsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuY29uc3QgQ0FOX1VTRV9ET00gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmNvbnN0IHVzZUxheW91dEVmZmVjdEltcGwgPSBDQU5fVVNFX0RPTSA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5jb25zdCBISVNUT1JZX01FUkdFX09QVElPTlMgPSB7XG4gIHRhZzogJ2hpc3RvcnktbWVyZ2UnXG59O1xuZnVuY3Rpb24gTGV4aWNhbENvbXBvc2VyKHtcbiAgaW5pdGlhbENvbmZpZyxcbiAgY2hpbGRyZW5cbn0pIHtcbiAgY29uc3QgY29tcG9zZXJDb250ZXh0ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWUsXG4gICAgICBuYW1lc3BhY2UsXG4gICAgICBlZGl0b3JfX0RFUFJFQ0FURUQ6IGluaXRpYWxFZGl0b3IsXG4gICAgICBub2RlcyxcbiAgICAgIG9uRXJyb3IsXG4gICAgICBlZGl0b3JTdGF0ZTogaW5pdGlhbEVkaXRvclN0YXRlLFxuICAgICAgaHRtbFxuICAgIH0gPSBpbml0aWFsQ29uZmlnO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjcmVhdGVMZXhpY2FsQ29tcG9zZXJDb250ZXh0KG51bGwsIHRoZW1lKTtcbiAgICBsZXQgZWRpdG9yID0gaW5pdGlhbEVkaXRvciB8fCBudWxsO1xuICAgIGlmIChlZGl0b3IgPT09IG51bGwpIHtcbiAgICAgIGNvbnN0IG5ld0VkaXRvciA9IGNyZWF0ZUVkaXRvcih7XG4gICAgICAgIGVkaXRhYmxlOiBpbml0aWFsQ29uZmlnLmVkaXRhYmxlLFxuICAgICAgICBodG1sLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIG5vZGVzLFxuICAgICAgICBvbkVycm9yOiBlcnJvciA9PiBvbkVycm9yKGVycm9yLCBuZXdFZGl0b3IpLFxuICAgICAgICB0aGVtZVxuICAgICAgfSk7XG4gICAgICBpbml0aWFsaXplRWRpdG9yKG5ld0VkaXRvciwgaW5pdGlhbEVkaXRvclN0YXRlKTtcbiAgICAgIGVkaXRvciA9IG5ld0VkaXRvcjtcbiAgICB9XG4gICAgcmV0dXJuIFtlZGl0b3IsIGNvbnRleHRdO1xuICB9LFxuICAvLyBXZSBvbmx5IGRvIHRoaXMgZm9yIGluaXRcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICBbXSk7XG4gIHVzZUxheW91dEVmZmVjdEltcGwoKCkgPT4ge1xuICAgIGNvbnN0IGlzRWRpdGFibGUgPSBpbml0aWFsQ29uZmlnLmVkaXRhYmxlO1xuICAgIGNvbnN0IFtlZGl0b3JdID0gY29tcG9zZXJDb250ZXh0O1xuICAgIGVkaXRvci5zZXRFZGl0YWJsZShpc0VkaXRhYmxlICE9PSB1bmRlZmluZWQgPyBpc0VkaXRhYmxlIDogdHJ1ZSk7XG5cbiAgICAvLyBXZSBvbmx5IGRvIHRoaXMgZm9yIGluaXRcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExleGljYWxDb21wb3NlckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29tcG9zZXJDb250ZXh0XG4gIH0sIGNoaWxkcmVuKTtcbn1cbmZ1bmN0aW9uIGluaXRpYWxpemVFZGl0b3IoZWRpdG9yLCBpbml0aWFsRWRpdG9yU3RhdGUpIHtcbiAgaWYgKGluaXRpYWxFZGl0b3JTdGF0ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmIChpbml0aWFsRWRpdG9yU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgIGVkaXRvci51cGRhdGUoKCkgPT4ge1xuICAgICAgY29uc3Qgcm9vdCA9ICRnZXRSb290KCk7XG4gICAgICBpZiAocm9vdC5pc0VtcHR5KCkpIHtcbiAgICAgICAgY29uc3QgcGFyYWdyYXBoID0gJGNyZWF0ZVBhcmFncmFwaE5vZGUoKTtcbiAgICAgICAgcm9vdC5hcHBlbmQocGFyYWdyYXBoKTtcbiAgICAgICAgY29uc3QgYWN0aXZlRWxlbWVudCA9IENBTl9VU0VfRE9NID8gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA6IG51bGw7XG4gICAgICAgIGlmICgkZ2V0U2VsZWN0aW9uKCkgIT09IG51bGwgfHwgYWN0aXZlRWxlbWVudCAhPT0gbnVsbCAmJiBhY3RpdmVFbGVtZW50ID09PSBlZGl0b3IuZ2V0Um9vdEVsZW1lbnQoKSkge1xuICAgICAgICAgIHBhcmFncmFwaC5zZWxlY3QoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIEhJU1RPUllfTUVSR0VfT1BUSU9OUyk7XG4gIH0gZWxzZSBpZiAoaW5pdGlhbEVkaXRvclN0YXRlICE9PSBudWxsKSB7XG4gICAgc3dpdGNoICh0eXBlb2YgaW5pdGlhbEVkaXRvclN0YXRlKSB7XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgcGFyc2VkRWRpdG9yU3RhdGUgPSBlZGl0b3IucGFyc2VFZGl0b3JTdGF0ZShpbml0aWFsRWRpdG9yU3RhdGUpO1xuICAgICAgICAgIGVkaXRvci5zZXRFZGl0b3JTdGF0ZShwYXJzZWRFZGl0b3JTdGF0ZSwgSElTVE9SWV9NRVJHRV9PUFRJT05TKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAge1xuICAgICAgICAgIGVkaXRvci5zZXRFZGl0b3JTdGF0ZShpbml0aWFsRWRpdG9yU3RhdGUsIEhJU1RPUllfTUVSR0VfT1BUSU9OUyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAge1xuICAgICAgICAgIGVkaXRvci51cGRhdGUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgcm9vdCA9ICRnZXRSb290KCk7XG4gICAgICAgICAgICBpZiAocm9vdC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgaW5pdGlhbEVkaXRvclN0YXRlKGVkaXRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgSElTVE9SWV9NRVJHRV9PUFRJT05TKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBMZXhpY2FsQ29tcG9zZXIgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalComposer.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalContentEditable.dev.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalContentEditable.dev.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentEditable: () => (/* binding */ ContentEditable)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst useLayoutEffectImpl = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\nfunction ContentEditable({\n  ariaActiveDescendant,\n  ariaAutoComplete,\n  ariaControls,\n  ariaDescribedBy,\n  ariaExpanded,\n  ariaLabel,\n  ariaLabelledBy,\n  ariaMultiline,\n  ariaOwns,\n  ariaRequired,\n  autoCapitalize,\n  className,\n  id,\n  role = 'textbox',\n  spellCheck = true,\n  style,\n  tabIndex,\n  'data-testid': testid,\n  ...rest\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_1__.useLexicalComposerContext)();\n  const [isEditable, setEditable] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(rootElement => {\n    // defaultView is required for a root element.\n    // In multi-window setups, the defaultView may not exist at certain points.\n    if (rootElement && rootElement.ownerDocument && rootElement.ownerDocument.defaultView) {\n      editor.setRootElement(rootElement);\n    }\n  }, [editor]);\n  useLayoutEffectImpl(() => {\n    setEditable(editor.isEditable());\n    return editor.registerEditableListener(currentIsEditable => {\n      setEditable(currentIsEditable);\n    });\n  }, [editor]);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", _extends({}, rest, {\n    \"aria-activedescendant\": !isEditable ? undefined : ariaActiveDescendant,\n    \"aria-autocomplete\": !isEditable ? 'none' : ariaAutoComplete,\n    \"aria-controls\": !isEditable ? undefined : ariaControls,\n    \"aria-describedby\": ariaDescribedBy,\n    \"aria-expanded\": !isEditable ? undefined : role === 'combobox' ? !!ariaExpanded : undefined,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-multiline\": ariaMultiline,\n    \"aria-owns\": !isEditable ? undefined : ariaOwns,\n    \"aria-readonly\": !isEditable ? true : undefined,\n    \"aria-required\": ariaRequired,\n    autoCapitalize: autoCapitalize,\n    className: className,\n    contentEditable: isEditable,\n    \"data-testid\": testid,\n    id: id,\n    ref: ref,\n    role: role,\n    spellCheck: spellCheck,\n    style: style,\n    tabIndex: tabIndex\n  }));\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29udGVudEVkaXRhYmxlLmRldi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWtGO0FBQ25EO0FBQzJDOztBQUUxRTtBQUNBO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBDQUEwQyxrREFBZSxHQUFHLDRDQUFTOztBQUVyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG1CQUFtQixnR0FBeUI7QUFDNUMsb0NBQW9DLCtDQUFRO0FBQzVDLGNBQWMsa0RBQVc7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsc0JBQXNCLGdEQUFtQixtQkFBbUI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUUyQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbnRlbnRFZGl0YWJsZS5kZXYubWpzPzAzYzUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5pbXBvcnQgeyB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0IH0gZnJvbSAnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QsIHVzZUVmZmVjdCwgdXNlU3RhdGUsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5jb25zdCBDQU5fVVNFX0RPTSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuY29uc3QgdXNlTGF5b3V0RWZmZWN0SW1wbCA9IENBTl9VU0VfRE9NID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0O1xuXG5mdW5jdGlvbiBDb250ZW50RWRpdGFibGUoe1xuICBhcmlhQWN0aXZlRGVzY2VuZGFudCxcbiAgYXJpYUF1dG9Db21wbGV0ZSxcbiAgYXJpYUNvbnRyb2xzLFxuICBhcmlhRGVzY3JpYmVkQnksXG4gIGFyaWFFeHBhbmRlZCxcbiAgYXJpYUxhYmVsLFxuICBhcmlhTGFiZWxsZWRCeSxcbiAgYXJpYU11bHRpbGluZSxcbiAgYXJpYU93bnMsXG4gIGFyaWFSZXF1aXJlZCxcbiAgYXV0b0NhcGl0YWxpemUsXG4gIGNsYXNzTmFtZSxcbiAgaWQsXG4gIHJvbGUgPSAndGV4dGJveCcsXG4gIHNwZWxsQ2hlY2sgPSB0cnVlLFxuICBzdHlsZSxcbiAgdGFiSW5kZXgsXG4gICdkYXRhLXRlc3RpZCc6IHRlc3RpZCxcbiAgLi4ucmVzdFxufSkge1xuICBjb25zdCBbZWRpdG9yXSA9IHVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKTtcbiAgY29uc3QgW2lzRWRpdGFibGUsIHNldEVkaXRhYmxlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgcmVmID0gdXNlQ2FsbGJhY2socm9vdEVsZW1lbnQgPT4ge1xuICAgIC8vIGRlZmF1bHRWaWV3IGlzIHJlcXVpcmVkIGZvciBhIHJvb3QgZWxlbWVudC5cbiAgICAvLyBJbiBtdWx0aS13aW5kb3cgc2V0dXBzLCB0aGUgZGVmYXVsdFZpZXcgbWF5IG5vdCBleGlzdCBhdCBjZXJ0YWluIHBvaW50cy5cbiAgICBpZiAocm9vdEVsZW1lbnQgJiYgcm9vdEVsZW1lbnQub3duZXJEb2N1bWVudCAmJiByb290RWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSB7XG4gICAgICBlZGl0b3Iuc2V0Um9vdEVsZW1lbnQocm9vdEVsZW1lbnQpO1xuICAgIH1cbiAgfSwgW2VkaXRvcl0pO1xuICB1c2VMYXlvdXRFZmZlY3RJbXBsKCgpID0+IHtcbiAgICBzZXRFZGl0YWJsZShlZGl0b3IuaXNFZGl0YWJsZSgpKTtcbiAgICByZXR1cm4gZWRpdG9yLnJlZ2lzdGVyRWRpdGFibGVMaXN0ZW5lcihjdXJyZW50SXNFZGl0YWJsZSA9PiB7XG4gICAgICBzZXRFZGl0YWJsZShjdXJyZW50SXNFZGl0YWJsZSk7XG4gICAgfSk7XG4gIH0sIFtlZGl0b3JdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIjogIWlzRWRpdGFibGUgPyB1bmRlZmluZWQgOiBhcmlhQWN0aXZlRGVzY2VuZGFudCxcbiAgICBcImFyaWEtYXV0b2NvbXBsZXRlXCI6ICFpc0VkaXRhYmxlID8gJ25vbmUnIDogYXJpYUF1dG9Db21wbGV0ZSxcbiAgICBcImFyaWEtY29udHJvbHNcIjogIWlzRWRpdGFibGUgPyB1bmRlZmluZWQgOiBhcmlhQ29udHJvbHMsXG4gICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGFyaWFEZXNjcmliZWRCeSxcbiAgICBcImFyaWEtZXhwYW5kZWRcIjogIWlzRWRpdGFibGUgPyB1bmRlZmluZWQgOiByb2xlID09PSAnY29tYm9ib3gnID8gISFhcmlhRXhwYW5kZWQgOiB1bmRlZmluZWQsXG4gICAgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbCxcbiAgICBcImFyaWEtbGFiZWxsZWRieVwiOiBhcmlhTGFiZWxsZWRCeSxcbiAgICBcImFyaWEtbXVsdGlsaW5lXCI6IGFyaWFNdWx0aWxpbmUsXG4gICAgXCJhcmlhLW93bnNcIjogIWlzRWRpdGFibGUgPyB1bmRlZmluZWQgOiBhcmlhT3ducyxcbiAgICBcImFyaWEtcmVhZG9ubHlcIjogIWlzRWRpdGFibGUgPyB0cnVlIDogdW5kZWZpbmVkLFxuICAgIFwiYXJpYS1yZXF1aXJlZFwiOiBhcmlhUmVxdWlyZWQsXG4gICAgYXV0b0NhcGl0YWxpemU6IGF1dG9DYXBpdGFsaXplLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIGNvbnRlbnRFZGl0YWJsZTogaXNFZGl0YWJsZSxcbiAgICBcImRhdGEtdGVzdGlkXCI6IHRlc3RpZCxcbiAgICBpZDogaWQsXG4gICAgcmVmOiByZWYsXG4gICAgcm9sZTogcm9sZSxcbiAgICBzcGVsbENoZWNrOiBzcGVsbENoZWNrLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICB0YWJJbmRleDogdGFiSW5kZXhcbiAgfSkpO1xufVxuXG5leHBvcnQgeyBDb250ZW50RWRpdGFibGUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalContentEditable.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalErrorBoundary.dev.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalErrorBoundary.dev.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LexicalErrorBoundary)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\n\nvar changedArray = function changedArray(a, b) {\n  if (a === void 0) {\n    a = [];\n  }\n\n  if (b === void 0) {\n    b = [];\n  }\n\n  return a.length !== b.length || a.some(function (item, index) {\n    return !Object.is(item, b[index]);\n  });\n};\n\nvar initialState = {\n  error: null\n};\n\nvar ErrorBoundary = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(ErrorBoundary, _React$Component);\n\n  function ErrorBoundary() {\n    var _this;\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;\n    _this.state = initialState;\n\n    _this.resetErrorBoundary = function () {\n      var _this$props;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _this.props.onReset == null ? void 0 : (_this$props = _this.props).onReset.apply(_this$props, args);\n\n      _this.reset();\n    };\n\n    return _this;\n  }\n\n  ErrorBoundary.getDerivedStateFromError = function getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  };\n\n  var _proto = ErrorBoundary.prototype;\n\n  _proto.reset = function reset() {\n    this.setState(initialState);\n  };\n\n  _proto.componentDidCatch = function componentDidCatch(error, info) {\n    var _this$props$onError, _this$props2;\n\n    (_this$props$onError = (_this$props2 = this.props).onError) == null ? void 0 : _this$props$onError.call(_this$props2, error, info);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var error = this.state.error;\n    var resetKeys = this.props.resetKeys; // There's an edge case where if the thing that triggered the error\n    // happens to *also* be in the resetKeys array, we'd end up resetting\n    // the error boundary immediately. This would likely trigger a second\n    // error to be thrown.\n    // So we make sure that we don't check the resetKeys on the first call\n    // of cDU after the error is set\n\n    if (error !== null && prevState.error !== null && changedArray(prevProps.resetKeys, resetKeys)) {\n      var _this$props$onResetKe, _this$props3;\n\n      (_this$props$onResetKe = (_this$props3 = this.props).onResetKeysChange) == null ? void 0 : _this$props$onResetKe.call(_this$props3, prevProps.resetKeys, resetKeys);\n      this.reset();\n    }\n  };\n\n  _proto.render = function render() {\n    var error = this.state.error;\n    var _this$props4 = this.props,\n        fallbackRender = _this$props4.fallbackRender,\n        FallbackComponent = _this$props4.FallbackComponent,\n        fallback = _this$props4.fallback;\n\n    if (error !== null) {\n      var _props = {\n        error: error,\n        resetErrorBoundary: this.resetErrorBoundary\n      };\n\n      if ( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(fallback)) {\n        return fallback;\n      } else if (typeof fallbackRender === 'function') {\n        return fallbackRender(_props);\n      } else if (FallbackComponent) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FallbackComponent, _props);\n      } else {\n        throw new Error('react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop');\n      }\n    }\n\n    return this.props.children;\n  };\n\n  return ErrorBoundary;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction LexicalErrorBoundary({\n  children,\n  onError\n}) {\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(ErrorBoundary, {\n    fallback: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n      style: {\n        border: '1px solid #f00',\n        color: '#f00',\n        padding: '8px'\n      }\n    }, \"An error was thrown.\"),\n    onError: onError\n  }, children);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsRXJyb3JCb3VuZGFyeS5kZXYubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRStCOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEseUVBQXlFLGFBQWE7QUFDdEY7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsNkVBQTZFLGVBQWU7QUFDNUY7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3QixpREFBb0I7QUFDNUM7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1IsNEJBQTRCLGdEQUFtQjtBQUMvQyxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDLENBQUMsNENBQWU7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxzQkFBc0IsZ0RBQW1CO0FBQ3pDLDJCQUEyQixnREFBbUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDs7QUFFMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxFcnJvckJvdW5kYXJ5LmRldi5tanM/Njk3MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbnZhciBjaGFuZ2VkQXJyYXkgPSBmdW5jdGlvbiBjaGFuZ2VkQXJyYXkoYSwgYikge1xuICBpZiAoYSA9PT0gdm9pZCAwKSB7XG4gICAgYSA9IFtdO1xuICB9XG5cbiAgaWYgKGIgPT09IHZvaWQgMCkge1xuICAgIGIgPSBbXTtcbiAgfVxuXG4gIHJldHVybiBhLmxlbmd0aCAhPT0gYi5sZW5ndGggfHwgYS5zb21lKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgIHJldHVybiAhT2JqZWN0LmlzKGl0ZW0sIGJbaW5kZXhdKTtcbiAgfSk7XG59O1xuXG52YXIgaW5pdGlhbFN0YXRlID0ge1xuICBlcnJvcjogbnVsbFxufTtcblxudmFyIEVycm9yQm91bmRhcnkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRXJyb3JCb3VuZGFyeSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRXJyb3JCb3VuZGFyeSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgX2FyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBfYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KF9hcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IGluaXRpYWxTdGF0ZTtcblxuICAgIF90aGlzLnJlc2V0RXJyb3JCb3VuZGFyeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcztcblxuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMucHJvcHMub25SZXNldCA9PSBudWxsID8gdm9pZCAwIDogKF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMpLm9uUmVzZXQuYXBwbHkoX3RoaXMkcHJvcHMsIGFyZ3MpO1xuXG4gICAgICBfdGhpcy5yZXNldCgpO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBFcnJvckJvdW5kYXJ5LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogZXJyb3JcbiAgICB9O1xuICB9O1xuXG4gIHZhciBfcHJvdG8gPSBFcnJvckJvdW5kYXJ5LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKGluaXRpYWxTdGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZENhdGNoID0gZnVuY3Rpb24gY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGluZm8pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMkb25FcnJvciwgX3RoaXMkcHJvcHMyO1xuXG4gICAgKF90aGlzJHByb3BzJG9uRXJyb3IgPSAoX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcykub25FcnJvcikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHByb3BzJG9uRXJyb3IuY2FsbChfdGhpcyRwcm9wczIsIGVycm9yLCBpbmZvKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgdmFyIGVycm9yID0gdGhpcy5zdGF0ZS5lcnJvcjtcbiAgICB2YXIgcmVzZXRLZXlzID0gdGhpcy5wcm9wcy5yZXNldEtleXM7IC8vIFRoZXJlJ3MgYW4gZWRnZSBjYXNlIHdoZXJlIGlmIHRoZSB0aGluZyB0aGF0IHRyaWdnZXJlZCB0aGUgZXJyb3JcbiAgICAvLyBoYXBwZW5zIHRvICphbHNvKiBiZSBpbiB0aGUgcmVzZXRLZXlzIGFycmF5LCB3ZSdkIGVuZCB1cCByZXNldHRpbmdcbiAgICAvLyB0aGUgZXJyb3IgYm91bmRhcnkgaW1tZWRpYXRlbHkuIFRoaXMgd291bGQgbGlrZWx5IHRyaWdnZXIgYSBzZWNvbmRcbiAgICAvLyBlcnJvciB0byBiZSB0aHJvd24uXG4gICAgLy8gU28gd2UgbWFrZSBzdXJlIHRoYXQgd2UgZG9uJ3QgY2hlY2sgdGhlIHJlc2V0S2V5cyBvbiB0aGUgZmlyc3QgY2FsbFxuICAgIC8vIG9mIGNEVSBhZnRlciB0aGUgZXJyb3IgaXMgc2V0XG5cbiAgICBpZiAoZXJyb3IgIT09IG51bGwgJiYgcHJldlN0YXRlLmVycm9yICE9PSBudWxsICYmIGNoYW5nZWRBcnJheShwcmV2UHJvcHMucmVzZXRLZXlzLCByZXNldEtleXMpKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMkb25SZXNldEtlLCBfdGhpcyRwcm9wczM7XG5cbiAgICAgIChfdGhpcyRwcm9wcyRvblJlc2V0S2UgPSAoX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcykub25SZXNldEtleXNDaGFuZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRwcm9wcyRvblJlc2V0S2UuY2FsbChfdGhpcyRwcm9wczMsIHByZXZQcm9wcy5yZXNldEtleXMsIHJlc2V0S2V5cyk7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGVycm9yID0gdGhpcy5zdGF0ZS5lcnJvcjtcbiAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZmFsbGJhY2tSZW5kZXIgPSBfdGhpcyRwcm9wczQuZmFsbGJhY2tSZW5kZXIsXG4gICAgICAgIEZhbGxiYWNrQ29tcG9uZW50ID0gX3RoaXMkcHJvcHM0LkZhbGxiYWNrQ29tcG9uZW50LFxuICAgICAgICBmYWxsYmFjayA9IF90aGlzJHByb3BzNC5mYWxsYmFjaztcblxuICAgIGlmIChlcnJvciAhPT0gbnVsbCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHtcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICByZXNldEVycm9yQm91bmRhcnk6IHRoaXMucmVzZXRFcnJvckJvdW5kYXJ5XG4gICAgICB9O1xuXG4gICAgICBpZiAoIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChmYWxsYmFjaykpIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZmFsbGJhY2tSZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrUmVuZGVyKF9wcm9wcyk7XG4gICAgICB9IGVsc2UgaWYgKEZhbGxiYWNrQ29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGYWxsYmFja0NvbXBvbmVudCwgX3Byb3BzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncmVhY3QtZXJyb3ItYm91bmRhcnkgcmVxdWlyZXMgZWl0aGVyIGEgZmFsbGJhY2ssIGZhbGxiYWNrUmVuZGVyLCBvciBGYWxsYmFja0NvbXBvbmVudCBwcm9wJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gIH07XG5cbiAgcmV0dXJuIEVycm9yQm91bmRhcnk7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZnVuY3Rpb24gTGV4aWNhbEVycm9yQm91bmRhcnkoe1xuICBjaGlsZHJlbixcbiAgb25FcnJvclxufSkge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRXJyb3JCb3VuZGFyeSwge1xuICAgIGZhbGxiYWNrOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBzdHlsZToge1xuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgI2YwMCcsXG4gICAgICAgIGNvbG9yOiAnI2YwMCcsXG4gICAgICAgIHBhZGRpbmc6ICc4cHgnXG4gICAgICB9XG4gICAgfSwgXCJBbiBlcnJvciB3YXMgdGhyb3duLlwiKSxcbiAgICBvbkVycm9yOiBvbkVycm9yXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuZXhwb3J0IHsgTGV4aWNhbEVycm9yQm91bmRhcnkgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalErrorBoundary.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalHistoryPlugin.dev.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalHistoryPlugin.dev.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HistoryPlugin: () => (/* binding */ HistoryPlugin),\n/* harmony export */   createEmptyHistoryState: () => (/* reexport safe */ _lexical_history__WEBPACK_IMPORTED_MODULE_0__.createEmptyHistoryState)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var _lexical_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lexical/history */ \"(app-pages-browser)/./node_modules/@lexical/history/LexicalHistory.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useHistory(editor, externalHistoryState, delay = 1000) {\n  const historyState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => externalHistoryState || (0,_lexical_history__WEBPACK_IMPORTED_MODULE_0__.createEmptyHistoryState)(), [externalHistoryState]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    return (0,_lexical_history__WEBPACK_IMPORTED_MODULE_0__.registerHistory)(editor, historyState, delay);\n  }, [delay, editor, historyState]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction HistoryPlugin({\n  externalHistoryState\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_2__.useLexicalComposerContext)();\n  useHistory(editor, externalHistoryState);\n  return null;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsSGlzdG9yeVBsdWdpbi5kZXYubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWtGO0FBQ047QUFDakI7QUFDaEI7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCLDhDQUFPLCtCQUErQix5RUFBdUI7QUFDcEYsRUFBRSxnREFBUztBQUNYLFdBQVcsaUVBQWU7QUFDMUIsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsbUJBQW1CLGdHQUF5QjtBQUM1QztBQUNBO0FBQ0E7O0FBRXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsSGlzdG9yeVBsdWdpbi5kZXYubWpzP2QwNDkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5pbXBvcnQgeyB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0IH0gZnJvbSAnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCc7XG5pbXBvcnQgeyBjcmVhdGVFbXB0eUhpc3RvcnlTdGF0ZSwgcmVnaXN0ZXJIaXN0b3J5IH0gZnJvbSAnQGxleGljYWwvaGlzdG9yeSc7XG5leHBvcnQgeyBjcmVhdGVFbXB0eUhpc3RvcnlTdGF0ZSB9IGZyb20gJ0BsZXhpY2FsL2hpc3RvcnknO1xuaW1wb3J0IHsgdXNlTWVtbywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmZ1bmN0aW9uIHVzZUhpc3RvcnkoZWRpdG9yLCBleHRlcm5hbEhpc3RvcnlTdGF0ZSwgZGVsYXkgPSAxMDAwKSB7XG4gIGNvbnN0IGhpc3RvcnlTdGF0ZSA9IHVzZU1lbW8oKCkgPT4gZXh0ZXJuYWxIaXN0b3J5U3RhdGUgfHwgY3JlYXRlRW1wdHlIaXN0b3J5U3RhdGUoKSwgW2V4dGVybmFsSGlzdG9yeVN0YXRlXSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuIHJlZ2lzdGVySGlzdG9yeShlZGl0b3IsIGhpc3RvcnlTdGF0ZSwgZGVsYXkpO1xuICB9LCBbZGVsYXksIGVkaXRvciwgaGlzdG9yeVN0YXRlXSk7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZnVuY3Rpb24gSGlzdG9yeVBsdWdpbih7XG4gIGV4dGVybmFsSGlzdG9yeVN0YXRlXG59KSB7XG4gIGNvbnN0IFtlZGl0b3JdID0gdXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCgpO1xuICB1c2VIaXN0b3J5KGVkaXRvciwgZXh0ZXJuYWxIaXN0b3J5U3RhdGUpO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IHsgSGlzdG9yeVBsdWdpbiB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalHistoryPlugin.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalHorizontalRuleNode.dev.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalHorizontalRuleNode.dev.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $createHorizontalRuleNode: () => (/* binding */ $createHorizontalRuleNode),\n/* harmony export */   $isHorizontalRuleNode: () => (/* binding */ $isHorizontalRuleNode),\n/* harmony export */   HorizontalRuleNode: () => (/* binding */ HorizontalRuleNode),\n/* harmony export */   INSERT_HORIZONTAL_RULE_COMMAND: () => (/* binding */ INSERT_HORIZONTAL_RULE_COMMAND)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var _lexical_react_useLexicalNodeSelection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lexical/react/useLexicalNodeSelection */ \"(app-pages-browser)/./node_modules/@lexical/react/useLexicalNodeSelection.dev.mjs\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst INSERT_HORIZONTAL_RULE_COMMAND = (0,lexical__WEBPACK_IMPORTED_MODULE_1__.createCommand)('INSERT_HORIZONTAL_RULE_COMMAND');\nfunction HorizontalRuleComponent({\n  nodeKey\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_2__.useLexicalComposerContext)();\n  const [isSelected, setSelected, clearSelection] = (0,_lexical_react_useLexicalNodeSelection__WEBPACK_IMPORTED_MODULE_3__.useLexicalNodeSelection)(nodeKey);\n  const $onDelete = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(event => {\n    if (isSelected && (0,lexical__WEBPACK_IMPORTED_MODULE_1__.$isNodeSelection)((0,lexical__WEBPACK_IMPORTED_MODULE_1__.$getSelection)())) {\n      event.preventDefault();\n      const node = (0,lexical__WEBPACK_IMPORTED_MODULE_1__.$getNodeByKey)(nodeKey);\n      if ($isHorizontalRuleNode(node)) {\n        node.remove();\n        return true;\n      }\n    }\n    return false;\n  }, [isSelected, nodeKey]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_4__.mergeRegister)(editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_1__.CLICK_COMMAND, event => {\n      const hrElem = editor.getElementByKey(nodeKey);\n      if (event.target === hrElem) {\n        if (!event.shiftKey) {\n          clearSelection();\n        }\n        setSelected(!isSelected);\n        return true;\n      }\n      return false;\n    }, lexical__WEBPACK_IMPORTED_MODULE_1__.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_1__.KEY_DELETE_COMMAND, $onDelete, lexical__WEBPACK_IMPORTED_MODULE_1__.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_1__.KEY_BACKSPACE_COMMAND, $onDelete, lexical__WEBPACK_IMPORTED_MODULE_1__.COMMAND_PRIORITY_LOW));\n  }, [clearSelection, editor, isSelected, nodeKey, $onDelete, setSelected]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const hrElem = editor.getElementByKey(nodeKey);\n    if (hrElem !== null) {\n      hrElem.className = isSelected ? 'selected' : '';\n    }\n  }, [editor, isSelected, nodeKey]);\n  return null;\n}\nclass HorizontalRuleNode extends lexical__WEBPACK_IMPORTED_MODULE_1__.DecoratorNode {\n  static getType() {\n    return 'horizontalrule';\n  }\n  static clone(node) {\n    return new HorizontalRuleNode(node.__key);\n  }\n  static importJSON(serializedNode) {\n    return $createHorizontalRuleNode();\n  }\n  static importDOM() {\n    return {\n      hr: () => ({\n        conversion: $convertHorizontalRuleElement,\n        priority: 0\n      })\n    };\n  }\n  exportJSON() {\n    return {\n      type: 'horizontalrule',\n      version: 1\n    };\n  }\n  exportDOM() {\n    return {\n      element: document.createElement('hr')\n    };\n  }\n  createDOM() {\n    return document.createElement('hr');\n  }\n  getTextContent() {\n    return '\\n';\n  }\n  isInline() {\n    return false;\n  }\n  updateDOM() {\n    return false;\n  }\n  decorate() {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(HorizontalRuleComponent, {\n      nodeKey: this.__key\n    });\n  }\n}\nfunction $convertHorizontalRuleElement() {\n  return {\n    node: $createHorizontalRuleNode()\n  };\n}\nfunction $createHorizontalRuleNode() {\n  return (0,lexical__WEBPACK_IMPORTED_MODULE_1__.$applyNodeReplacement)(new HorizontalRuleNode());\n}\nfunction $isHorizontalRuleNode(node) {\n  return node instanceof HorizontalRuleNode;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsSG9yaXpvbnRhbFJ1bGVOb2RlLmRldi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWtGO0FBQ0Q7QUFDbEM7QUFDK0o7QUFDL0s7QUFDZ0I7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVDQUF1QyxzREFBYTtBQUNwRDtBQUNBO0FBQ0EsQ0FBQztBQUNELG1CQUFtQixnR0FBeUI7QUFDNUMsb0RBQW9ELCtGQUF1QjtBQUMzRSxvQkFBb0Isa0RBQVc7QUFDL0Isc0JBQXNCLHlEQUFnQixDQUFDLHNEQUFhO0FBQ3BEO0FBQ0EsbUJBQW1CLHNEQUFhO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFLGdEQUFTO0FBQ1gsV0FBVyw2REFBYSx3QkFBd0Isa0RBQWE7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxFQUFFLHlEQUFvQiwwQkFBMEIsdURBQWtCLGFBQWEseURBQW9CLDBCQUEwQiwwREFBcUIsYUFBYSx5REFBb0I7QUFDeEwsR0FBRztBQUNILEVBQUUsZ0RBQVM7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsaUNBQWlDLGtEQUFhO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnREFBbUI7QUFDM0M7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsOERBQXFCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVnSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEhvcml6b250YWxSdWxlTm9kZS5kZXYubWpzP2FkZmMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5pbXBvcnQgeyB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0IH0gZnJvbSAnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VMZXhpY2FsTm9kZVNlbGVjdGlvbiB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L3VzZUxleGljYWxOb2RlU2VsZWN0aW9uJztcbmltcG9ydCB7IG1lcmdlUmVnaXN0ZXIgfSBmcm9tICdAbGV4aWNhbC91dGlscyc7XG5pbXBvcnQgeyBjcmVhdGVDb21tYW5kLCBEZWNvcmF0b3JOb2RlLCAkYXBwbHlOb2RlUmVwbGFjZW1lbnQsICRpc05vZGVTZWxlY3Rpb24sICRnZXRTZWxlY3Rpb24sICRnZXROb2RlQnlLZXksIENMSUNLX0NPTU1BTkQsIENPTU1BTkRfUFJJT1JJVFlfTE9XLCBLRVlfREVMRVRFX0NPTU1BTkQsIEtFWV9CQUNLU1BBQ0VfQ09NTUFORCB9IGZyb20gJ2xleGljYWwnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5jb25zdCBJTlNFUlRfSE9SSVpPTlRBTF9SVUxFX0NPTU1BTkQgPSBjcmVhdGVDb21tYW5kKCdJTlNFUlRfSE9SSVpPTlRBTF9SVUxFX0NPTU1BTkQnKTtcbmZ1bmN0aW9uIEhvcml6b250YWxSdWxlQ29tcG9uZW50KHtcbiAgbm9kZUtleVxufSkge1xuICBjb25zdCBbZWRpdG9yXSA9IHVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKTtcbiAgY29uc3QgW2lzU2VsZWN0ZWQsIHNldFNlbGVjdGVkLCBjbGVhclNlbGVjdGlvbl0gPSB1c2VMZXhpY2FsTm9kZVNlbGVjdGlvbihub2RlS2V5KTtcbiAgY29uc3QgJG9uRGVsZXRlID0gdXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGlmIChpc1NlbGVjdGVkICYmICRpc05vZGVTZWxlY3Rpb24oJGdldFNlbGVjdGlvbigpKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IG5vZGUgPSAkZ2V0Tm9kZUJ5S2V5KG5vZGVLZXkpO1xuICAgICAgaWYgKCRpc0hvcml6b250YWxSdWxlTm9kZShub2RlKSkge1xuICAgICAgICBub2RlLnJlbW92ZSgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LCBbaXNTZWxlY3RlZCwgbm9kZUtleV0pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiBtZXJnZVJlZ2lzdGVyKGVkaXRvci5yZWdpc3RlckNvbW1hbmQoQ0xJQ0tfQ09NTUFORCwgZXZlbnQgPT4ge1xuICAgICAgY29uc3QgaHJFbGVtID0gZWRpdG9yLmdldEVsZW1lbnRCeUtleShub2RlS2V5KTtcbiAgICAgIGlmIChldmVudC50YXJnZXQgPT09IGhyRWxlbSkge1xuICAgICAgICBpZiAoIWV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRTZWxlY3RlZCghaXNTZWxlY3RlZCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sIENPTU1BTkRfUFJJT1JJVFlfTE9XKSwgZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZChLRVlfREVMRVRFX0NPTU1BTkQsICRvbkRlbGV0ZSwgQ09NTUFORF9QUklPUklUWV9MT1cpLCBlZGl0b3IucmVnaXN0ZXJDb21tYW5kKEtFWV9CQUNLU1BBQ0VfQ09NTUFORCwgJG9uRGVsZXRlLCBDT01NQU5EX1BSSU9SSVRZX0xPVykpO1xuICB9LCBbY2xlYXJTZWxlY3Rpb24sIGVkaXRvciwgaXNTZWxlY3RlZCwgbm9kZUtleSwgJG9uRGVsZXRlLCBzZXRTZWxlY3RlZF0pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhyRWxlbSA9IGVkaXRvci5nZXRFbGVtZW50QnlLZXkobm9kZUtleSk7XG4gICAgaWYgKGhyRWxlbSAhPT0gbnVsbCkge1xuICAgICAgaHJFbGVtLmNsYXNzTmFtZSA9IGlzU2VsZWN0ZWQgPyAnc2VsZWN0ZWQnIDogJyc7XG4gICAgfVxuICB9LCBbZWRpdG9yLCBpc1NlbGVjdGVkLCBub2RlS2V5XSk7XG4gIHJldHVybiBudWxsO1xufVxuY2xhc3MgSG9yaXpvbnRhbFJ1bGVOb2RlIGV4dGVuZHMgRGVjb3JhdG9yTm9kZSB7XG4gIHN0YXRpYyBnZXRUeXBlKCkge1xuICAgIHJldHVybiAnaG9yaXpvbnRhbHJ1bGUnO1xuICB9XG4gIHN0YXRpYyBjbG9uZShub2RlKSB7XG4gICAgcmV0dXJuIG5ldyBIb3Jpem9udGFsUnVsZU5vZGUobm9kZS5fX2tleSk7XG4gIH1cbiAgc3RhdGljIGltcG9ydEpTT04oc2VyaWFsaXplZE5vZGUpIHtcbiAgICByZXR1cm4gJGNyZWF0ZUhvcml6b250YWxSdWxlTm9kZSgpO1xuICB9XG4gIHN0YXRpYyBpbXBvcnRET00oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhyOiAoKSA9PiAoe1xuICAgICAgICBjb252ZXJzaW9uOiAkY29udmVydEhvcml6b250YWxSdWxlRWxlbWVudCxcbiAgICAgICAgcHJpb3JpdHk6IDBcbiAgICAgIH0pXG4gICAgfTtcbiAgfVxuICBleHBvcnRKU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnaG9yaXpvbnRhbHJ1bGUnLFxuICAgICAgdmVyc2lvbjogMVxuICAgIH07XG4gIH1cbiAgZXhwb3J0RE9NKCkge1xuICAgIHJldHVybiB7XG4gICAgICBlbGVtZW50OiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdocicpXG4gICAgfTtcbiAgfVxuICBjcmVhdGVET00oKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2hyJyk7XG4gIH1cbiAgZ2V0VGV4dENvbnRlbnQoKSB7XG4gICAgcmV0dXJuICdcXG4nO1xuICB9XG4gIGlzSW5saW5lKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB1cGRhdGVET00oKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGRlY29yYXRlKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChIb3Jpem9udGFsUnVsZUNvbXBvbmVudCwge1xuICAgICAgbm9kZUtleTogdGhpcy5fX2tleVxuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiAkY29udmVydEhvcml6b250YWxSdWxlRWxlbWVudCgpIHtcbiAgcmV0dXJuIHtcbiAgICBub2RlOiAkY3JlYXRlSG9yaXpvbnRhbFJ1bGVOb2RlKClcbiAgfTtcbn1cbmZ1bmN0aW9uICRjcmVhdGVIb3Jpem9udGFsUnVsZU5vZGUoKSB7XG4gIHJldHVybiAkYXBwbHlOb2RlUmVwbGFjZW1lbnQobmV3IEhvcml6b250YWxSdWxlTm9kZSgpKTtcbn1cbmZ1bmN0aW9uICRpc0hvcml6b250YWxSdWxlTm9kZShub2RlKSB7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgSG9yaXpvbnRhbFJ1bGVOb2RlO1xufVxuXG5leHBvcnQgeyAkY3JlYXRlSG9yaXpvbnRhbFJ1bGVOb2RlLCAkaXNIb3Jpem9udGFsUnVsZU5vZGUsIEhvcml6b250YWxSdWxlTm9kZSwgSU5TRVJUX0hPUklaT05UQUxfUlVMRV9DT01NQU5EIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalHorizontalRuleNode.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalMarkdownShortcutPlugin.dev.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalMarkdownShortcutPlugin.dev.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_TRANSFORMERS: () => (/* binding */ DEFAULT_TRANSFORMERS),\n/* harmony export */   MarkdownShortcutPlugin: () => (/* binding */ MarkdownShortcutPlugin)\n/* harmony export */ });\n/* harmony import */ var _lexical_markdown__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lexical/markdown */ \"(app-pages-browser)/./node_modules/@lexical/markdown/LexicalMarkdown.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalHorizontalRuleNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lexical/react/LexicalHorizontalRuleNode */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalHorizontalRuleNode.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst HR = {\n  dependencies: [_lexical_react_LexicalHorizontalRuleNode__WEBPACK_IMPORTED_MODULE_1__.HorizontalRuleNode],\n  export: node => {\n    return (0,_lexical_react_LexicalHorizontalRuleNode__WEBPACK_IMPORTED_MODULE_1__.$isHorizontalRuleNode)(node) ? '***' : null;\n  },\n  regExp: /^(---|\\*\\*\\*|___)\\s?$/,\n  replace: (parentNode, _1, _2, isImport) => {\n    const line = (0,_lexical_react_LexicalHorizontalRuleNode__WEBPACK_IMPORTED_MODULE_1__.$createHorizontalRuleNode)();\n\n    // TODO: Get rid of isImport flag\n    if (isImport || parentNode.getNextSibling() != null) {\n      parentNode.replace(line);\n    } else {\n      parentNode.insertBefore(line);\n    }\n    line.selectNext();\n  },\n  type: 'element'\n};\nconst DEFAULT_TRANSFORMERS = [HR, ..._lexical_markdown__WEBPACK_IMPORTED_MODULE_2__.TRANSFORMERS];\nfunction MarkdownShortcutPlugin({\n  transformers = DEFAULT_TRANSFORMERS\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_3__.useLexicalComposerContext)();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    return (0,_lexical_markdown__WEBPACK_IMPORTED_MODULE_2__.registerMarkdownShortcuts)(editor, transformers);\n  }, [editor, transformers]);\n  return null;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsTWFya2Rvd25TaG9ydGN1dFBsdWdpbi5kZXYubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU0RTtBQUNNO0FBQzhDO0FBQzlGOztBQUVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQix3RkFBa0I7QUFDbkM7QUFDQSxXQUFXLCtGQUFxQjtBQUNoQyxHQUFHO0FBQ0g7QUFDQTtBQUNBLGlCQUFpQixtR0FBeUI7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLHFDQUFxQywyREFBWTtBQUNqRDtBQUNBO0FBQ0EsQ0FBQztBQUNELG1CQUFtQixnR0FBeUI7QUFDNUMsRUFBRSxnREFBUztBQUNYLFdBQVcsNEVBQXlCO0FBQ3BDLEdBQUc7QUFDSDtBQUNBOztBQUV3RCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbE1hcmtkb3duU2hvcnRjdXRQbHVnaW4uZGV2Lm1qcz9jMDExIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuaW1wb3J0IHsgVFJBTlNGT1JNRVJTLCByZWdpc3Rlck1hcmtkb3duU2hvcnRjdXRzIH0gZnJvbSAnQGxleGljYWwvbWFya2Rvd24nO1xuaW1wb3J0IHsgdXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQnO1xuaW1wb3J0IHsgSG9yaXpvbnRhbFJ1bGVOb2RlLCAkaXNIb3Jpem9udGFsUnVsZU5vZGUsICRjcmVhdGVIb3Jpem9udGFsUnVsZU5vZGUgfSBmcm9tICdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsSG9yaXpvbnRhbFJ1bGVOb2RlJztcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5jb25zdCBIUiA9IHtcbiAgZGVwZW5kZW5jaWVzOiBbSG9yaXpvbnRhbFJ1bGVOb2RlXSxcbiAgZXhwb3J0OiBub2RlID0+IHtcbiAgICByZXR1cm4gJGlzSG9yaXpvbnRhbFJ1bGVOb2RlKG5vZGUpID8gJyoqKicgOiBudWxsO1xuICB9LFxuICByZWdFeHA6IC9eKC0tLXxcXCpcXCpcXCp8X19fKVxccz8kLyxcbiAgcmVwbGFjZTogKHBhcmVudE5vZGUsIF8xLCBfMiwgaXNJbXBvcnQpID0+IHtcbiAgICBjb25zdCBsaW5lID0gJGNyZWF0ZUhvcml6b250YWxSdWxlTm9kZSgpO1xuXG4gICAgLy8gVE9ETzogR2V0IHJpZCBvZiBpc0ltcG9ydCBmbGFnXG4gICAgaWYgKGlzSW1wb3J0IHx8IHBhcmVudE5vZGUuZ2V0TmV4dFNpYmxpbmcoKSAhPSBudWxsKSB7XG4gICAgICBwYXJlbnROb2RlLnJlcGxhY2UobGluZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGxpbmUpO1xuICAgIH1cbiAgICBsaW5lLnNlbGVjdE5leHQoKTtcbiAgfSxcbiAgdHlwZTogJ2VsZW1lbnQnXG59O1xuY29uc3QgREVGQVVMVF9UUkFOU0ZPUk1FUlMgPSBbSFIsIC4uLlRSQU5TRk9STUVSU107XG5mdW5jdGlvbiBNYXJrZG93blNob3J0Y3V0UGx1Z2luKHtcbiAgdHJhbnNmb3JtZXJzID0gREVGQVVMVF9UUkFOU0ZPUk1FUlNcbn0pIHtcbiAgY29uc3QgW2VkaXRvcl0gPSB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0KCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuIHJlZ2lzdGVyTWFya2Rvd25TaG9ydGN1dHMoZWRpdG9yLCB0cmFuc2Zvcm1lcnMpO1xuICB9LCBbZWRpdG9yLCB0cmFuc2Zvcm1lcnNdKTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCB7IERFRkFVTFRfVFJBTlNGT1JNRVJTLCBNYXJrZG93blNob3J0Y3V0UGx1Z2luIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalMarkdownShortcutPlugin.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalOnChangePlugin.dev.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalOnChangePlugin.dev.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnChangePlugin: () => (/* binding */ OnChangePlugin)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst useLayoutEffectImpl = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction OnChangePlugin({\n  ignoreHistoryMergeTagChange = true,\n  ignoreSelectionChange = false,\n  onChange\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_1__.useLexicalComposerContext)();\n  useLayoutEffectImpl(() => {\n    if (onChange) {\n      return editor.registerUpdateListener(({\n        editorState,\n        dirtyElements,\n        dirtyLeaves,\n        prevEditorState,\n        tags\n      }) => {\n        if (ignoreSelectionChange && dirtyElements.size === 0 && dirtyLeaves.size === 0 || ignoreHistoryMergeTagChange && tags.has('history-merge') || prevEditorState.isEmpty()) {\n          return;\n        }\n        onChange(editorState, editor, tags);\n      });\n    }\n  }, [editor, ignoreHistoryMergeTagChange, ignoreSelectionChange, onChange]);\n  return null;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsT25DaGFuZ2VQbHVnaW4uZGV2Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFa0Y7QUFDL0I7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBDQUEwQyxrREFBZSxHQUFHLDRDQUFTOztBQUVyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxtQkFBbUIsZ0dBQXlCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFMEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxPbkNoYW5nZVBsdWdpbi5kZXYubWpzP2JlNWQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5pbXBvcnQgeyB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0IH0gZnJvbSAnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5jb25zdCBDQU5fVVNFX0RPTSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuY29uc3QgdXNlTGF5b3V0RWZmZWN0SW1wbCA9IENBTl9VU0VfRE9NID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmZ1bmN0aW9uIE9uQ2hhbmdlUGx1Z2luKHtcbiAgaWdub3JlSGlzdG9yeU1lcmdlVGFnQ2hhbmdlID0gdHJ1ZSxcbiAgaWdub3JlU2VsZWN0aW9uQ2hhbmdlID0gZmFsc2UsXG4gIG9uQ2hhbmdlXG59KSB7XG4gIGNvbnN0IFtlZGl0b3JdID0gdXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCgpO1xuICB1c2VMYXlvdXRFZmZlY3RJbXBsKCgpID0+IHtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIHJldHVybiBlZGl0b3IucmVnaXN0ZXJVcGRhdGVMaXN0ZW5lcigoe1xuICAgICAgICBlZGl0b3JTdGF0ZSxcbiAgICAgICAgZGlydHlFbGVtZW50cyxcbiAgICAgICAgZGlydHlMZWF2ZXMsXG4gICAgICAgIHByZXZFZGl0b3JTdGF0ZSxcbiAgICAgICAgdGFnc1xuICAgICAgfSkgPT4ge1xuICAgICAgICBpZiAoaWdub3JlU2VsZWN0aW9uQ2hhbmdlICYmIGRpcnR5RWxlbWVudHMuc2l6ZSA9PT0gMCAmJiBkaXJ0eUxlYXZlcy5zaXplID09PSAwIHx8IGlnbm9yZUhpc3RvcnlNZXJnZVRhZ0NoYW5nZSAmJiB0YWdzLmhhcygnaGlzdG9yeS1tZXJnZScpIHx8IHByZXZFZGl0b3JTdGF0ZS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgb25DaGFuZ2UoZWRpdG9yU3RhdGUsIGVkaXRvciwgdGFncyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtlZGl0b3IsIGlnbm9yZUhpc3RvcnlNZXJnZVRhZ0NoYW5nZSwgaWdub3JlU2VsZWN0aW9uQ2hhbmdlLCBvbkNoYW5nZV0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IHsgT25DaGFuZ2VQbHVnaW4gfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalOnChangePlugin.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalRichTextPlugin.dev.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalRichTextPlugin.dev.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RichTextPlugin: () => (/* binding */ RichTextPlugin)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var _lexical_react_useLexicalEditable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @lexical/react/useLexicalEditable */ \"(app-pages-browser)/./node_modules/@lexical/react/useLexicalEditable.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _lexical_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lexical/text */ \"(app-pages-browser)/./node_modules/@lexical/text/LexicalText.dev.mjs\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _lexical_dragon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lexical/dragon */ \"(app-pages-browser)/./node_modules/@lexical/dragon/LexicalDragon.dev.mjs\");\n/* harmony import */ var _lexical_rich_text__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lexical/rich-text */ \"(app-pages-browser)/./node_modules/@lexical/rich-text/LexicalRichText.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst useLayoutEffectImpl = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction canShowPlaceholderFromCurrentEditorState(editor) {\n  const currentCanShowPlaceholder = editor.getEditorState().read((0,_lexical_text__WEBPACK_IMPORTED_MODULE_2__.$canShowPlaceholderCurry)(editor.isComposing()));\n  return currentCanShowPlaceholder;\n}\nfunction useCanShowPlaceholder(editor) {\n  const [canShowPlaceholder, setCanShowPlaceholder] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => canShowPlaceholderFromCurrentEditorState(editor));\n  useLayoutEffectImpl(() => {\n    function resetCanShowPlaceholder() {\n      const currentCanShowPlaceholder = canShowPlaceholderFromCurrentEditorState(editor);\n      setCanShowPlaceholder(currentCanShowPlaceholder);\n    }\n    resetCanShowPlaceholder();\n    return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_3__.mergeRegister)(editor.registerUpdateListener(() => {\n      resetCanShowPlaceholder();\n    }), editor.registerEditableListener(() => {\n      resetCanShowPlaceholder();\n    }));\n  }, [editor]);\n  return canShowPlaceholder;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useDecorators(editor, ErrorBoundary) {\n  const [decorators, setDecorators] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => editor.getDecorators());\n\n  // Subscribe to changes\n  useLayoutEffectImpl(() => {\n    return editor.registerDecoratorListener(nextDecorators => {\n      (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(() => {\n        setDecorators(nextDecorators);\n      });\n    });\n  }, [editor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    // If the content editable mounts before the subscription is added, then\n    // nothing will be rendered on initial pass. We can get around that by\n    // ensuring that we set the value.\n    setDecorators(editor.getDecorators());\n  }, [editor]);\n\n  // Return decorators defined as React Portals\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const decoratedPortals = [];\n    const decoratorKeys = Object.keys(decorators);\n    for (let i = 0; i < decoratorKeys.length; i++) {\n      const nodeKey = decoratorKeys[i];\n      const reactDecorator = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(ErrorBoundary, {\n        onError: e => editor._onError(e)\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n        fallback: null\n      }, decorators[nodeKey]));\n      const element = editor.getElementByKey(nodeKey);\n      if (element !== null) {\n        decoratedPortals.push( /*#__PURE__*/(0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(reactDecorator, element, nodeKey));\n      }\n    }\n    return decoratedPortals;\n  }, [ErrorBoundary, decorators, editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useRichTextSetup(editor) {\n  useLayoutEffectImpl(() => {\n    return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_3__.mergeRegister)((0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_4__.registerRichText)(editor), (0,_lexical_dragon__WEBPACK_IMPORTED_MODULE_5__.registerDragonSupport)(editor));\n\n    // We only do this for init\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction RichTextPlugin({\n  contentEditable,\n  placeholder,\n  ErrorBoundary\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_6__.useLexicalComposerContext)();\n  const decorators = useDecorators(editor, ErrorBoundary);\n  useRichTextSetup(editor);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, contentEditable, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Placeholder, {\n    content: placeholder\n  }), decorators);\n}\nfunction Placeholder({\n  content\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_6__.useLexicalComposerContext)();\n  const showPlaceholder = useCanShowPlaceholder(editor);\n  const editable = (0,_lexical_react_useLexicalEditable__WEBPACK_IMPORTED_MODULE_7__[\"default\"])();\n  if (!showPlaceholder) {\n    return null;\n  }\n  if (typeof content === 'function') {\n    return content(editable);\n  } else {\n    return content;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalRichTextPlugin.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalTabIndentationPlugin.dev.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalTabIndentationPlugin.dev.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TabIndentationPlugin: () => (/* binding */ TabIndentationPlugin),\n/* harmony export */   registerTabIndentation: () => (/* binding */ registerTabIndentation)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $indentOverTab(selection) {\n  // const handled = new Set();\n  const nodes = selection.getNodes();\n  const canIndentBlockNodes = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_1__.$filter)(nodes, node => {\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_2__.$isBlockElementNode)(node) && node.canIndent()) {\n      return node;\n    }\n    return null;\n  });\n  // 1. If selection spans across canIndent block nodes: indent\n  if (canIndentBlockNodes.length > 0) {\n    return true;\n  }\n  // 2. If first (anchor/focus) is at block start: indent\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const first = focus.isBefore(anchor) ? focus : anchor;\n  const firstNode = first.getNode();\n  const firstBlock = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_1__.$getNearestBlockElementAncestorOrThrow)(firstNode);\n  if (firstBlock.canIndent()) {\n    const firstBlockKey = firstBlock.getKey();\n    let selectionAtStart = (0,lexical__WEBPACK_IMPORTED_MODULE_2__.$createRangeSelection)();\n    selectionAtStart.anchor.set(firstBlockKey, 0, 'element');\n    selectionAtStart.focus.set(firstBlockKey, 0, 'element');\n    selectionAtStart = (0,lexical__WEBPACK_IMPORTED_MODULE_2__.$normalizeSelection__EXPERIMENTAL)(selectionAtStart);\n    if (selectionAtStart.anchor.is(first)) {\n      return true;\n    }\n  }\n  // 3. Else: tab\n  return false;\n}\nfunction registerTabIndentation(editor) {\n  return editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_2__.KEY_TAB_COMMAND, event => {\n    const selection = (0,lexical__WEBPACK_IMPORTED_MODULE_2__.$getSelection)();\n    if (!(0,lexical__WEBPACK_IMPORTED_MODULE_2__.$isRangeSelection)(selection)) {\n      return false;\n    }\n    event.preventDefault();\n    const command = $indentOverTab(selection) ? event.shiftKey ? lexical__WEBPACK_IMPORTED_MODULE_2__.OUTDENT_CONTENT_COMMAND : lexical__WEBPACK_IMPORTED_MODULE_2__.INDENT_CONTENT_COMMAND : lexical__WEBPACK_IMPORTED_MODULE_2__.INSERT_TAB_COMMAND;\n    return editor.dispatchCommand(command, undefined);\n  }, lexical__WEBPACK_IMPORTED_MODULE_2__.COMMAND_PRIORITY_EDITOR);\n}\n\n/**\n * This plugin adds the ability to indent content using the tab key. Generally, we don't\n * recommend using this plugin as it could negatively affect acessibility for keyboard\n * users, causing focus to become trapped within the editor.\n */\nfunction TabIndentationPlugin() {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_3__.useLexicalComposerContext)();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    return registerTabIndentation(editor);\n  });\n  return null;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsVGFiSW5kZW50YXRpb25QbHVnaW4uZGV2Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFa0Y7QUFDRDtBQUN3SztBQUN2Tjs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHVEQUFPO0FBQ3JDLFFBQVEsNERBQW1CO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsc0ZBQXNDO0FBQzNEO0FBQ0E7QUFDQSwyQkFBMkIsOERBQXFCO0FBQ2hEO0FBQ0E7QUFDQSx1QkFBdUIsMEVBQWlDO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0Msb0RBQWU7QUFDL0Msc0JBQXNCLHNEQUFhO0FBQ25DLFNBQVMsMERBQWlCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSw0REFBdUIsR0FBRywyREFBc0IsR0FBRyx1REFBa0I7QUFDdEk7QUFDQSxHQUFHLEVBQUUsNERBQXVCO0FBQzVCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixnR0FBeUI7QUFDNUMsRUFBRSxnREFBUztBQUNYO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRXdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsVGFiSW5kZW50YXRpb25QbHVnaW4uZGV2Lm1qcz85MjkyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuaW1wb3J0IHsgdXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQnO1xuaW1wb3J0IHsgJGZpbHRlciwgJGdldE5lYXJlc3RCbG9ja0VsZW1lbnRBbmNlc3Rvck9yVGhyb3cgfSBmcm9tICdAbGV4aWNhbC91dGlscyc7XG5pbXBvcnQgeyBLRVlfVEFCX0NPTU1BTkQsICRnZXRTZWxlY3Rpb24sICRpc1JhbmdlU2VsZWN0aW9uLCBPVVRERU5UX0NPTlRFTlRfQ09NTUFORCwgSU5ERU5UX0NPTlRFTlRfQ09NTUFORCwgSU5TRVJUX1RBQl9DT01NQU5ELCBDT01NQU5EX1BSSU9SSVRZX0VESVRPUiwgJGlzQmxvY2tFbGVtZW50Tm9kZSwgJGNyZWF0ZVJhbmdlU2VsZWN0aW9uLCAkbm9ybWFsaXplU2VsZWN0aW9uX19FWFBFUklNRU5UQUwgfSBmcm9tICdsZXhpY2FsJztcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5mdW5jdGlvbiAkaW5kZW50T3ZlclRhYihzZWxlY3Rpb24pIHtcbiAgLy8gY29uc3QgaGFuZGxlZCA9IG5ldyBTZXQoKTtcbiAgY29uc3Qgbm9kZXMgPSBzZWxlY3Rpb24uZ2V0Tm9kZXMoKTtcbiAgY29uc3QgY2FuSW5kZW50QmxvY2tOb2RlcyA9ICRmaWx0ZXIobm9kZXMsIG5vZGUgPT4ge1xuICAgIGlmICgkaXNCbG9ja0VsZW1lbnROb2RlKG5vZGUpICYmIG5vZGUuY2FuSW5kZW50KCkpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSk7XG4gIC8vIDEuIElmIHNlbGVjdGlvbiBzcGFucyBhY3Jvc3MgY2FuSW5kZW50IGJsb2NrIG5vZGVzOiBpbmRlbnRcbiAgaWYgKGNhbkluZGVudEJsb2NrTm9kZXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIDIuIElmIGZpcnN0IChhbmNob3IvZm9jdXMpIGlzIGF0IGJsb2NrIHN0YXJ0OiBpbmRlbnRcbiAgY29uc3QgYW5jaG9yID0gc2VsZWN0aW9uLmFuY2hvcjtcbiAgY29uc3QgZm9jdXMgPSBzZWxlY3Rpb24uZm9jdXM7XG4gIGNvbnN0IGZpcnN0ID0gZm9jdXMuaXNCZWZvcmUoYW5jaG9yKSA/IGZvY3VzIDogYW5jaG9yO1xuICBjb25zdCBmaXJzdE5vZGUgPSBmaXJzdC5nZXROb2RlKCk7XG4gIGNvbnN0IGZpcnN0QmxvY2sgPSAkZ2V0TmVhcmVzdEJsb2NrRWxlbWVudEFuY2VzdG9yT3JUaHJvdyhmaXJzdE5vZGUpO1xuICBpZiAoZmlyc3RCbG9jay5jYW5JbmRlbnQoKSkge1xuICAgIGNvbnN0IGZpcnN0QmxvY2tLZXkgPSBmaXJzdEJsb2NrLmdldEtleSgpO1xuICAgIGxldCBzZWxlY3Rpb25BdFN0YXJ0ID0gJGNyZWF0ZVJhbmdlU2VsZWN0aW9uKCk7XG4gICAgc2VsZWN0aW9uQXRTdGFydC5hbmNob3Iuc2V0KGZpcnN0QmxvY2tLZXksIDAsICdlbGVtZW50Jyk7XG4gICAgc2VsZWN0aW9uQXRTdGFydC5mb2N1cy5zZXQoZmlyc3RCbG9ja0tleSwgMCwgJ2VsZW1lbnQnKTtcbiAgICBzZWxlY3Rpb25BdFN0YXJ0ID0gJG5vcm1hbGl6ZVNlbGVjdGlvbl9fRVhQRVJJTUVOVEFMKHNlbGVjdGlvbkF0U3RhcnQpO1xuICAgIGlmIChzZWxlY3Rpb25BdFN0YXJ0LmFuY2hvci5pcyhmaXJzdCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICAvLyAzLiBFbHNlOiB0YWJcbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gcmVnaXN0ZXJUYWJJbmRlbnRhdGlvbihlZGl0b3IpIHtcbiAgcmV0dXJuIGVkaXRvci5yZWdpc3RlckNvbW1hbmQoS0VZX1RBQl9DT01NQU5ELCBldmVudCA9PiB7XG4gICAgY29uc3Qgc2VsZWN0aW9uID0gJGdldFNlbGVjdGlvbigpO1xuICAgIGlmICghJGlzUmFuZ2VTZWxlY3Rpb24oc2VsZWN0aW9uKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGNvbW1hbmQgPSAkaW5kZW50T3ZlclRhYihzZWxlY3Rpb24pID8gZXZlbnQuc2hpZnRLZXkgPyBPVVRERU5UX0NPTlRFTlRfQ09NTUFORCA6IElOREVOVF9DT05URU5UX0NPTU1BTkQgOiBJTlNFUlRfVEFCX0NPTU1BTkQ7XG4gICAgcmV0dXJuIGVkaXRvci5kaXNwYXRjaENvbW1hbmQoY29tbWFuZCwgdW5kZWZpbmVkKTtcbiAgfSwgQ09NTUFORF9QUklPUklUWV9FRElUT1IpO1xufVxuXG4vKipcbiAqIFRoaXMgcGx1Z2luIGFkZHMgdGhlIGFiaWxpdHkgdG8gaW5kZW50IGNvbnRlbnQgdXNpbmcgdGhlIHRhYiBrZXkuIEdlbmVyYWxseSwgd2UgZG9uJ3RcbiAqIHJlY29tbWVuZCB1c2luZyB0aGlzIHBsdWdpbiBhcyBpdCBjb3VsZCBuZWdhdGl2ZWx5IGFmZmVjdCBhY2Vzc2liaWxpdHkgZm9yIGtleWJvYXJkXG4gKiB1c2VycywgY2F1c2luZyBmb2N1cyB0byBiZWNvbWUgdHJhcHBlZCB3aXRoaW4gdGhlIGVkaXRvci5cbiAqL1xuZnVuY3Rpb24gVGFiSW5kZW50YXRpb25QbHVnaW4oKSB7XG4gIGNvbnN0IFtlZGl0b3JdID0gdXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCgpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiByZWdpc3RlclRhYkluZGVudGF0aW9uKGVkaXRvcik7XG4gIH0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IHsgVGFiSW5kZW50YXRpb25QbHVnaW4sIHJlZ2lzdGVyVGFiSW5kZW50YXRpb24gfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalTabIndentationPlugin.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/useLexicalEditable.dev.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@lexical/react/useLexicalEditable.dev.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ useLexicalEditable)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst useLayoutEffectImpl = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Shortcut to Lexical subscriptions when values are used for render.\n */\nfunction useLexicalSubscription(subscription) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_1__.useLexicalComposerContext)();\n  const initializedSubscription = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => subscription(editor), [editor, subscription]);\n  const valueRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initializedSubscription.initialValueFn());\n  const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(valueRef.current);\n  useLayoutEffectImpl(() => {\n    const {\n      initialValueFn,\n      subscribe\n    } = initializedSubscription;\n    const currentValue = initialValueFn();\n    if (valueRef.current !== currentValue) {\n      valueRef.current = currentValue;\n      setValue(currentValue);\n    }\n    return subscribe(newValue => {\n      valueRef.current = newValue;\n      setValue(newValue);\n    });\n  }, [initializedSubscription, subscription]);\n  return value;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction subscription(editor) {\n  return {\n    initialValueFn: () => editor.isEditable(),\n    subscribe: callback => {\n      return editor.registerEditableListener(callback);\n    }\n  };\n}\nfunction useLexicalEditable() {\n  return useLexicalSubscription(subscription);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC91c2VMZXhpY2FsRWRpdGFibGUuZGV2Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFa0Y7QUFDSjs7QUFFOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMENBQTBDLGtEQUFlLEdBQUcsNENBQVM7O0FBRXJFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGdHQUF5QjtBQUM1QyxrQ0FBa0MsOENBQU87QUFDekMsbUJBQW1CLDZDQUFNO0FBQ3pCLDRCQUE0QiwrQ0FBUTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC91c2VMZXhpY2FsRWRpdGFibGUuZGV2Lm1qcz8xNmNhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuaW1wb3J0IHsgdXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQnO1xuaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0LCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuY29uc3QgQ0FOX1VTRV9ET00gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmNvbnN0IHVzZUxheW91dEVmZmVjdEltcGwgPSBDQU5fVVNFX0RPTSA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4vKipcbiAqIFNob3J0Y3V0IHRvIExleGljYWwgc3Vic2NyaXB0aW9ucyB3aGVuIHZhbHVlcyBhcmUgdXNlZCBmb3IgcmVuZGVyLlxuICovXG5mdW5jdGlvbiB1c2VMZXhpY2FsU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbikge1xuICBjb25zdCBbZWRpdG9yXSA9IHVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKTtcbiAgY29uc3QgaW5pdGlhbGl6ZWRTdWJzY3JpcHRpb24gPSB1c2VNZW1vKCgpID0+IHN1YnNjcmlwdGlvbihlZGl0b3IpLCBbZWRpdG9yLCBzdWJzY3JpcHRpb25dKTtcbiAgY29uc3QgdmFsdWVSZWYgPSB1c2VSZWYoaW5pdGlhbGl6ZWRTdWJzY3JpcHRpb24uaW5pdGlhbFZhbHVlRm4oKSk7XG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlU3RhdGUodmFsdWVSZWYuY3VycmVudCk7XG4gIHVzZUxheW91dEVmZmVjdEltcGwoKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGluaXRpYWxWYWx1ZUZuLFxuICAgICAgc3Vic2NyaWJlXG4gICAgfSA9IGluaXRpYWxpemVkU3Vic2NyaXB0aW9uO1xuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IGluaXRpYWxWYWx1ZUZuKCk7XG4gICAgaWYgKHZhbHVlUmVmLmN1cnJlbnQgIT09IGN1cnJlbnRWYWx1ZSkge1xuICAgICAgdmFsdWVSZWYuY3VycmVudCA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgIHNldFZhbHVlKGN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBzdWJzY3JpYmUobmV3VmFsdWUgPT4ge1xuICAgICAgdmFsdWVSZWYuY3VycmVudCA9IG5ld1ZhbHVlO1xuICAgICAgc2V0VmFsdWUobmV3VmFsdWUpO1xuICAgIH0pO1xuICB9LCBbaW5pdGlhbGl6ZWRTdWJzY3JpcHRpb24sIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZnVuY3Rpb24gc3Vic2NyaXB0aW9uKGVkaXRvcikge1xuICByZXR1cm4ge1xuICAgIGluaXRpYWxWYWx1ZUZuOiAoKSA9PiBlZGl0b3IuaXNFZGl0YWJsZSgpLFxuICAgIHN1YnNjcmliZTogY2FsbGJhY2sgPT4ge1xuICAgICAgcmV0dXJuIGVkaXRvci5yZWdpc3RlckVkaXRhYmxlTGlzdGVuZXIoY2FsbGJhY2spO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIHVzZUxleGljYWxFZGl0YWJsZSgpIHtcbiAgcmV0dXJuIHVzZUxleGljYWxTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbn1cblxuZXhwb3J0IHsgdXNlTGV4aWNhbEVkaXRhYmxlIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/useLexicalEditable.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/text/LexicalText.dev.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@lexical/text/LexicalText.dev.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $canShowPlaceholder: () => (/* binding */ $canShowPlaceholder),\n/* harmony export */   $canShowPlaceholderCurry: () => (/* binding */ $canShowPlaceholderCurry),\n/* harmony export */   $findTextIntersectionFromCharacters: () => (/* binding */ $findTextIntersectionFromCharacters),\n/* harmony export */   $isRootTextContentEmpty: () => (/* binding */ $isRootTextContentEmpty),\n/* harmony export */   $isRootTextContentEmptyCurry: () => (/* binding */ $isRootTextContentEmptyCurry),\n/* harmony export */   $rootTextContent: () => (/* binding */ $rootTextContent),\n/* harmony export */   registerLexicalTextEntity: () => (/* binding */ registerLexicalTextEntity)\n/* harmony export */ });\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Returns the root's text content.\n * @returns The root's text content.\n */\nfunction $rootTextContent() {\n  const root = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$getRoot)();\n  return root.getTextContent();\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Determines if the root has any text content and can trim any whitespace if it does.\n * @param isEditorComposing - Is the editor in composition mode due to an active Input Method Editor?\n * @param trim - Should the root text have its whitespaced trimmed? Defaults to true.\n * @returns true if text content is empty, false if there is text or isEditorComposing is true.\n */\nfunction $isRootTextContentEmpty(isEditorComposing, trim = true) {\n  if (isEditorComposing) {\n    return false;\n  }\n  let text = $rootTextContent();\n  if (trim) {\n    text = text.trim();\n  }\n  return text === '';\n}\n\n/**\n * Returns a function that executes {@link $isRootTextContentEmpty}\n * @param isEditorComposing - Is the editor in composition mode due to an active Input Method Editor?\n * @param trim - Should the root text have its whitespaced trimmed? Defaults to true.\n * @returns A function that executes $isRootTextContentEmpty based on arguments.\n */\nfunction $isRootTextContentEmptyCurry(isEditorComposing, trim) {\n  return () => $isRootTextContentEmpty(isEditorComposing, trim);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Determines if the input should show the placeholder. If anything is in\n * in the root the placeholder should not be shown.\n * @param isComposing - Is the editor in composition mode due to an active Input Method Editor?\n * @returns true if the input should show the placeholder, false otherwise.\n */\nfunction $canShowPlaceholder(isComposing) {\n  if (!$isRootTextContentEmpty(isComposing, false)) {\n    return false;\n  }\n  const root = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$getRoot)();\n  const children = root.getChildren();\n  const childrenLength = children.length;\n  if (childrenLength > 1) {\n    return false;\n  }\n  for (let i = 0; i < childrenLength; i++) {\n    const topBlock = children[i];\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isDecoratorNode)(topBlock)) {\n      return false;\n    }\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isElementNode)(topBlock)) {\n      if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isParagraphNode)(topBlock)) {\n        return false;\n      }\n      if (topBlock.__indent !== 0) {\n        return false;\n      }\n      const topBlockChildren = topBlock.getChildren();\n      const topBlockChildrenLength = topBlockChildren.length;\n      for (let s = 0; s < topBlockChildrenLength; s++) {\n        const child = topBlockChildren[i];\n        if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(child)) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * Returns a function that executes {@link $canShowPlaceholder}\n * @param isEditorComposing - Is the editor in composition mode due to an active Input Method Editor?\n * @returns A function that executes $canShowPlaceholder with arguments.\n */\nfunction $canShowPlaceholderCurry(isEditorComposing) {\n  return () => $canShowPlaceholder(isEditorComposing);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Finds a TextNode with a size larger than targetCharacters and returns\n * the node along with the remaining length of the text.\n * @param root - The RootNode.\n * @param targetCharacters - The number of characters whose TextNode must be larger than.\n * @returns The TextNode and the intersections offset, or null if no TextNode is found.\n */\nfunction $findTextIntersectionFromCharacters(root, targetCharacters) {\n  let node = root.getFirstChild();\n  let currentCharacters = 0;\n  mainLoop: while (node !== null) {\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isElementNode)(node)) {\n      const child = node.getFirstChild();\n      if (child !== null) {\n        node = child;\n        continue;\n      }\n    } else if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(node)) {\n      const characters = node.getTextContentSize();\n      if (currentCharacters + characters > targetCharacters) {\n        return {\n          node,\n          offset: targetCharacters - currentCharacters\n        };\n      }\n      currentCharacters += characters;\n    }\n    const sibling = node.getNextSibling();\n    if (sibling !== null) {\n      node = sibling;\n      continue;\n    }\n    let parent = node.getParent();\n    while (parent !== null) {\n      const parentSibling = parent.getNextSibling();\n      if (parentSibling !== null) {\n        node = parentSibling;\n        continue mainLoop;\n      }\n      parent = parent.getParent();\n    }\n    break;\n  }\n  return null;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Returns a tuple that can be rested (...) into mergeRegister to clean up\n * node transforms listeners that transforms text into another node, eg. a HashtagNode.\n * @example\n * ```ts\n *   useEffect(() => {\n    return mergeRegister(\n      ...registerLexicalTextEntity(editor, getMatch, targetNode, createNode),\n    );\n  }, [createNode, editor, getMatch, targetNode]);\n * ```\n * Where targetNode is the type of node containing the text you want to transform (like a text input),\n * then getMatch uses a regex to find a matching text and creates the proper node to include the matching text.\n * @param editor - The lexical editor.\n * @param getMatch - Finds a matching string that satisfies a regex expression.\n * @param targetNode - The node type that contains text to match with. eg. HashtagNode\n * @param createNode - A function that creates a new node to contain the matched text. eg createHashtagNode\n * @returns An array containing the plain text and reverse node transform listeners.\n */\nfunction registerLexicalTextEntity(editor, getMatch, targetNode, createNode) {\n  const isTargetNode = node => {\n    return node instanceof targetNode;\n  };\n  const $replaceWithSimpleText = node => {\n    const textNode = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$createTextNode)(node.getTextContent());\n    textNode.setFormat(node.getFormat());\n    node.replace(textNode);\n  };\n  const getMode = node => {\n    return node.getLatest().__mode;\n  };\n  const $textNodeTransform = node => {\n    if (!node.isSimpleText()) {\n      return;\n    }\n    let prevSibling = node.getPreviousSibling();\n    let text = node.getTextContent();\n    let currentNode = node;\n    let match;\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevSibling)) {\n      const previousText = prevSibling.getTextContent();\n      const combinedText = previousText + text;\n      const prevMatch = getMatch(combinedText);\n      if (isTargetNode(prevSibling)) {\n        if (prevMatch === null || getMode(prevSibling) !== 0) {\n          $replaceWithSimpleText(prevSibling);\n          return;\n        } else {\n          const diff = prevMatch.end - previousText.length;\n          if (diff > 0) {\n            const concatText = text.slice(0, diff);\n            const newTextContent = previousText + concatText;\n            prevSibling.select();\n            prevSibling.setTextContent(newTextContent);\n            if (diff === text.length) {\n              node.remove();\n            } else {\n              const remainingText = text.slice(diff);\n              node.setTextContent(remainingText);\n            }\n            return;\n          }\n        }\n      } else if (prevMatch === null || prevMatch.start < previousText.length) {\n        return;\n      }\n    }\n    let prevMatchLengthToSkip = 0;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      match = getMatch(text);\n      let nextText = match === null ? '' : text.slice(match.end);\n      text = nextText;\n      if (nextText === '') {\n        const nextSibling = currentNode.getNextSibling();\n        if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextSibling)) {\n          nextText = currentNode.getTextContent() + nextSibling.getTextContent();\n          const nextMatch = getMatch(nextText);\n          if (nextMatch === null) {\n            if (isTargetNode(nextSibling)) {\n              $replaceWithSimpleText(nextSibling);\n            } else {\n              nextSibling.markDirty();\n            }\n            return;\n          } else if (nextMatch.start !== 0) {\n            return;\n          }\n        }\n      }\n      if (match === null) {\n        return;\n      }\n      if (match.start === 0 && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevSibling) && prevSibling.isTextEntity()) {\n        prevMatchLengthToSkip += match.end;\n        continue;\n      }\n      let nodeToReplace;\n      if (match.start === 0) {\n        [nodeToReplace, currentNode] = currentNode.splitText(match.end);\n      } else {\n        [, nodeToReplace, currentNode] = currentNode.splitText(match.start + prevMatchLengthToSkip, match.end + prevMatchLengthToSkip);\n      }\n      if (!(nodeToReplace !== undefined)) {\n        throw Error(`${'nodeToReplace'} should not be undefined. You may want to check splitOffsets passed to the splitText.`);\n      }\n      const replacementNode = createNode(nodeToReplace);\n      replacementNode.setFormat(nodeToReplace.getFormat());\n      nodeToReplace.replace(replacementNode);\n      if (currentNode == null) {\n        return;\n      }\n      prevMatchLengthToSkip = 0;\n      prevSibling = replacementNode;\n    }\n  };\n  const $reverseNodeTransform = node => {\n    const text = node.getTextContent();\n    const match = getMatch(text);\n    if (match === null || match.start !== 0) {\n      $replaceWithSimpleText(node);\n      return;\n    }\n    if (text.length > match.end) {\n      // This will split out the rest of the text as simple text\n      node.splitText(match.end);\n      return;\n    }\n    const prevSibling = node.getPreviousSibling();\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevSibling) && prevSibling.isTextEntity()) {\n      $replaceWithSimpleText(prevSibling);\n      $replaceWithSimpleText(node);\n    }\n    const nextSibling = node.getNextSibling();\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextSibling) && nextSibling.isTextEntity()) {\n      $replaceWithSimpleText(nextSibling);\n\n      // This may have already been converted in the previous block\n      if (isTargetNode(node)) {\n        $replaceWithSimpleText(node);\n      }\n    }\n  };\n  const removePlainTextTransform = editor.registerNodeTransform(lexical__WEBPACK_IMPORTED_MODULE_0__.TextNode, $textNodeTransform);\n  const removeReverseNodeTransform = editor.registerNodeTransform(targetNode, $reverseNodeTransform);\n  return [removePlainTextTransform, removeReverseNodeTransform];\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/text/LexicalText.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/Field.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/Field.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RichText: () => (/* binding */ RichText)\n/* harmony export */ });\n/* harmony import */ var _payloadcms_ui_forms_FieldDescription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @payloadcms/ui/forms/FieldDescription */ \"(app-pages-browser)/./node_modules/@payloadcms/ui/dist/forms/FieldDescription/index.js\");\n/* harmony import */ var _payloadcms_ui_forms_FieldError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @payloadcms/ui/forms/FieldError */ \"(app-pages-browser)/./node_modules/@payloadcms/ui/dist/forms/FieldError/index.js\");\n/* harmony import */ var _payloadcms_ui_forms_FieldLabel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @payloadcms/ui/forms/FieldLabel */ \"(app-pages-browser)/./node_modules/@payloadcms/ui/dist/forms/FieldLabel/index.js\");\n/* harmony import */ var _payloadcms_ui_forms_FieldPropsProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @payloadcms/ui/forms/FieldPropsProvider */ \"(app-pages-browser)/./node_modules/@payloadcms/ui/dist/forms/FieldPropsProvider/index.js\");\n/* harmony import */ var _payloadcms_ui_forms_useField__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @payloadcms/ui/forms/useField */ \"(app-pages-browser)/./node_modules/@payloadcms/ui/dist/forms/useField/index.js\");\n/* harmony import */ var _payloadcms_ui_forms_withCondition__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @payloadcms/ui/forms/withCondition */ \"(app-pages-browser)/./node_modules/@payloadcms/ui/dist/forms/withCondition/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_error_boundary__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-error-boundary */ \"(app-pages-browser)/./node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js\");\n/* harmony import */ var _index_scss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./index.scss */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/index.scss\");\n/* harmony import */ var _lexical_LexicalProvider_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lexical/LexicalProvider.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/LexicalProvider.js\");\n/* __next_internal_client_entry_do_not_use__ RichText auto */ var _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\nconst baseClass = \"rich-text-lexical\";\nconst _RichText = (props)=>{\n    _s();\n    const { name, CustomDescription, CustomError, CustomLabel, className, descriptionProps, editorConfig, errorProps, label, labelProps, path: pathFromProps, readOnly, required, style, validate, width } = props;\n    const memoizedValidate = (0,react__WEBPACK_IMPORTED_MODULE_6__.useCallback)((value, validationOptions)=>{\n        if (typeof validate === \"function\") {\n            return validate(value, {\n                ...validationOptions,\n                props,\n                required\n            });\n        }\n    }, // This would cause an infinite loop and endless re-rendering.\n    // Removing props from the dependencies array fixed this issue: https://github.com/payloadcms/payload/issues/3709\n    [\n        validate,\n        required\n    ]);\n    const { path: pathFromContext } = (0,_payloadcms_ui_forms_FieldPropsProvider__WEBPACK_IMPORTED_MODULE_3__.useFieldProps)();\n    const fieldType = (0,_payloadcms_ui_forms_useField__WEBPACK_IMPORTED_MODULE_4__.useField)({\n        path: pathFromContext || pathFromProps || name,\n        validate: memoizedValidate\n    });\n    const { errorMessage, initialValue, path, schemaPath, setValue, showError, value } = fieldType;\n    const classes = [\n        baseClass,\n        \"field-type\",\n        className,\n        showError && \"error\",\n        readOnly && \"\".concat(baseClass, \"--read-only\")\n    ].filter(Boolean).join(\" \");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_6__.createElement(\"div\", {\n        className: classes,\n        key: path,\n        style: {\n            ...style,\n            width\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_6__.createElement(\"div\", {\n        className: \"\".concat(baseClass, \"__wrap\")\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_6__.createElement(_payloadcms_ui_forms_FieldError__WEBPACK_IMPORTED_MODULE_1__.FieldError, {\n        CustomError: CustomError,\n        path: path,\n        ...errorProps || {}\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_6__.createElement(_payloadcms_ui_forms_FieldLabel__WEBPACK_IMPORTED_MODULE_2__.FieldLabel, {\n        CustomLabel: CustomLabel,\n        label: label,\n        required: required,\n        ...labelProps || {}\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_6__.createElement(react_error_boundary__WEBPACK_IMPORTED_MODULE_9__.ErrorBoundary, {\n        fallbackRender: fallbackRender,\n        onReset: ()=>{}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_6__.createElement(_lexical_LexicalProvider_js__WEBPACK_IMPORTED_MODULE_8__.LexicalProvider, {\n        editorConfig: editorConfig,\n        fieldProps: props,\n        key: JSON.stringify({\n            initialValue,\n            path\n        }),\n        onChange: (editorState)=>{\n            var _editorConfig_features_hooks_save, _editorConfig_features_hooks, _editorConfig_features;\n            let serializedEditorState = editorState.toJSON();\n            // Transform state through save hooks\n            if (editorConfig === null || editorConfig === void 0 ? void 0 : (_editorConfig_features = editorConfig.features) === null || _editorConfig_features === void 0 ? void 0 : (_editorConfig_features_hooks = _editorConfig_features.hooks) === null || _editorConfig_features_hooks === void 0 ? void 0 : (_editorConfig_features_hooks_save = _editorConfig_features_hooks.save) === null || _editorConfig_features_hooks_save === void 0 ? void 0 : _editorConfig_features_hooks_save.length) {\n                editorConfig.features.hooks.save.forEach((hook)=>{\n                    serializedEditorState = hook({\n                        incomingEditorState: serializedEditorState\n                    });\n                });\n            }\n            setValue(serializedEditorState);\n        },\n        path: path,\n        readOnly: readOnly,\n        value: value\n    })), CustomDescription !== undefined ? CustomDescription : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_6__.createElement(_payloadcms_ui_forms_FieldDescription__WEBPACK_IMPORTED_MODULE_0__.FieldDescription, descriptionProps || {})));\n};\n_s(_RichText, \"Q2F1dxIpHQBv/7X2b4VcnEpDJ08=\", false, function() {\n    return [\n        _payloadcms_ui_forms_FieldPropsProvider__WEBPACK_IMPORTED_MODULE_3__.useFieldProps,\n        _payloadcms_ui_forms_useField__WEBPACK_IMPORTED_MODULE_4__.useField\n    ];\n});\nfunction fallbackRender(param) {\n    let { error } = param;\n    // Call resetErrorBoundary() to reset the error boundary and retry the render.\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_6__.createElement(\"div\", {\n        className: \"errorBoundary\",\n        role: \"alert\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_6__.createElement(\"p\", null, \"Something went wrong:\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_6__.createElement(\"pre\", {\n        style: {\n            color: \"red\"\n        }\n    }, error.message));\n}\nconst RichText = (0,_payloadcms_ui_forms_withCondition__WEBPACK_IMPORTED_MODULE_5__.withCondition)(_RichText); //# sourceMappingURL=Field.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/Field.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/EditorPlugin.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/EditorPlugin.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorPlugin: () => (/* binding */ EditorPlugin)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\nconst EditorPlugin = ({ anchorElem, clientProps, plugin })=>{\n    if (plugin.position === 'floatingAnchorElem') {\n        return plugin.Component && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(plugin.Component, {\n            anchorElem: anchorElem,\n            clientProps: clientProps\n        });\n    }\n    return plugin.Component && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(plugin.Component, {\n        clientProps: clientProps\n    });\n};\n\n//# sourceMappingURL=EditorPlugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9FZGl0b3JQbHVnaW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0I7QUFDeEIsd0JBQXdCLGlDQUFpQztBQUNoRTtBQUNBLGlEQUFpRCxnREFBbUI7QUFDcEU7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDZDQUE2QyxnREFBbUI7QUFDaEU7QUFDQSxLQUFLO0FBQ0w7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BwYXlsb2FkY21zL3JpY2h0ZXh0LWxleGljYWwvZGlzdC9maWVsZC9sZXhpY2FsL0VkaXRvclBsdWdpbi5qcz9iZjViIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBjb25zdCBFZGl0b3JQbHVnaW4gPSAoeyBhbmNob3JFbGVtLCBjbGllbnRQcm9wcywgcGx1Z2luIH0pPT57XG4gICAgaWYgKHBsdWdpbi5wb3NpdGlvbiA9PT0gJ2Zsb2F0aW5nQW5jaG9yRWxlbScpIHtcbiAgICAgICAgcmV0dXJuIHBsdWdpbi5Db21wb25lbnQgJiYgLyojX19QVVJFX18qLyBSZWFjdC5jcmVhdGVFbGVtZW50KHBsdWdpbi5Db21wb25lbnQsIHtcbiAgICAgICAgICAgIGFuY2hvckVsZW06IGFuY2hvckVsZW0sXG4gICAgICAgICAgICBjbGllbnRQcm9wczogY2xpZW50UHJvcHNcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBwbHVnaW4uQ29tcG9uZW50ICYmIC8qI19fUFVSRV9fKi8gUmVhY3QuY3JlYXRlRWxlbWVudChwbHVnaW4uQ29tcG9uZW50LCB7XG4gICAgICAgIGNsaWVudFByb3BzOiBjbGllbnRQcm9wc1xuICAgIH0pO1xufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RWRpdG9yUGx1Z2luLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/EditorPlugin.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/LexicalEditor.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/LexicalEditor.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LexicalEditor: () => (/* binding */ LexicalEditor)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalErrorBoundary_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @lexical/react/LexicalErrorBoundary.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalErrorBoundary.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalHistoryPlugin_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @lexical/react/LexicalHistoryPlugin.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalHistoryPlugin.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalOnChangePlugin_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @lexical/react/LexicalOnChangePlugin.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalOnChangePlugin.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalRichTextPlugin_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @lexical/react/LexicalRichTextPlugin.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalRichTextPlugin.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalTabIndentationPlugin_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @lexical/react/LexicalTabIndentationPlugin.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalTabIndentationPlugin.dev.mjs\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _EditorFocusProvider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EditorFocusProvider.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/EditorFocusProvider.js\");\n/* harmony import */ var _EditorPlugin_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EditorPlugin.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/EditorPlugin.js\");\n/* harmony import */ var _LexicalEditor_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LexicalEditor.scss */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/LexicalEditor.scss\");\n/* harmony import */ var _config_client_EditorConfigProvider_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config/client/EditorConfigProvider.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/config/client/EditorConfigProvider.js\");\n/* harmony import */ var _plugins_MarkdownShortcut_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./plugins/MarkdownShortcut/index.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/MarkdownShortcut/index.js\");\n/* harmony import */ var _plugins_SlashMenu_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./plugins/SlashMenu/index.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/SlashMenu/index.js\");\n/* harmony import */ var _plugins_handles_AddBlockHandlePlugin_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./plugins/handles/AddBlockHandlePlugin/index.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/AddBlockHandlePlugin/index.js\");\n/* harmony import */ var _plugins_handles_DraggableBlockPlugin_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./plugins/handles/DraggableBlockPlugin/index.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/index.js\");\n/* harmony import */ var _ui_ContentEditable_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ui/ContentEditable.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/ui/ContentEditable.js\");\n/* __next_internal_client_entry_do_not_use__ LexicalEditor auto */ var _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst LexicalEditor = (props)=>{\n    var _editorConfig_features_markdownTransformers, _editorConfig_features;\n    _s();\n    const { editorConfig, onChange } = props;\n    const editorConfigContext = (0,_config_client_EditorConfigProvider_js__WEBPACK_IMPORTED_MODULE_4__.useEditorConfigContext)();\n    const [editor] = (0,_lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_10__.useLexicalComposerContext)();\n    const editorFocus = (0,_EditorFocusProvider_js__WEBPACK_IMPORTED_MODULE_1__.useEditorFocus)();\n    const [floatingAnchorElem, setFloatingAnchorElem] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const onRef = (_floatingAnchorElem)=>{\n        if (_floatingAnchorElem !== null) {\n            setFloatingAnchorElem(_floatingAnchorElem);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_11__.mergeRegister)(editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_12__.FOCUS_COMMAND, ()=>{\n            editorFocus.focusEditor(editor, editorConfigContext);\n            return true;\n        }, lexical__WEBPACK_IMPORTED_MODULE_12__.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_12__.BLUR_COMMAND, ()=>{\n            editorFocus.blurEditor();\n            return true;\n        }, lexical__WEBPACK_IMPORTED_MODULE_12__.COMMAND_PRIORITY_LOW));\n    }, [\n        editor,\n        editorConfig,\n        editorConfigContext,\n        editorFocus\n    ]);\n    const [isSmallWidthViewport, setIsSmallWidthViewport] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const updateViewPortWidth = ()=>{\n            const isNextSmallWidthViewport = window.matchMedia(\"(max-width: 768px)\").matches;\n            if (isNextSmallWidthViewport !== isSmallWidthViewport) {\n                setIsSmallWidthViewport(isNextSmallWidthViewport);\n            }\n        };\n        updateViewPortWidth();\n        window.addEventListener(\"resize\", updateViewPortWidth);\n        return ()=>{\n            window.removeEventListener(\"resize\", updateViewPortWidth);\n        };\n    }, [\n        isSmallWidthViewport\n    ]);\n    const ErrorBoundaryComponent = _lexical_react_LexicalErrorBoundary_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"][\"default\"] || _lexical_react_LexicalErrorBoundary_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"];\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, editorConfig.features.plugins.map((plugin)=>{\n        if (plugin.position === \"aboveContainer\") {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_EditorPlugin_js__WEBPACK_IMPORTED_MODULE_2__.EditorPlugin, {\n                clientProps: plugin.clientProps,\n                key: plugin.key,\n                plugin: plugin\n            });\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"editor-container\"\n    }, editorConfig.features.plugins.map((plugin)=>{\n        if (plugin.position === \"top\") {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_EditorPlugin_js__WEBPACK_IMPORTED_MODULE_2__.EditorPlugin, {\n                clientProps: plugin.clientProps,\n                key: plugin.key,\n                plugin: plugin\n            });\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_lexical_react_LexicalRichTextPlugin_js__WEBPACK_IMPORTED_MODULE_14__.RichTextPlugin, {\n        //@ts-expect-error ts being dumb\n        ErrorBoundary: ErrorBoundaryComponent,\n        contentEditable: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"editor-scroller\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"editor\",\n            ref: onRef\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_ui_ContentEditable_js__WEBPACK_IMPORTED_MODULE_9__.LexicalContentEditable, null))),\n        placeholder: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", {\n            className: \"editor-placeholder\"\n        }, \"Start typing, or press '/' for commands...\")\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_lexical_react_LexicalOnChangePlugin_js__WEBPACK_IMPORTED_MODULE_15__.OnChangePlugin, {\n        // Selection changes can be ignored here, reducing the\n        // frequency that the FieldComponent and Payload receive updates.\n        // Selection changes are only needed if you are saving selection state\n        ignoreSelectionChange: true,\n        onChange: (editorState, editor, tags)=>{\n            // Ignore any onChange event triggered by focus only\n            if (!tags.has(\"focus\") || tags.size > 1) {\n                if (onChange != null) onChange(editorState, editor, tags);\n            }\n        }\n    }), floatingAnchorElem && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, !isSmallWidthViewport && editor.isEditable() && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_plugins_handles_DraggableBlockPlugin_index_js__WEBPACK_IMPORTED_MODULE_8__.DraggableBlockPlugin, {\n        anchorElem: floatingAnchorElem\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_plugins_handles_AddBlockHandlePlugin_index_js__WEBPACK_IMPORTED_MODULE_7__.AddBlockHandlePlugin, {\n        anchorElem: floatingAnchorElem\n    })), editorConfig.features.plugins.map((plugin)=>{\n        if (plugin.position === \"floatingAnchorElem\" && !(plugin.desktopOnly === true && isSmallWidthViewport)) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_EditorPlugin_js__WEBPACK_IMPORTED_MODULE_2__.EditorPlugin, {\n                anchorElem: floatingAnchorElem,\n                clientProps: plugin.clientProps,\n                key: plugin.key,\n                plugin: plugin\n            });\n        }\n    }), editor.isEditable() && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_plugins_SlashMenu_index_js__WEBPACK_IMPORTED_MODULE_6__.SlashMenuPlugin, {\n        anchorElem: floatingAnchorElem\n    }))), editor.isEditable() && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_lexical_react_LexicalHistoryPlugin_js__WEBPACK_IMPORTED_MODULE_16__.HistoryPlugin, null), (editorConfig === null || editorConfig === void 0 ? void 0 : (_editorConfig_features = editorConfig.features) === null || _editorConfig_features === void 0 ? void 0 : (_editorConfig_features_markdownTransformers = _editorConfig_features.markdownTransformers) === null || _editorConfig_features_markdownTransformers === void 0 ? void 0 : _editorConfig_features_markdownTransformers.length) > 0 && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_plugins_MarkdownShortcut_index_js__WEBPACK_IMPORTED_MODULE_5__.MarkdownShortcutPlugin, null)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_lexical_react_LexicalTabIndentationPlugin_js__WEBPACK_IMPORTED_MODULE_17__.TabIndentationPlugin, null), editorConfig.features.plugins.map((plugin)=>{\n        if (plugin.position === \"normal\") {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_EditorPlugin_js__WEBPACK_IMPORTED_MODULE_2__.EditorPlugin, {\n                clientProps: plugin.clientProps,\n                key: plugin.key,\n                plugin: plugin\n            });\n        }\n    }), editorConfig.features.plugins.map((plugin)=>{\n        if (plugin.position === \"bottom\") {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_EditorPlugin_js__WEBPACK_IMPORTED_MODULE_2__.EditorPlugin, {\n                clientProps: plugin.clientProps,\n                key: plugin.key,\n                plugin: plugin\n            });\n        }\n    })), editorConfig.features.plugins.map((plugin)=>{\n        if (plugin.position === \"belowContainer\") {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_EditorPlugin_js__WEBPACK_IMPORTED_MODULE_2__.EditorPlugin, {\n                clientProps: plugin.clientProps,\n                key: plugin.key,\n                plugin: plugin\n            });\n        }\n    }));\n}; //# sourceMappingURL=LexicalEditor.js.map\n_s(LexicalEditor, \"kbqUkbzbDq7x/taXdZ4/NEVfGgA=\", false, function() {\n    return [\n        _config_client_EditorConfigProvider_js__WEBPACK_IMPORTED_MODULE_4__.useEditorConfigContext,\n        _lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_10__.useLexicalComposerContext,\n        _EditorFocusProvider_js__WEBPACK_IMPORTED_MODULE_1__.useEditorFocus\n    ];\n});\n_c = LexicalEditor;\nvar _c;\n$RefreshReg$(_c, \"LexicalEditor\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/LexicalEditor.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/LexicalProvider.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/LexicalProvider.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LexicalProvider: () => (/* binding */ LexicalProvider)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lexical/react/LexicalComposer.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposer.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _EditorFocusProvider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EditorFocusProvider.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/EditorFocusProvider.js\");\n/* harmony import */ var _LexicalEditor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LexicalEditor.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/LexicalEditor.js\");\n/* harmony import */ var _config_client_EditorConfigProvider_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config/client/EditorConfigProvider.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/config/client/EditorConfigProvider.js\");\n/* harmony import */ var _nodes_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nodes/index.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/nodes/index.js\");\n/* __next_internal_client_entry_do_not_use__ LexicalProvider auto */ var _s = $RefreshSig$();\n\n\n\n\n\n\nconst LexicalProvider = (props)=>{\n    var _editorConfig_features_hooks_load, _editorConfig_features_hooks, _editorConfig_features;\n    _s();\n    const { editorConfig, fieldProps, onChange, path, readOnly } = props;\n    let { value } = props;\n    const [initialConfig, setInitialConfig] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    // set lexical config in useEffect: // TODO: Is this the most performant way to do this? Prob not\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const newInitialConfig = {\n            editable: readOnly !== true,\n            editorState: value != null ? JSON.stringify(value) : undefined,\n            namespace: editorConfig.lexical.namespace,\n            nodes: [\n                ...(0,_nodes_index_js__WEBPACK_IMPORTED_MODULE_4__.getEnabledNodes)({\n                    editorConfig\n                })\n            ],\n            onError: (error)=>{\n                throw error;\n            },\n            theme: editorConfig.lexical.theme\n        };\n        setInitialConfig(newInitialConfig);\n    }, [\n        editorConfig,\n        readOnly,\n        value\n    ]);\n    if (editorConfig === null || editorConfig === void 0 ? void 0 : (_editorConfig_features = editorConfig.features) === null || _editorConfig_features === void 0 ? void 0 : (_editorConfig_features_hooks = _editorConfig_features.hooks) === null || _editorConfig_features_hooks === void 0 ? void 0 : (_editorConfig_features_hooks_load = _editorConfig_features_hooks.load) === null || _editorConfig_features_hooks_load === void 0 ? void 0 : _editorConfig_features_hooks_load.length) {\n        editorConfig.features.hooks.load.forEach((hook)=>{\n            value = hook({\n                incomingEditorState: value\n            });\n        });\n    }\n    if (value && typeof value !== \"object\") {\n        throw new Error(\"The value passed to the Lexical editor is not an object. This is not supported. Please remove the data from the field and start again. This is the value that was passed in: \" + JSON.stringify(value));\n    }\n    if (value && Array.isArray(value) && !(\"root\" in value)) {\n        throw new Error(\"You have tried to pass in data from the old, Slate editor, to the new, Lexical editor. This is not supported. There is no automatic conversion from Slate to Lexical data available yet (coming soon). Please remove the data from the field and start again.\");\n    }\n    if (value && \"jsonContent\" in value) {\n        throw new Error(\"You have tried to pass in data from payload-plugin-lexical. This is not supported. The data structure has changed in this editor, compared to the plugin, and there is no automatic conversion available yet (coming soon). Please remove the data from the field and start again.\");\n    }\n    if (!initialConfig) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", null, \"Loading...\");\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_lexical_react_LexicalComposer_js__WEBPACK_IMPORTED_MODULE_5__.LexicalComposer, {\n        initialConfig: initialConfig,\n        key: path\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_EditorFocusProvider_js__WEBPACK_IMPORTED_MODULE_1__.EditorFocusProvider, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_config_client_EditorConfigProvider_js__WEBPACK_IMPORTED_MODULE_3__.EditorConfigProvider, {\n        editorConfig: editorConfig,\n        fieldProps: fieldProps\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_LexicalEditor_js__WEBPACK_IMPORTED_MODULE_2__.LexicalEditor, {\n        editorConfig: editorConfig,\n        onChange: onChange\n    }))));\n}; //# sourceMappingURL=LexicalProvider.js.map\n_s(LexicalProvider, \"RDQ1WBgKa2gDU/Gdn/qzpIw5k/Q=\");\n_c = LexicalProvider;\nvar _c;\n$RefreshReg$(_c, \"LexicalProvider\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9MZXhpY2FsUHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFNbUU7QUFDckM7QUFJZ0M7QUFDYztBQUNFO0FBQzVCO0FBYzNDLE1BQU1PLGtCQUFrRCxDQUFDQztRQXFCMURDLG1DQUFBQSw4QkFBQUE7O0lBcEJKLE1BQU0sRUFBRUEsWUFBWSxFQUFFQyxVQUFVLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUUsR0FBR0w7SUFDL0QsSUFBSSxFQUFFTSxLQUFLLEVBQUUsR0FBR047SUFFaEIsTUFBTSxDQUFDTyxlQUFlQyxpQkFBaUIsR0FBR2YsMkNBQWMsQ0FBMkI7SUFFbkYsaUdBQWlHO0lBQ2pHQSw0Q0FBZSxDQUFDO1FBQ2QsTUFBTWtCLG1CQUFzQztZQUMxQ0MsVUFBVVAsYUFBYTtZQUN2QlEsYUFBYVAsU0FBUyxPQUFPUSxLQUFLQyxTQUFTLENBQUNULFNBQVNVO1lBQ3JEQyxXQUFXaEIsYUFBYWlCLE9BQU8sQ0FBQ0QsU0FBUztZQUN6Q0UsT0FBTzttQkFBSXJCLGdFQUFlQSxDQUFDO29CQUFFRztnQkFBYTthQUFHO1lBQzdDbUIsU0FBUyxDQUFDQztnQkFDUixNQUFNQTtZQUNSO1lBQ0FDLE9BQU9yQixhQUFhaUIsT0FBTyxDQUFDSSxLQUFLO1FBQ25DO1FBQ0FkLGlCQUFpQkc7SUFDbkIsR0FBRztRQUFDVjtRQUFjSTtRQUFVQztLQUFNO0lBRWxDLElBQUlMLHlCQUFBQSxvQ0FBQUEseUJBQUFBLGFBQWNzQixRQUFBQSxjQUFkdEIsOENBQUFBLCtCQUFBQSx1QkFBd0J1QixLQUFBQSxjQUF4QnZCLG9EQUFBQSxvQ0FBQUEsNkJBQStCd0IsSUFBQUEsY0FBL0J4Qix3REFBQUEsa0NBQXFDeUIsTUFBQUEsRUFBUTtRQUMvQ3pCLGFBQWFzQixRQUFRLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDRSxPQUFPLENBQUMsQ0FBQ0M7WUFDeEN0QixRQUFRc0IsS0FBSztnQkFBRUMscUJBQXFCdkI7WUFBTTtRQUM1QztJQUNGO0lBRUEsSUFBSUEsU0FBUyxPQUFPQSxVQUFVLFVBQVU7UUFDdEMsTUFBTSxJQUFJd0IsTUFDUixrTEFDRWhCLEtBQUtDLFNBQVMsQ0FBQ1Q7SUFFckI7SUFFQSxJQUFJQSxTQUFTeUIsTUFBTUMsT0FBTyxDQUFDMUIsVUFBVSxDQUFFLFdBQVVBLEtBQUFBLEdBQVE7UUFDdkQsTUFBTSxJQUFJd0IsTUFDUjtJQUVKO0lBRUEsSUFBSXhCLFNBQVMsaUJBQWlCQSxPQUFPO1FBQ25DLE1BQU0sSUFBSXdCLE1BQ1I7SUFFSjtJQUVBLElBQUksQ0FBQ3ZCLGVBQWU7UUFDbEIscUJBQU9kLGdEQUFBLENBQUN5QyxLQUFBQSxNQUFFO0lBQ1o7SUFFQSxxQkFDRXpDLGdEQUFBLENBQUNELDhFQUFlQSxFQUFmQTtRQUFnQmUsZUFBZUE7UUFBZTRCLEtBQUsvQjtxQkFDbERYLGdEQUFBLENBQUNDLHdFQUFtQkEsRUFBbkJBLE1BQUFBLFdBQUFBLEdBQ0NELGdEQUFBLENBQUNJLHdGQUFvQkEsRUFBcEJBO1FBQXFCSSxjQUFjQTtRQUFjQyxZQUFZQTtxQkFDNURULGdEQUFBLENBQUNHLDREQUFzQkEsRUFBdEJBO1FBQXVCSyxjQUFjQTtRQUFjRSxVQUFVQTs7QUFLeEUsRUFBQztHQTNEWUo7S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL3NyYy9maWVsZC9sZXhpY2FsL0xleGljYWxQcm92aWRlci50c3g/ZjI3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcbmltcG9ydCB0eXBlIHsgSW5pdGlhbENvbmZpZ1R5cGUgfSBmcm9tICdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29tcG9zZXIuanMnXG5pbXBvcnQgdHlwZSB7IEZvcm1GaWVsZEJhc2UgfSBmcm9tICdAcGF5bG9hZGNtcy91aS9maWVsZHMvc2hhcmVkJ1xuaW1wb3J0IHR5cGUgeyBFZGl0b3JTdGF0ZSwgU2VyaWFsaXplZEVkaXRvclN0YXRlIH0gZnJvbSAnbGV4aWNhbCdcbmltcG9ydCB0eXBlIHsgTGV4aWNhbEVkaXRvciB9IGZyb20gJ2xleGljYWwnXG5cbmltcG9ydCB7IExleGljYWxDb21wb3NlciB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3Nlci5qcydcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgdHlwZSB7IFNhbml0aXplZENsaWVudEVkaXRvckNvbmZpZyB9IGZyb20gJy4vY29uZmlnL3R5cGVzLmpzJ1xuXG5pbXBvcnQgeyBFZGl0b3JGb2N1c1Byb3ZpZGVyIH0gZnJvbSAnLi9FZGl0b3JGb2N1c1Byb3ZpZGVyLmpzJ1xuaW1wb3J0IHsgTGV4aWNhbEVkaXRvciBhcyBMZXhpY2FsRWRpdG9yQ29tcG9uZW50IH0gZnJvbSAnLi9MZXhpY2FsRWRpdG9yLmpzJ1xuaW1wb3J0IHsgRWRpdG9yQ29uZmlnUHJvdmlkZXIgfSBmcm9tICcuL2NvbmZpZy9jbGllbnQvRWRpdG9yQ29uZmlnUHJvdmlkZXIuanMnXG5pbXBvcnQgeyBnZXRFbmFibGVkTm9kZXMgfSBmcm9tICcuL25vZGVzL2luZGV4LmpzJ1xuXG5leHBvcnQgdHlwZSBMZXhpY2FsUHJvdmlkZXJQcm9wcyA9IHtcbiAgZWRpdG9yQ29uZmlnOiBTYW5pdGl6ZWRDbGllbnRFZGl0b3JDb25maWdcbiAgZmllbGRQcm9wczogRm9ybUZpZWxkQmFzZSAmIHtcbiAgICBlZGl0b3JDb25maWc6IFNhbml0aXplZENsaWVudEVkaXRvckNvbmZpZyAvLyBXaXRoIHJlbmRlcmVkIGZlYXR1cmVzIG4gc3R1ZmZcbiAgICBuYW1lOiBzdHJpbmdcbiAgICByaWNoVGV4dENvbXBvbmVudE1hcDogTWFwPHN0cmluZywgUmVhY3QuUmVhY3ROb2RlPlxuICB9XG4gIG9uQ2hhbmdlOiAoZWRpdG9yU3RhdGU6IEVkaXRvclN0YXRlLCBlZGl0b3I6IExleGljYWxFZGl0b3IsIHRhZ3M6IFNldDxzdHJpbmc+KSA9PiB2b2lkXG4gIHBhdGg6IHN0cmluZ1xuICByZWFkT25seTogYm9vbGVhblxuICB2YWx1ZTogU2VyaWFsaXplZEVkaXRvclN0YXRlXG59XG5leHBvcnQgY29uc3QgTGV4aWNhbFByb3ZpZGVyOiBSZWFjdC5GQzxMZXhpY2FsUHJvdmlkZXJQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBlZGl0b3JDb25maWcsIGZpZWxkUHJvcHMsIG9uQ2hhbmdlLCBwYXRoLCByZWFkT25seSB9ID0gcHJvcHNcbiAgbGV0IHsgdmFsdWUgfSA9IHByb3BzXG5cbiAgY29uc3QgW2luaXRpYWxDb25maWcsIHNldEluaXRpYWxDb25maWddID0gUmVhY3QudXNlU3RhdGU8SW5pdGlhbENvbmZpZ1R5cGUgfCBudWxsPihudWxsKVxuXG4gIC8vIHNldCBsZXhpY2FsIGNvbmZpZyBpbiB1c2VFZmZlY3Q6IC8vIFRPRE86IElzIHRoaXMgdGhlIG1vc3QgcGVyZm9ybWFudCB3YXkgdG8gZG8gdGhpcz8gUHJvYiBub3RcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBuZXdJbml0aWFsQ29uZmlnOiBJbml0aWFsQ29uZmlnVHlwZSA9IHtcbiAgICAgIGVkaXRhYmxlOiByZWFkT25seSAhPT0gdHJ1ZSxcbiAgICAgIGVkaXRvclN0YXRlOiB2YWx1ZSAhPSBudWxsID8gSlNPTi5zdHJpbmdpZnkodmFsdWUpIDogdW5kZWZpbmVkLFxuICAgICAgbmFtZXNwYWNlOiBlZGl0b3JDb25maWcubGV4aWNhbC5uYW1lc3BhY2UsXG4gICAgICBub2RlczogWy4uLmdldEVuYWJsZWROb2Rlcyh7IGVkaXRvckNvbmZpZyB9KV0sXG4gICAgICBvbkVycm9yOiAoZXJyb3I6IEVycm9yKSA9PiB7XG4gICAgICAgIHRocm93IGVycm9yXG4gICAgICB9LFxuICAgICAgdGhlbWU6IGVkaXRvckNvbmZpZy5sZXhpY2FsLnRoZW1lLFxuICAgIH1cbiAgICBzZXRJbml0aWFsQ29uZmlnKG5ld0luaXRpYWxDb25maWcpXG4gIH0sIFtlZGl0b3JDb25maWcsIHJlYWRPbmx5LCB2YWx1ZV0pXG5cbiAgaWYgKGVkaXRvckNvbmZpZz8uZmVhdHVyZXM/Lmhvb2tzPy5sb2FkPy5sZW5ndGgpIHtcbiAgICBlZGl0b3JDb25maWcuZmVhdHVyZXMuaG9va3MubG9hZC5mb3JFYWNoKChob29rKSA9PiB7XG4gICAgICB2YWx1ZSA9IGhvb2soeyBpbmNvbWluZ0VkaXRvclN0YXRlOiB2YWx1ZSB9KVxuICAgIH0pXG4gIH1cblxuICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdUaGUgdmFsdWUgcGFzc2VkIHRvIHRoZSBMZXhpY2FsIGVkaXRvciBpcyBub3QgYW4gb2JqZWN0LiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSByZW1vdmUgdGhlIGRhdGEgZnJvbSB0aGUgZmllbGQgYW5kIHN0YXJ0IGFnYWluLiBUaGlzIGlzIHRoZSB2YWx1ZSB0aGF0IHdhcyBwYXNzZWQgaW46ICcgK1xuICAgICAgICBKU09OLnN0cmluZ2lmeSh2YWx1ZSksXG4gICAgKVxuICB9XG5cbiAgaWYgKHZhbHVlICYmIEFycmF5LmlzQXJyYXkodmFsdWUpICYmICEoJ3Jvb3QnIGluIHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdZb3UgaGF2ZSB0cmllZCB0byBwYXNzIGluIGRhdGEgZnJvbSB0aGUgb2xkLCBTbGF0ZSBlZGl0b3IsIHRvIHRoZSBuZXcsIExleGljYWwgZWRpdG9yLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIFRoZXJlIGlzIG5vIGF1dG9tYXRpYyBjb252ZXJzaW9uIGZyb20gU2xhdGUgdG8gTGV4aWNhbCBkYXRhIGF2YWlsYWJsZSB5ZXQgKGNvbWluZyBzb29uKS4gUGxlYXNlIHJlbW92ZSB0aGUgZGF0YSBmcm9tIHRoZSBmaWVsZCBhbmQgc3RhcnQgYWdhaW4uJyxcbiAgICApXG4gIH1cblxuICBpZiAodmFsdWUgJiYgJ2pzb25Db250ZW50JyBpbiB2YWx1ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdZb3UgaGF2ZSB0cmllZCB0byBwYXNzIGluIGRhdGEgZnJvbSBwYXlsb2FkLXBsdWdpbi1sZXhpY2FsLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIFRoZSBkYXRhIHN0cnVjdHVyZSBoYXMgY2hhbmdlZCBpbiB0aGlzIGVkaXRvciwgY29tcGFyZWQgdG8gdGhlIHBsdWdpbiwgYW5kIHRoZXJlIGlzIG5vIGF1dG9tYXRpYyBjb252ZXJzaW9uIGF2YWlsYWJsZSB5ZXQgKGNvbWluZyBzb29uKS4gUGxlYXNlIHJlbW92ZSB0aGUgZGF0YSBmcm9tIHRoZSBmaWVsZCBhbmQgc3RhcnQgYWdhaW4uJyxcbiAgICApXG4gIH1cblxuICBpZiAoIWluaXRpYWxDb25maWcpIHtcbiAgICByZXR1cm4gPHA+TG9hZGluZy4uLjwvcD5cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPExleGljYWxDb21wb3NlciBpbml0aWFsQ29uZmlnPXtpbml0aWFsQ29uZmlnfSBrZXk9e3BhdGh9PlxuICAgICAgPEVkaXRvckZvY3VzUHJvdmlkZXI+XG4gICAgICAgIDxFZGl0b3JDb25maWdQcm92aWRlciBlZGl0b3JDb25maWc9e2VkaXRvckNvbmZpZ30gZmllbGRQcm9wcz17ZmllbGRQcm9wc30+XG4gICAgICAgICAgPExleGljYWxFZGl0b3JDb21wb25lbnQgZWRpdG9yQ29uZmlnPXtlZGl0b3JDb25maWd9IG9uQ2hhbmdlPXtvbkNoYW5nZX0gLz5cbiAgICAgICAgPC9FZGl0b3JDb25maWdQcm92aWRlcj5cbiAgICAgIDwvRWRpdG9yRm9jdXNQcm92aWRlcj5cbiAgICA8L0xleGljYWxDb21wb3Nlcj5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIkxleGljYWxDb21wb3NlciIsIlJlYWN0IiwiRWRpdG9yRm9jdXNQcm92aWRlciIsIkxleGljYWxFZGl0b3IiLCJMZXhpY2FsRWRpdG9yQ29tcG9uZW50IiwiRWRpdG9yQ29uZmlnUHJvdmlkZXIiLCJnZXRFbmFibGVkTm9kZXMiLCJMZXhpY2FsUHJvdmlkZXIiLCJwcm9wcyIsImVkaXRvckNvbmZpZyIsImZpZWxkUHJvcHMiLCJvbkNoYW5nZSIsInBhdGgiLCJyZWFkT25seSIsInZhbHVlIiwiaW5pdGlhbENvbmZpZyIsInNldEluaXRpYWxDb25maWciLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIm5ld0luaXRpYWxDb25maWciLCJlZGl0YWJsZSIsImVkaXRvclN0YXRlIiwiSlNPTiIsInN0cmluZ2lmeSIsInVuZGVmaW5lZCIsIm5hbWVzcGFjZSIsImxleGljYWwiLCJub2RlcyIsIm9uRXJyb3IiLCJlcnJvciIsInRoZW1lIiwiZmVhdHVyZXMiLCJob29rcyIsImxvYWQiLCJsZW5ndGgiLCJmb3JFYWNoIiwiaG9vayIsImluY29taW5nRWRpdG9yU3RhdGUiLCJFcnJvciIsIkFycmF5IiwiaXNBcnJheSIsImNyZWF0ZUVsZW1lbnQiLCJwIiwia2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/LexicalProvider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/MarkdownShortcut/index.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/MarkdownShortcut/index.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MarkdownShortcutPlugin: () => (/* binding */ MarkdownShortcutPlugin)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalMarkdownShortcutPlugin_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lexical/react/LexicalMarkdownShortcutPlugin.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalMarkdownShortcutPlugin.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _config_client_EditorConfigProvider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config/client/EditorConfigProvider.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/config/client/EditorConfigProvider.js\");\n/* __next_internal_client_entry_do_not_use__ MarkdownShortcutPlugin auto */ var _s = $RefreshSig$();\n\n\n\nconst MarkdownShortcutPlugin = ()=>{\n    _s();\n    const { editorConfig } = (0,_config_client_EditorConfigProvider_js__WEBPACK_IMPORTED_MODULE_1__.useEditorConfigContext)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_lexical_react_LexicalMarkdownShortcutPlugin_js__WEBPACK_IMPORTED_MODULE_2__.MarkdownShortcutPlugin, {\n        transformers: editorConfig.features.markdownTransformers\n    });\n}; //# sourceMappingURL=index.js.map\n_s(MarkdownShortcutPlugin, \"2hHJXyeg8rRHJqOaN06n5Lbpsn0=\", false, function() {\n    return [\n        _config_client_EditorConfigProvider_js__WEBPACK_IMPORTED_MODULE_1__.useEditorConfigContext\n    ];\n});\n_c = MarkdownShortcutPlugin;\nvar _c;\n$RefreshReg$(_c, \"MarkdownShortcutPlugin\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9wbHVnaW5zL01hcmtkb3duU2hvcnRjdXQvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFFeUg7QUFDM0Y7QUFFc0Q7QUFFN0UsTUFBTUEseUJBQW1DOztJQUM5QyxNQUFNLEVBQUVJLFlBQVksRUFBRSxHQUFHRCw4RkFBc0JBO0lBRS9DLHFCQUFPRCxnREFBQSxDQUFDRCxtR0FBNkJBLEVBQTdCQTtRQUE4QkssY0FBY0YsYUFBYUcsUUFBUSxDQUFDQyxvQkFBb0I7O0FBQ2hHLEVBQUM7R0FKWVI7O1FBQ2NHLDBGQUFzQkE7OztLQURwQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uLy4uLy4uL3NyYy9maWVsZC9sZXhpY2FsL3BsdWdpbnMvTWFya2Rvd25TaG9ydGN1dC9pbmRleC50c3g/MzU2NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcblxuaW1wb3J0IHsgTWFya2Rvd25TaG9ydGN1dFBsdWdpbiBhcyBMZXhpY2FsTWFya2Rvd25TaG9ydGN1dFBsdWdpbiB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxNYXJrZG93blNob3J0Y3V0UGx1Z2luLmpzJ1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IHVzZUVkaXRvckNvbmZpZ0NvbnRleHQgfSBmcm9tICcuLi8uLi9jb25maWcvY2xpZW50L0VkaXRvckNvbmZpZ1Byb3ZpZGVyLmpzJ1xuXG5leHBvcnQgY29uc3QgTWFya2Rvd25TaG9ydGN1dFBsdWdpbjogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IHsgZWRpdG9yQ29uZmlnIH0gPSB1c2VFZGl0b3JDb25maWdDb250ZXh0KClcblxuICByZXR1cm4gPExleGljYWxNYXJrZG93blNob3J0Y3V0UGx1Z2luIHRyYW5zZm9ybWVycz17ZWRpdG9yQ29uZmlnLmZlYXR1cmVzLm1hcmtkb3duVHJhbnNmb3JtZXJzfSAvPlxufVxuIl0sIm5hbWVzIjpbIk1hcmtkb3duU2hvcnRjdXRQbHVnaW4iLCJMZXhpY2FsTWFya2Rvd25TaG9ydGN1dFBsdWdpbiIsIlJlYWN0IiwidXNlRWRpdG9yQ29uZmlnQ29udGV4dCIsImVkaXRvckNvbmZpZyIsImNyZWF0ZUVsZW1lbnQiLCJ0cmFuc2Zvcm1lcnMiLCJmZWF0dXJlcyIsIm1hcmtkb3duVHJhbnNmb3JtZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/MarkdownShortcut/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/SlashMenu/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/SlashMenu/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SlashMenuPlugin: () => (/* binding */ SlashMenuPlugin)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var _payloadcms_ui_providers_Translation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @payloadcms/ui/providers/Translation */ \"(app-pages-browser)/./node_modules/@payloadcms/ui/dist/providers/Translation/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _config_client_EditorConfigProvider_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config/client/EditorConfigProvider.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/config/client/EditorConfigProvider.js\");\n/* harmony import */ var _LexicalTypeaheadMenuPlugin_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./LexicalTypeaheadMenuPlugin/index.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/SlashMenu/LexicalTypeaheadMenuPlugin/index.js\");\n/* harmony import */ var _index_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index.scss */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/SlashMenu/index.scss\");\n/* harmony import */ var _useMenuTriggerMatch_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./useMenuTriggerMatch.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/SlashMenu/useMenuTriggerMatch.js\");\n/* __next_internal_client_entry_do_not_use__ SlashMenuPlugin auto */ var _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\nconst baseClass = \"slash-menu-popup\";\nfunction SlashMenuItem(param) {\n    let { isSelected, item, onClick, onMouseEnter } = param;\n    _s();\n    const { i18n } = (0,_payloadcms_ui_providers_Translation__WEBPACK_IMPORTED_MODULE_0__.useTranslation)();\n    let className = \"\".concat(baseClass, \"__item \").concat(baseClass, \"__item-\").concat(item.key);\n    if (isSelected) {\n        className += \" \".concat(baseClass, \"__item--selected\");\n    }\n    let title = item.key;\n    if (item.label) {\n        title = typeof item.label === \"function\" ? item.label({\n            i18n\n        }) : item.label;\n    }\n    // Crop title to max. 25 characters\n    if (title.length > 25) {\n        title = title.substring(0, 25) + \"...\";\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"button\", {\n        \"aria-selected\": isSelected,\n        className: className,\n        id: baseClass + \"__item-\" + item.key,\n        key: item.key,\n        onClick: onClick,\n        onMouseEnter: onMouseEnter,\n        ref: item.ref,\n        role: \"item\",\n        tabIndex: -1,\n        type: \"button\"\n    }, (item === null || item === void 0 ? void 0 : item.Icon) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(item.Icon, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n        className: \"\".concat(baseClass, \"__item-text\")\n    }, title));\n}\n_s(SlashMenuItem, \"iD7vDB/EPQWin5ATG71yacngHuk=\", false, function() {\n    return [\n        _payloadcms_ui_providers_Translation__WEBPACK_IMPORTED_MODULE_0__.useTranslation\n    ];\n});\n_c = SlashMenuItem;\nfunction SlashMenuPlugin(param) {\n    let { anchorElem = document.body } = param;\n    _s1();\n    const [editor] = (0,_lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_7__.useLexicalComposerContext)();\n    const [queryString, setQueryString] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const { editorConfig } = (0,_config_client_EditorConfigProvider_js__WEBPACK_IMPORTED_MODULE_3__.useEditorConfigContext)();\n    const { i18n } = (0,_payloadcms_ui_providers_Translation__WEBPACK_IMPORTED_MODULE_0__.useTranslation)();\n    const checkForTriggerMatch = (0,_useMenuTriggerMatch_js__WEBPACK_IMPORTED_MODULE_6__.useMenuTriggerMatch)(\"/\", {\n        minLength: 0\n    });\n    const getDynamicItems = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        let groupWithItems = [];\n        for (const dynamicItem of editorConfig.features.slashMenu.dynamicGroups){\n            const dynamicGroupWithItems = dynamicItem({\n                editor,\n                queryString\n            });\n            groupWithItems = groupWithItems.concat(dynamicGroupWithItems);\n        }\n        return groupWithItems;\n    }, [\n        editor,\n        queryString,\n        editorConfig === null || editorConfig === void 0 ? void 0 : editorConfig.features\n    ]);\n    const groups = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        let groupsWithItems = [];\n        var _editorConfig_features_slashMenu_groups;\n        for (const groupWithItem of (_editorConfig_features_slashMenu_groups = editorConfig === null || editorConfig === void 0 ? void 0 : editorConfig.features.slashMenu.groups) !== null && _editorConfig_features_slashMenu_groups !== void 0 ? _editorConfig_features_slashMenu_groups : []){\n            groupsWithItems.push(groupWithItem);\n        }\n        if (queryString) {\n            // Filter current groups first\n            groupsWithItems = groupsWithItems.map((group)=>{\n                const filteredItems = group.items.filter((item)=>{\n                    let itemTitle = item.key;\n                    if (item.label) {\n                        itemTitle = typeof item.label === \"function\" ? item.label({\n                            i18n\n                        }) : item.label;\n                    }\n                    if (new RegExp(queryString, \"gi\").exec(itemTitle)) {\n                        return true;\n                    }\n                    if (item.keywords != null) {\n                        return item.keywords.some((keyword)=>new RegExp(queryString, \"gi\").exec(keyword));\n                    }\n                    return false;\n                });\n                if (filteredItems.length) {\n                    return {\n                        ...group,\n                        items: filteredItems\n                    };\n                }\n                return null;\n            });\n            groupsWithItems = groupsWithItems.filter((group)=>group != null);\n            // Now add dynamic groups\n            const dynamicItemGroups = getDynamicItems();\n            // merge dynamic items into groups\n            for (const dynamicGroup of dynamicItemGroups){\n                var _group_items;\n                // 1. find the group with the same name or create new one\n                let group = groupsWithItems.find((group)=>group.key === dynamicGroup.key);\n                if (!group) {\n                    group = {\n                        ...dynamicGroup,\n                        items: []\n                    };\n                } else {\n                    groupsWithItems = groupsWithItems.filter((group)=>group.key !== dynamicGroup.key);\n                }\n                // 2. Add items to group items array and add to sanitized.slashMenu.groupsWithItems\n                if (group === null || group === void 0 ? void 0 : (_group_items = group.items) === null || _group_items === void 0 ? void 0 : _group_items.length) {\n                    group.items = group.items.concat(group.items);\n                }\n                groupsWithItems.push(group);\n            }\n        }\n        return groupsWithItems;\n    }, [\n        getDynamicItems,\n        queryString,\n        editorConfig === null || editorConfig === void 0 ? void 0 : editorConfig.features,\n        i18n\n    ]);\n    const onSelectItem = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((selectedItem, nodeToRemove, closeMenu, matchingString)=>{\n        if (nodeToRemove) {\n            editor.update(()=>{\n                nodeToRemove.remove();\n            });\n        }\n        selectedItem.onSelect({\n            editor,\n            queryString: matchingString\n        });\n        closeMenu();\n    }, [\n        editor\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_LexicalTypeaheadMenuPlugin_index_js__WEBPACK_IMPORTED_MODULE_4__.LexicalTypeaheadMenuPlugin, {\n        anchorElem: anchorElem,\n        groups: groups,\n        menuRenderFn: (anchorElementRef, param)=>{\n            let { selectItemAndCleanUp, selectedItemKey, setSelectedItemKey } = param;\n            return anchorElementRef.current && groups.length ? /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_2__.createPortal(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n                className: baseClass\n            }, groups.map((group)=>{\n                let groupTitle = group.key;\n                if (group.label) {\n                    groupTitle = typeof group.label === \"function\" ? group.label({\n                        i18n\n                    }) : group.label;\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n                    className: \"\".concat(baseClass, \"__group \").concat(baseClass, \"__group-\").concat(group.key),\n                    key: group.key\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n                    className: \"\".concat(baseClass, \"__group-title\")\n                }, groupTitle), group.items.map((item, oi)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(SlashMenuItem, {\n                        index: oi,\n                        isSelected: selectedItemKey === item.key,\n                        item: item,\n                        key: item.key,\n                        onClick: ()=>{\n                            setSelectedItemKey(item.key);\n                            selectItemAndCleanUp(item);\n                        },\n                        onMouseEnter: ()=>{\n                            setSelectedItemKey(item.key);\n                        }\n                    })));\n            })), anchorElementRef.current) : null;\n        },\n        onQueryChange: setQueryString,\n        onSelectItem: onSelectItem,\n        triggerFn: checkForTriggerMatch\n    }));\n} //# sourceMappingURL=index.js.map\n_s1(SlashMenuPlugin, \"mZbbRD+ntMphuNTlPWofArNWG9U=\", false, function() {\n    return [\n        _lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_7__.useLexicalComposerContext,\n        _config_client_EditorConfigProvider_js__WEBPACK_IMPORTED_MODULE_3__.useEditorConfigContext,\n        _payloadcms_ui_providers_Translation__WEBPACK_IMPORTED_MODULE_0__.useTranslation,\n        _useMenuTriggerMatch_js__WEBPACK_IMPORTED_MODULE_6__.useMenuTriggerMatch\n    ];\n});\n_c1 = SlashMenuPlugin;\nvar _c, _c1;\n$RefreshReg$(_c, \"SlashMenuItem\");\n$RefreshReg$(_c1, \"SlashMenuPlugin\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/SlashMenu/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/SlashMenu/useMenuTriggerMatch.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/SlashMenu/useMenuTriggerMatch.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMenuTriggerMatch: () => (/* binding */ useMenuTriggerMatch)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _LexicalTypeaheadMenuPlugin_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LexicalTypeaheadMenuPlugin/index.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/SlashMenu/LexicalTypeaheadMenuPlugin/index.js\");\n\n\n/**\n * Returns a function which checks if the trigger (e.g. '/') is present in the query and, if so, returns the matching string (text after the trigger)\n */ function useMenuTriggerMatch(/**\n   * Text which triggers the menu. Everything after this text will be used as the query.\n   */ trigger, { maxLength = 75, minLength = 1 }) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ query })=>{\n        const validChars = '[^' + trigger + _LexicalTypeaheadMenuPlugin_index_js__WEBPACK_IMPORTED_MODULE_1__.PUNCTUATION + '\\\\s]';\n        const TypeaheadTriggerRegex = new RegExp('(^|\\\\s|\\\\()(' + '[' + trigger + ']' + '((?:' + validChars + '){0,' + maxLength + '})' + ')$');\n        const match = TypeaheadTriggerRegex.exec(query);\n        if (match !== null) {\n            const maybeLeadingWhitespace = match[1];\n            /**\n         * matchingString is only the text AFTER the trigger text. (So everything after the /)\n         */ const matchingString = match[3];\n            if (matchingString.length >= minLength) {\n                return {\n                    leadOffset: match.index + maybeLeadingWhitespace.length,\n                    matchingString,\n                    replaceableString: match[2]\n                };\n            }\n        }\n        return null;\n    }, [\n        maxLength,\n        minLength,\n        trigger\n    ]);\n}\n\n//# sourceMappingURL=useMenuTriggerMatch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9wbHVnaW5zL1NsYXNoTWVudS91c2VNZW51VHJpZ2dlck1hdGNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvQztBQUNnQztBQUNwRTtBQUNBO0FBQ0EsSUFBVztBQUNYO0FBQ0EsaUJBQWlCLCtCQUErQjtBQUNoRCxXQUFXLGtEQUFXLElBQUksT0FBTztBQUNqQyw0Q0FBNEMsNkVBQVc7QUFDdkQsaUhBQWlILG9CQUFvQjtBQUNySTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHBheWxvYWRjbXMvcmljaHRleHQtbGV4aWNhbC9kaXN0L2ZpZWxkL2xleGljYWwvcGx1Z2lucy9TbGFzaE1lbnUvdXNlTWVudVRyaWdnZXJNYXRjaC5qcz9jYjVhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUFVOQ1RVQVRJT04gfSBmcm9tICcuL0xleGljYWxUeXBlYWhlYWRNZW51UGx1Z2luL2luZGV4LmpzJztcbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGNoZWNrcyBpZiB0aGUgdHJpZ2dlciAoZS5nLiAnLycpIGlzIHByZXNlbnQgaW4gdGhlIHF1ZXJ5IGFuZCwgaWYgc28sIHJldHVybnMgdGhlIG1hdGNoaW5nIHN0cmluZyAodGV4dCBhZnRlciB0aGUgdHJpZ2dlcilcbiAqLyBleHBvcnQgZnVuY3Rpb24gdXNlTWVudVRyaWdnZXJNYXRjaCgvKipcbiAgICogVGV4dCB3aGljaCB0cmlnZ2VycyB0aGUgbWVudS4gRXZlcnl0aGluZyBhZnRlciB0aGlzIHRleHQgd2lsbCBiZSB1c2VkIGFzIHRoZSBxdWVyeS5cbiAgICovIHRyaWdnZXIsIHsgbWF4TGVuZ3RoID0gNzUsIG1pbkxlbmd0aCA9IDEgfSkge1xuICAgIHJldHVybiB1c2VDYWxsYmFjaygoeyBxdWVyeSB9KT0+e1xuICAgICAgICBjb25zdCB2YWxpZENoYXJzID0gJ1teJyArIHRyaWdnZXIgKyBQVU5DVFVBVElPTiArICdcXFxcc10nO1xuICAgICAgICBjb25zdCBUeXBlYWhlYWRUcmlnZ2VyUmVnZXggPSBuZXcgUmVnRXhwKCcoXnxcXFxcc3xcXFxcKCkoJyArICdbJyArIHRyaWdnZXIgKyAnXScgKyAnKCg/OicgKyB2YWxpZENoYXJzICsgJyl7MCwnICsgbWF4TGVuZ3RoICsgJ30pJyArICcpJCcpO1xuICAgICAgICBjb25zdCBtYXRjaCA9IFR5cGVhaGVhZFRyaWdnZXJSZWdleC5leGVjKHF1ZXJ5KTtcbiAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBtYXliZUxlYWRpbmdXaGl0ZXNwYWNlID0gbWF0Y2hbMV07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICogbWF0Y2hpbmdTdHJpbmcgaXMgb25seSB0aGUgdGV4dCBBRlRFUiB0aGUgdHJpZ2dlciB0ZXh0LiAoU28gZXZlcnl0aGluZyBhZnRlciB0aGUgLylcbiAgICAgICAgICovIGNvbnN0IG1hdGNoaW5nU3RyaW5nID0gbWF0Y2hbM107XG4gICAgICAgICAgICBpZiAobWF0Y2hpbmdTdHJpbmcubGVuZ3RoID49IG1pbkxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGxlYWRPZmZzZXQ6IG1hdGNoLmluZGV4ICsgbWF5YmVMZWFkaW5nV2hpdGVzcGFjZS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoaW5nU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICByZXBsYWNlYWJsZVN0cmluZzogbWF0Y2hbMl1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sIFtcbiAgICAgICAgbWF4TGVuZ3RoLFxuICAgICAgICBtaW5MZW5ndGgsXG4gICAgICAgIHRyaWdnZXJcbiAgICBdKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlTWVudVRyaWdnZXJNYXRjaC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/SlashMenu/useMenuTriggerMatch.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/AddBlockHandlePlugin/index.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/AddBlockHandlePlugin/index.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddBlockHandlePlugin: () => (/* binding */ AddBlockHandlePlugin)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _utils_guard_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/guard.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/utils/guard.js\");\n/* harmony import */ var _utils_point_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/point.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/utils/point.js\");\n/* harmony import */ var _utils_rect_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utils/rect.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/utils/rect.js\");\n/* harmony import */ var _SlashMenu_LexicalTypeaheadMenuPlugin_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../SlashMenu/LexicalTypeaheadMenuPlugin/index.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/SlashMenu/LexicalTypeaheadMenuPlugin/index.js\");\n/* harmony import */ var _utils_getCollapsedMargins_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/getCollapsedMargins.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/getCollapsedMargins.js\");\n/* harmony import */ var _utils_getTopLevelNodeKeys_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/getTopLevelNodeKeys.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/getTopLevelNodeKeys.js\");\n/* harmony import */ var _utils_isOnHandleElement_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/isOnHandleElement.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/isOnHandleElement.js\");\n/* harmony import */ var _utils_setHandlePosition_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/setHandlePosition.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/setHandlePosition.js\");\n/* harmony import */ var _index_scss__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./index.scss */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/AddBlockHandlePlugin/index.scss\");\n/* __next_internal_client_entry_do_not_use__ AddBlockHandlePlugin auto */ var _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst SPACE = -24;\nconst ADD_BLOCK_MENU_CLASSNAME = \"add-block-menu\";\nconst Downward = 1;\nconst Upward = -1;\nconst Indeterminate = 0;\nlet prevIndex = Infinity;\nfunction getCurrentIndex(keysLength) {\n    if (keysLength === 0) {\n        return Infinity;\n    }\n    if (prevIndex >= 0 && prevIndex < keysLength) {\n        return prevIndex;\n    }\n    return Math.floor(keysLength / 2);\n}\nfunction getBlockElement(anchorElem, editor, event) {\n    let useEdgeAsDefault = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false, horizontalOffset = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;\n    const anchorElementRect = anchorElem.getBoundingClientRect();\n    const topLevelNodeKeys = (0,_utils_getTopLevelNodeKeys_js__WEBPACK_IMPORTED_MODULE_7__.getTopLevelNodeKeys)(editor);\n    let blockElem = null;\n    let blockNode = null;\n    // Return null if matching block element is the first or last node\n    editor.getEditorState().read(()=>{\n        if (useEdgeAsDefault) {\n            const [firstNode, lastNode] = [\n                editor.getElementByKey(topLevelNodeKeys[0]),\n                editor.getElementByKey(topLevelNodeKeys[topLevelNodeKeys.length - 1])\n            ];\n            const [firstNodeRect, lastNodeRect] = [\n                firstNode === null || firstNode === void 0 ? void 0 : firstNode.getBoundingClientRect(),\n                lastNode === null || lastNode === void 0 ? void 0 : lastNode.getBoundingClientRect()\n            ];\n            if (firstNodeRect && lastNodeRect) {\n                if (event.y < firstNodeRect.top) {\n                    blockElem = firstNode;\n                } else if (event.y > lastNodeRect.bottom) {\n                    blockElem = lastNode;\n                }\n                if (blockElem) {\n                    return {\n                        blockElem: null\n                    };\n                }\n            }\n        }\n        // Find matching block element\n        let index = getCurrentIndex(topLevelNodeKeys.length);\n        let direction = Indeterminate;\n        while(index >= 0 && index < topLevelNodeKeys.length){\n            const key = topLevelNodeKeys[index];\n            const elem = editor.getElementByKey(key);\n            if (elem === null) {\n                break;\n            }\n            const point = new _utils_point_js__WEBPACK_IMPORTED_MODULE_3__.Point(event.x + horizontalOffset, event.y);\n            const domRect = _utils_rect_js__WEBPACK_IMPORTED_MODULE_4__.Rect.fromDOM(elem);\n            const { marginBottom, marginTop } = (0,_utils_getCollapsedMargins_js__WEBPACK_IMPORTED_MODULE_6__.getCollapsedMargins)(elem);\n            const rect = domRect.generateNewRect({\n                bottom: domRect.bottom + marginBottom,\n                left: anchorElementRect.left,\n                right: anchorElementRect.right,\n                top: domRect.top - marginTop\n            });\n            const { reason: { isOnBottomSide, isOnTopSide }, result } = rect.contains(point);\n            if (result) {\n                blockElem = elem;\n                blockNode = (0,lexical__WEBPACK_IMPORTED_MODULE_11__.$getNodeByKey)(key);\n                prevIndex = index;\n                break;\n            }\n            if (direction === Indeterminate) {\n                if (isOnTopSide) {\n                    direction = Upward;\n                } else if (isOnBottomSide) {\n                    direction = Downward;\n                } else {\n                    // stop search block element\n                    direction = Infinity;\n                }\n            }\n            index += direction;\n        }\n    });\n    return {\n        blockElem,\n        blockNode\n    };\n}\nfunction useAddBlockHandle(editor, anchorElem, isEditable) {\n    _s();\n    const scrollerElem = anchorElem.parentElement;\n    const menuRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const [hoveredElement, setHoveredElement] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var // Since the draggableBlockElem is outside the actual editor, we need to listen to the document\n        // to be able to detect when the mouse is outside the editor and respect a buffer around\n        // the scrollerElem to avoid the draggableBlockElem disappearing too early.\n        _document;\n        function onDocumentMouseMove(event) {\n            const target = event.target;\n            if (!(0,_utils_guard_js__WEBPACK_IMPORTED_MODULE_2__.isHTMLElement)(target)) {\n                return;\n            }\n            let distanceFromScrollerElem = 0;\n            // Calculate distance between scrollerElem and target if target is not in scrollerElem\n            if (scrollerElem && !scrollerElem.contains(target)) {\n                const { bottom, left, right, top } = scrollerElem.getBoundingClientRect();\n                const { pageX, pageY } = event;\n                const horizontalBuffer = 50;\n                const verticalBuffer = 25;\n                const adjustedTop = top + window.scrollY;\n                const adjustedBottom = bottom + window.scrollY;\n                if (pageY < adjustedTop - verticalBuffer || pageY > adjustedBottom + verticalBuffer || pageX < left - horizontalBuffer || pageX > right + horizontalBuffer) {\n                    if (hoveredElement !== null) {\n                        setHoveredElement(null);\n                    }\n                    return;\n                }\n                // This is used to allow the _emptyBlockElem to be found when the mouse is in the\n                // buffer zone around the scrollerElem.\n                if (pageX < left || pageX > right) {\n                    distanceFromScrollerElem = pageX < left ? pageX - left : pageX - right;\n                }\n            }\n            if ((0,_utils_isOnHandleElement_js__WEBPACK_IMPORTED_MODULE_8__.isOnHandleElement)(target, ADD_BLOCK_MENU_CLASSNAME)) {\n                return;\n            }\n            const { blockElem: _emptyBlockElem, blockNode } = getBlockElement(anchorElem, editor, event, false, -distanceFromScrollerElem);\n            if (!_emptyBlockElem) {\n                return;\n            }\n            if ((hoveredElement === null || hoveredElement === void 0 ? void 0 : hoveredElement.node) !== blockNode || (hoveredElement === null || hoveredElement === void 0 ? void 0 : hoveredElement.elem) !== _emptyBlockElem) {\n                setHoveredElement({\n                    elem: _emptyBlockElem,\n                    node: blockNode\n                });\n            }\n        }\n        (_document = document) === null || _document === void 0 ? void 0 : _document.addEventListener(\"mousemove\", onDocumentMouseMove);\n        return ()=>{\n            var _document;\n            (_document = document) === null || _document === void 0 ? void 0 : _document.removeEventListener(\"mousemove\", onDocumentMouseMove);\n        };\n    }, [\n        scrollerElem,\n        anchorElem,\n        editor,\n        hoveredElement\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (menuRef.current && (hoveredElement === null || hoveredElement === void 0 ? void 0 : hoveredElement.node)) {\n            editor.getEditorState().read(()=>{\n                // Check if blockNode is an empty text node\n                let isEmptyParagraph = true;\n                if (hoveredElement.node.getType() !== \"paragraph\" || hoveredElement.node.getTextContent() !== \"\") {\n                    isEmptyParagraph = false;\n                }\n                (0,_utils_setHandlePosition_js__WEBPACK_IMPORTED_MODULE_9__.setHandlePosition)(hoveredElement === null || hoveredElement === void 0 ? void 0 : hoveredElement.elem, menuRef.current, anchorElem, isEmptyParagraph ? SPACE : SPACE - 20);\n            });\n        }\n    }, [\n        anchorElem,\n        hoveredElement,\n        editor\n    ]);\n    const handleAddClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        let hoveredElementToUse = hoveredElement;\n        if (!(hoveredElementToUse === null || hoveredElementToUse === void 0 ? void 0 : hoveredElementToUse.node)) {\n            return;\n        }\n        // 1. Update hoveredElement.node to a new paragraph node if the hoveredElement.node is not a paragraph node\n        editor.update(()=>{\n            // Check if blockNode is an empty text node\n            let isEmptyParagraph = true;\n            if (hoveredElementToUse.node.getType() !== \"paragraph\" || hoveredElementToUse.node.getTextContent() !== \"\") {\n                isEmptyParagraph = false;\n            }\n            if (!isEmptyParagraph) {\n                const newParagraph = (0,lexical__WEBPACK_IMPORTED_MODULE_11__.$createParagraphNode)();\n                hoveredElementToUse.node.insertAfter(newParagraph);\n                setTimeout(()=>{\n                    hoveredElementToUse = {\n                        elem: editor.getElementByKey(newParagraph.getKey()),\n                        node: newParagraph\n                    };\n                    setHoveredElement(hoveredElementToUse);\n                }, 0);\n            }\n        });\n        // 2. Focus on the new paragraph node\n        setTimeout(()=>{\n            editor.update(()=>{\n                editor.focus();\n                if (hoveredElementToUse.node && \"select\" in hoveredElementToUse.node && typeof hoveredElementToUse.node.select === \"function\") {\n                    hoveredElementToUse.node.select();\n                }\n            });\n        }, 1);\n        // Make sure this is called AFTER the focusing has been processed by the browser\n        // Otherwise, this won't work\n        setTimeout(()=>{\n            editor.dispatchCommand(_SlashMenu_LexicalTypeaheadMenuPlugin_index_js__WEBPACK_IMPORTED_MODULE_5__.ENABLE_SLASH_MENU_COMMAND, {\n                node: hoveredElementToUse.node\n            });\n        }, 2);\n        event.stopPropagation();\n        event.preventDefault();\n    }, [\n        editor,\n        hoveredElement\n    ]);\n    return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        className: \"icon add-block-menu\",\n        onClick: (event)=>{\n            handleAddClick(event);\n        },\n        ref: menuRef,\n        type: \"button\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: isEditable ? \"icon\" : \"\"\n    }))), anchorElem);\n}\n_s(useAddBlockHandle, \"MUZTLplR9vUdAjjDxZZtmc/8Rws=\");\nfunction AddBlockHandlePlugin(param) {\n    let { anchorElem = document.body } = param;\n    _s1();\n    const [editor] = (0,_lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_12__.useLexicalComposerContext)();\n    return useAddBlockHandle(editor, anchorElem, editor._editable);\n} //# sourceMappingURL=index.js.map\n_s1(AddBlockHandlePlugin, \"H2L36K60v+PxW8l97oeCnloWYGA=\", false, function() {\n    return [\n        _lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_12__.useLexicalComposerContext,\n        useAddBlockHandle\n    ];\n});\n_c = AddBlockHandlePlugin;\nvar _c;\n$RefreshReg$(_c, \"AddBlockHandlePlugin\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvQWRkQmxvY2tIYW5kbGVQbHVnaW4vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR29GO0FBQ3ZCO0FBQy9CO0FBQ2tDO0FBQ3hCO0FBRWU7QUFDUjtBQUNGO0FBQ2tEO0FBQzFCO0FBQ0E7QUFDSjtBQUNBO0FBQzVDO0FBRXJCLE1BQU1pQixRQUFRLENBQUM7QUFDZixNQUFNQywyQkFBMkI7QUFFakMsTUFBTUMsV0FBVztBQUNqQixNQUFNQyxTQUFTLENBQUM7QUFDaEIsTUFBTUMsZ0JBQWdCO0FBRXRCLElBQUlDLFlBQVlDO0FBRWhCLFNBQVNDLGdCQUFnQkMsVUFBa0I7SUFDekMsSUFBSUEsZUFBZSxHQUFHO1FBQ3BCLE9BQU9GO0lBQ1Q7SUFDQSxJQUFJRCxhQUFhLEtBQUtBLFlBQVlHLFlBQVk7UUFDNUMsT0FBT0g7SUFDVDtJQUVBLE9BQU9JLEtBQUtDLEtBQUssQ0FBQ0YsYUFBYTtBQUNqQztBQUVBLFNBQVNHLGdCQUNQQyxVQUF1QixFQUN2QkMsTUFBcUIsRUFDckJDLEtBQWlCO1FBQ2pCQyxtQkFBQUEsaUVBQW1CLE9BQ25CQyxtQkFBQUEsaUVBQW1CO0lBS25CLE1BQU1DLG9CQUFvQkwsV0FBV00scUJBQXFCO0lBQzFELE1BQU1DLG1CQUFtQnRCLGtGQUFtQkEsQ0FBQ2dCO0lBRTdDLElBQUlPLFlBQWdDO0lBQ3BDLElBQUlDLFlBQWdDO0lBRXBDLGtFQUFrRTtJQUNsRVIsT0FBT1MsY0FBYyxHQUFHQyxJQUFJLENBQUM7UUFDM0IsSUFBSVIsa0JBQWtCO1lBQ3BCLE1BQU0sQ0FBQ1MsV0FBV0MsU0FBUyxHQUFHO2dCQUM1QlosT0FBT2EsZUFBZSxDQUFDUCxnQkFBZ0IsQ0FBQyxFQUFFO2dCQUMxQ04sT0FBT2EsZUFBZSxDQUFDUCxnQkFBZ0IsQ0FBQ0EsaUJBQWlCUSxNQUFNLEdBQUcsRUFBRTthQUNyRTtZQUVELE1BQU0sQ0FBQ0MsZUFBZUMsYUFBYSxHQUFHO2dCQUNwQ0wsc0JBQUFBLGdDQUFBQSxVQUFXTixxQkFBQUE7Z0JBQ1hPLHFCQUFBQSwrQkFBQUEsU0FBVVAscUJBQUFBO2FBQ1g7WUFFRCxJQUFJVSxpQkFBaUJDLGNBQWM7Z0JBQ2pDLElBQUlmLE1BQU1nQixDQUFDLEdBQUdGLGNBQWNHLEdBQUcsRUFBRTtvQkFDL0JYLFlBQVlJO2dCQUNkLE9BQU8sSUFBSVYsTUFBTWdCLENBQUMsR0FBR0QsYUFBYUcsTUFBTSxFQUFFO29CQUN4Q1osWUFBWUs7Z0JBQ2Q7Z0JBRUEsSUFBSUwsV0FBVztvQkFDYixPQUFPO3dCQUNMQSxXQUFXO29CQUNiO2dCQUNGO1lBQ0Y7UUFDRjtRQUVBLDhCQUE4QjtRQUM5QixJQUFJYSxRQUFRMUIsZ0JBQWdCWSxpQkFBaUJRLE1BQU07UUFDbkQsSUFBSU8sWUFBWTlCO1FBRWhCLE1BQU82QixTQUFTLEtBQUtBLFFBQVFkLGlCQUFpQlEsTUFBTSxDQUFFO1lBQ3BELE1BQU1RLE1BQU1oQixnQkFBZ0IsQ0FBQ2MsTUFBTTtZQUNuQyxNQUFNRyxPQUFPdkIsT0FBT2EsZUFBZSxDQUFDUztZQUNwQyxJQUFJQyxTQUFTLE1BQU07Z0JBQ2pCO1lBQ0Y7WUFDQSxNQUFNQyxRQUFRLElBQUk1QyxrREFBS0EsQ0FBQ3FCLE1BQU13QixDQUFDLEdBQUd0QixrQkFBa0JGLE1BQU1nQixDQUFDO1lBQzNELE1BQU1TLFVBQVU3QyxnREFBSUEsQ0FBQzhDLE9BQU8sQ0FBQ0o7WUFDN0IsTUFBTSxFQUFFSyxZQUFZLEVBQUVDLFNBQVMsRUFBRSxHQUFHOUMsa0ZBQW1CQSxDQUFDd0M7WUFFeEQsTUFBTU8sT0FBT0osUUFBUUssZUFBZSxDQUFDO2dCQUNuQ1osUUFBUU8sUUFBUVAsTUFBTSxHQUFHUztnQkFDekJJLE1BQU01QixrQkFBa0I0QixJQUFJO2dCQUM1QkMsT0FBTzdCLGtCQUFrQjZCLEtBQUs7Z0JBQzlCZixLQUFLUSxRQUFRUixHQUFHLEdBQUdXO1lBQ3JCO1lBRUEsTUFBTSxFQUNKSyxRQUFRLEVBQUVDLGNBQWMsRUFBRUMsV0FBVyxFQUFFLEVBQ3ZDQyxNQUFNLEVBQ1AsR0FBR1AsS0FBS1EsUUFBUSxDQUFDZDtZQUVsQixJQUFJYSxRQUFRO2dCQUNWOUIsWUFBWWdCO2dCQUNaZixZQUFZcEMsdURBQWFBLENBQUNrRDtnQkFDMUI5QixZQUFZNEI7Z0JBQ1o7WUFDRjtZQUVBLElBQUlDLGNBQWM5QixlQUFlO2dCQUMvQixJQUFJNkMsYUFBYTtvQkFDZmYsWUFBWS9CO2dCQUNkLE9BQU8sSUFBSTZDLGdCQUFnQjtvQkFDekJkLFlBQVloQztnQkFDZCxPQUFPO29CQUNMLDRCQUE0QjtvQkFDNUJnQyxZQUFZNUI7Z0JBQ2Q7WUFDRjtZQUVBMkIsU0FBU0M7UUFDWDtJQUNGO0lBRUEsT0FBTztRQUNMZDtRQUNBQztJQUNGO0FBQ0Y7QUFFQSxTQUFTK0Isa0JBQ1B2QyxNQUFxQixFQUNyQkQsVUFBdUIsRUFDdkJ5QyxVQUFtQjs7SUFFbkIsTUFBTUMsZUFBZTFDLFdBQVcyQyxhQUFhO0lBRTdDLE1BQU1DLFVBQVVuRSw2Q0FBTUEsQ0FBb0I7SUFDMUMsTUFBTSxDQUFDb0UsZ0JBQWdCQyxrQkFBa0IsR0FBR3BFLCtDQUFRQSxDQUcxQztJQUVWRixnREFBU0EsQ0FBQztZQXlEUiwrRkFBK0Y7UUFDL0Ysd0ZBQXdGO1FBQ3hGLDJFQUEyRTtRQUMzRXVFO1FBM0RBLFNBQVNDLG9CQUFvQjlDLEtBQWlCO1lBQzVDLE1BQU0rQyxTQUFTL0MsTUFBTStDLE1BQU07WUFDM0IsSUFBSSxDQUFDckUsOERBQWFBLENBQUNxRSxTQUFTO2dCQUMxQjtZQUNGO1lBRUEsSUFBSUMsMkJBQTJCO1lBQy9CLHNGQUFzRjtZQUN0RixJQUFJUixnQkFBZ0IsQ0FBQ0EsYUFBYUgsUUFBUSxDQUFDVSxTQUFTO2dCQUNsRCxNQUFNLEVBQUU3QixNQUFNLEVBQUVhLElBQUksRUFBRUMsS0FBSyxFQUFFZixHQUFHLEVBQUUsR0FBR3VCLGFBQWFwQyxxQkFBcUI7Z0JBQ3ZFLE1BQU0sRUFBRTZDLEtBQUssRUFBRUMsS0FBSyxFQUFFLEdBQUdsRDtnQkFDekIsTUFBTW1ELG1CQUFtQjtnQkFDekIsTUFBTUMsaUJBQWlCO2dCQUN2QixNQUFNQyxjQUFjcEMsTUFBTXFDLE9BQU9DLE9BQU87Z0JBQ3hDLE1BQU1DLGlCQUFpQnRDLFNBQVNvQyxPQUFPQyxPQUFPO2dCQUU5QyxJQUNFTCxRQUFRRyxjQUFjRCxrQkFDdEJGLFFBQVFNLGlCQUFpQkosa0JBQ3pCSCxRQUFRbEIsT0FBT29CLG9CQUNmRixRQUFRakIsUUFBUW1CLGtCQUNoQjtvQkFDQSxJQUFJUixtQkFBbUIsTUFBTTt3QkFDM0JDLGtCQUFrQjtvQkFDcEI7b0JBQ0E7Z0JBQ0Y7Z0JBRUEsaUZBQWlGO2dCQUNqRix1Q0FBdUM7Z0JBQ3ZDLElBQUlLLFFBQVFsQixRQUFRa0IsUUFBUWpCLE9BQU87b0JBQ2pDZ0IsMkJBQTJCQyxRQUFRbEIsT0FBT2tCLFFBQVFsQixPQUFPa0IsUUFBUWpCO2dCQUNuRTtZQUNGO1lBRUEsSUFBSWhELDhFQUFpQkEsQ0FBQytELFFBQVE1RCwyQkFBMkI7Z0JBQ3ZEO1lBQ0Y7WUFDQSxNQUFNLEVBQUVtQixXQUFXbUQsZUFBZSxFQUFFbEQsU0FBUyxFQUFFLEdBQUdWLGdCQUNoREMsWUFDQUMsUUFDQUMsT0FDQSxPQUNBLENBQUNnRDtZQUVILElBQUksQ0FBQ1MsaUJBQWlCO2dCQUNwQjtZQUNGO1lBQ0EsSUFBSWQsQ0FBQUEsMkJBQUFBLHFDQUFBQSxlQUFnQmUsSUFBQUEsTUFBU25ELGFBQWFvQyxDQUFBQSwyQkFBQUEscUNBQUFBLGVBQWdCckIsSUFBQUEsTUFBU21DLGlCQUFpQjtnQkFDbEZiLGtCQUFrQjtvQkFDaEJ0QixNQUFNbUM7b0JBQ05DLE1BQU1uRDtnQkFDUjtZQUNGO1FBQ0Y7U0FLQXNDLFlBQUFBLHNCQUFBQSxnQ0FBQUEsVUFBVWMsZ0JBQUFBLENBQWlCLGFBQWFiO1FBRXhDLE9BQU87Z0JBQ0xEO2FBQUFBLFlBQUFBLHNCQUFBQSxnQ0FBQUEsVUFBVWUsbUJBQUFBLENBQW9CLGFBQWFkO1FBQzdDO0lBQ0YsR0FBRztRQUFDTjtRQUFjMUM7UUFBWUM7UUFBUTRDO0tBQWU7SUFFckRyRSxnREFBU0EsQ0FBQztRQUNSLElBQUlvRSxRQUFRbUIsT0FBTyxLQUFJbEIsMkJBQUFBLHFDQUFBQSxlQUFnQmUsSUFBQUEsR0FBTTtZQUMzQzNELE9BQU9TLGNBQWMsR0FBR0MsSUFBSSxDQUFDO2dCQUMzQiwyQ0FBMkM7Z0JBQzNDLElBQUlxRCxtQkFBbUI7Z0JBQ3ZCLElBQ0VuQixlQUFlZSxJQUFJLENBQUNLLE9BQU8sT0FBTyxlQUNsQ3BCLGVBQWVlLElBQUksQ0FBQ00sY0FBYyxPQUFPLElBQ3pDO29CQUNBRixtQkFBbUI7Z0JBQ3JCO2dCQUVBN0UsOEVBQWlCQSxDQUNmMEQsMkJBQUFBLHFDQUFBQSxlQUFnQnJCLElBQUFBLEVBQ2hCb0IsUUFBUW1CLE9BQU8sRUFDZi9ELFlBQ0FnRSxtQkFBbUI1RSxRQUFRQSxRQUFRO1lBRXZDO1FBQ0Y7SUFDRixHQUFHO1FBQUNZO1FBQVk2QztRQUFnQjVDO0tBQU87SUFFdkMsTUFBTWtFLGlCQUFpQjVGLGtEQUFXQSxDQUNoQyxDQUFDMkI7UUFDQyxJQUFJa0Usc0JBQXNCdkI7UUFDMUIsSUFBSSxFQUFDdUIsZ0NBQUFBLDBDQUFBQSxvQkFBcUJSLElBQUFBLEdBQU07WUFDOUI7UUFDRjtRQUVBLDJHQUEyRztRQUMzRzNELE9BQU9vRSxNQUFNLENBQUM7WUFDWiwyQ0FBMkM7WUFDM0MsSUFBSUwsbUJBQW1CO1lBQ3ZCLElBQ0VJLG9CQUFvQlIsSUFBSSxDQUFDSyxPQUFPLE9BQU8sZUFDdkNHLG9CQUFvQlIsSUFBSSxDQUFDTSxjQUFjLE9BQU8sSUFDOUM7Z0JBQ0FGLG1CQUFtQjtZQUNyQjtZQUVBLElBQUksQ0FBQ0Esa0JBQWtCO2dCQUNyQixNQUFNTSxlQUFlbEcsOERBQW9CQTtnQkFDekNnRyxvQkFBb0JSLElBQUksQ0FBQ1csV0FBVyxDQUFDRDtnQkFFckNFLFdBQVc7b0JBQ1RKLHNCQUFzQjt3QkFDcEI1QyxNQUFNdkIsT0FBT2EsZUFBZSxDQUFDd0QsYUFBYUcsTUFBTTt3QkFDaERiLE1BQU1VO29CQUNSO29CQUNBeEIsa0JBQWtCc0I7Z0JBQ3BCLEdBQUc7WUFDTDtRQUNGO1FBRUEscUNBQXFDO1FBQ3JDSSxXQUFXO1lBQ1R2RSxPQUFPb0UsTUFBTSxDQUFDO2dCQUNacEUsT0FBT3lFLEtBQUs7Z0JBRVosSUFDRU4sb0JBQW9CUixJQUFJLElBQ3hCLFlBQVlRLG9CQUFvQlIsSUFBSSxJQUNwQyxPQUFPUSxvQkFBb0JSLElBQUksQ0FBQ2UsTUFBTSxLQUFLLFlBQzNDO29CQUNBUCxvQkFBb0JSLElBQUksQ0FBQ2UsTUFBTTtnQkFDakM7WUFDRjtRQUNGLEdBQUc7UUFFSCxnRkFBZ0Y7UUFDaEYsNkJBQTZCO1FBQzdCSCxXQUFXO1lBQ1R2RSxPQUFPMkUsZUFBZSxDQUFDN0YscUdBQXlCQSxFQUFFO2dCQUNoRDZFLE1BQU1RLG9CQUFvQlIsSUFBSTtZQUNoQztRQUNGLEdBQUc7UUFFSDFELE1BQU0yRSxlQUFlO1FBQ3JCM0UsTUFBTTRFLGNBQWM7SUFDdEIsR0FDQTtRQUFDN0U7UUFBUTRDO0tBQWU7SUFHMUIscUJBQU9sRSx1REFBWUEsQ0FBWkEsV0FBQUEsR0FDTEwsZ0RBQUEsQ0FBQ0EsMkNBQWMsc0JBQ2JBLGdEQUFBLENBQUMyRyxVQUFBQTtRQUNDQyxXQUFVO1FBQ1ZDLFNBQVMsQ0FBQ2pGO1lBQ1JpRSxlQUFlakU7UUFDakI7UUFDQWtGLEtBQUt4QztRQUNMeUMsTUFBSztxQkFFTC9HLGdEQUFBLENBQUNnSCxPQUFBQTtRQUFJSixXQUFXekMsYUFBYSxTQUFTO1VBRzFDekM7QUFFSjtHQWxMU3dDO0FBb0xGLFNBQVMrQyxxQkFBcUIsS0FJcEM7UUFKb0MsRUFDbkN2RixhQUFhK0MsU0FBU3lDLElBQUksRUFHM0IsR0FKb0M7O0lBS25DLE1BQU0sQ0FBQ3ZGLE9BQU8sR0FBRzlCLG9HQUF5QkE7SUFDMUMsT0FBT3FFLGtCQUFrQnZDLFFBQVFELFlBQVlDLE9BQU93RixTQUFTO0FBQy9EO0lBUGdCRjs7UUFLR3BILGdHQUF5QkE7UUFDbkNxRTs7O0tBTk8rQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vLi4vLi4vLi4vc3JjL2ZpZWxkL2xleGljYWwvcGx1Z2lucy9oYW5kbGVzL0FkZEJsb2NrSGFuZGxlUGx1Z2luL2luZGV4LnRzeD81OTYzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50J1xuaW1wb3J0IHR5cGUgeyBMZXhpY2FsRWRpdG9yLCBMZXhpY2FsTm9kZSwgUGFyYWdyYXBoTm9kZSB9IGZyb20gJ2xleGljYWwnXG5cbmltcG9ydCB7IHVzZUxleGljYWxDb21wb3NlckNvbnRleHQgfSBmcm9tICdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29tcG9zZXJDb250ZXh0LmpzJ1xuaW1wb3J0IHsgJGNyZWF0ZVBhcmFncmFwaE5vZGUsICRnZXROb2RlQnlLZXkgfSBmcm9tICdsZXhpY2FsJ1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjcmVhdGVQb3J0YWwgfSBmcm9tICdyZWFjdC1kb20nXG5cbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tICcuLi8uLi8uLi91dGlscy9ndWFyZC5qcydcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvcG9pbnQuanMnXG5pbXBvcnQgeyBSZWN0IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvcmVjdC5qcydcbmltcG9ydCB7IEVOQUJMRV9TTEFTSF9NRU5VX0NPTU1BTkQgfSBmcm9tICcuLi8uLi9TbGFzaE1lbnUvTGV4aWNhbFR5cGVhaGVhZE1lbnVQbHVnaW4vaW5kZXguanMnXG5pbXBvcnQgeyBnZXRDb2xsYXBzZWRNYXJnaW5zIH0gZnJvbSAnLi4vdXRpbHMvZ2V0Q29sbGFwc2VkTWFyZ2lucy5qcydcbmltcG9ydCB7IGdldFRvcExldmVsTm9kZUtleXMgfSBmcm9tICcuLi91dGlscy9nZXRUb3BMZXZlbE5vZGVLZXlzLmpzJ1xuaW1wb3J0IHsgaXNPbkhhbmRsZUVsZW1lbnQgfSBmcm9tICcuLi91dGlscy9pc09uSGFuZGxlRWxlbWVudC5qcydcbmltcG9ydCB7IHNldEhhbmRsZVBvc2l0aW9uIH0gZnJvbSAnLi4vdXRpbHMvc2V0SGFuZGxlUG9zaXRpb24uanMnXG5pbXBvcnQgJy4vaW5kZXguc2NzcydcblxuY29uc3QgU1BBQ0UgPSAtMjRcbmNvbnN0IEFERF9CTE9DS19NRU5VX0NMQVNTTkFNRSA9ICdhZGQtYmxvY2stbWVudSdcblxuY29uc3QgRG93bndhcmQgPSAxXG5jb25zdCBVcHdhcmQgPSAtMVxuY29uc3QgSW5kZXRlcm1pbmF0ZSA9IDBcblxubGV0IHByZXZJbmRleCA9IEluZmluaXR5XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRJbmRleChrZXlzTGVuZ3RoOiBudW1iZXIpOiBudW1iZXIge1xuICBpZiAoa2V5c0xlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBJbmZpbml0eVxuICB9XG4gIGlmIChwcmV2SW5kZXggPj0gMCAmJiBwcmV2SW5kZXggPCBrZXlzTGVuZ3RoKSB7XG4gICAgcmV0dXJuIHByZXZJbmRleFxuICB9XG5cbiAgcmV0dXJuIE1hdGguZmxvb3Ioa2V5c0xlbmd0aCAvIDIpXG59XG5cbmZ1bmN0aW9uIGdldEJsb2NrRWxlbWVudChcbiAgYW5jaG9yRWxlbTogSFRNTEVsZW1lbnQsXG4gIGVkaXRvcjogTGV4aWNhbEVkaXRvcixcbiAgZXZlbnQ6IE1vdXNlRXZlbnQsXG4gIHVzZUVkZ2VBc0RlZmF1bHQgPSBmYWxzZSxcbiAgaG9yaXpvbnRhbE9mZnNldCA9IDAsXG4pOiB7XG4gIGJsb2NrRWxlbTogSFRNTEVsZW1lbnQgfCBudWxsXG4gIGJsb2NrTm9kZTogTGV4aWNhbE5vZGUgfCBudWxsXG59IHtcbiAgY29uc3QgYW5jaG9yRWxlbWVudFJlY3QgPSBhbmNob3JFbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gIGNvbnN0IHRvcExldmVsTm9kZUtleXMgPSBnZXRUb3BMZXZlbE5vZGVLZXlzKGVkaXRvcilcblxuICBsZXQgYmxvY2tFbGVtOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsXG4gIGxldCBibG9ja05vZGU6IExleGljYWxOb2RlIHwgbnVsbCA9IG51bGxcblxuICAvLyBSZXR1cm4gbnVsbCBpZiBtYXRjaGluZyBibG9jayBlbGVtZW50IGlzIHRoZSBmaXJzdCBvciBsYXN0IG5vZGVcbiAgZWRpdG9yLmdldEVkaXRvclN0YXRlKCkucmVhZCgoKSA9PiB7XG4gICAgaWYgKHVzZUVkZ2VBc0RlZmF1bHQpIHtcbiAgICAgIGNvbnN0IFtmaXJzdE5vZGUsIGxhc3ROb2RlXSA9IFtcbiAgICAgICAgZWRpdG9yLmdldEVsZW1lbnRCeUtleSh0b3BMZXZlbE5vZGVLZXlzWzBdKSxcbiAgICAgICAgZWRpdG9yLmdldEVsZW1lbnRCeUtleSh0b3BMZXZlbE5vZGVLZXlzW3RvcExldmVsTm9kZUtleXMubGVuZ3RoIC0gMV0pLFxuICAgICAgXVxuXG4gICAgICBjb25zdCBbZmlyc3ROb2RlUmVjdCwgbGFzdE5vZGVSZWN0XSA9IFtcbiAgICAgICAgZmlyc3ROb2RlPy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgbGFzdE5vZGU/LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgXVxuXG4gICAgICBpZiAoZmlyc3ROb2RlUmVjdCAmJiBsYXN0Tm9kZVJlY3QpIHtcbiAgICAgICAgaWYgKGV2ZW50LnkgPCBmaXJzdE5vZGVSZWN0LnRvcCkge1xuICAgICAgICAgIGJsb2NrRWxlbSA9IGZpcnN0Tm9kZVxuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnkgPiBsYXN0Tm9kZVJlY3QuYm90dG9tKSB7XG4gICAgICAgICAgYmxvY2tFbGVtID0gbGFzdE5vZGVcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChibG9ja0VsZW0pIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmxvY2tFbGVtOiBudWxsLFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmQgbWF0Y2hpbmcgYmxvY2sgZWxlbWVudFxuICAgIGxldCBpbmRleCA9IGdldEN1cnJlbnRJbmRleCh0b3BMZXZlbE5vZGVLZXlzLmxlbmd0aClcbiAgICBsZXQgZGlyZWN0aW9uID0gSW5kZXRlcm1pbmF0ZVxuXG4gICAgd2hpbGUgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0b3BMZXZlbE5vZGVLZXlzLmxlbmd0aCkge1xuICAgICAgY29uc3Qga2V5ID0gdG9wTGV2ZWxOb2RlS2V5c1tpbmRleF1cbiAgICAgIGNvbnN0IGVsZW0gPSBlZGl0b3IuZ2V0RWxlbWVudEJ5S2V5KGtleSlcbiAgICAgIGlmIChlbGVtID09PSBudWxsKSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjb25zdCBwb2ludCA9IG5ldyBQb2ludChldmVudC54ICsgaG9yaXpvbnRhbE9mZnNldCwgZXZlbnQueSlcbiAgICAgIGNvbnN0IGRvbVJlY3QgPSBSZWN0LmZyb21ET00oZWxlbSlcbiAgICAgIGNvbnN0IHsgbWFyZ2luQm90dG9tLCBtYXJnaW5Ub3AgfSA9IGdldENvbGxhcHNlZE1hcmdpbnMoZWxlbSlcblxuICAgICAgY29uc3QgcmVjdCA9IGRvbVJlY3QuZ2VuZXJhdGVOZXdSZWN0KHtcbiAgICAgICAgYm90dG9tOiBkb21SZWN0LmJvdHRvbSArIG1hcmdpbkJvdHRvbSxcbiAgICAgICAgbGVmdDogYW5jaG9yRWxlbWVudFJlY3QubGVmdCxcbiAgICAgICAgcmlnaHQ6IGFuY2hvckVsZW1lbnRSZWN0LnJpZ2h0LFxuICAgICAgICB0b3A6IGRvbVJlY3QudG9wIC0gbWFyZ2luVG9wLFxuICAgICAgfSlcblxuICAgICAgY29uc3Qge1xuICAgICAgICByZWFzb246IHsgaXNPbkJvdHRvbVNpZGUsIGlzT25Ub3BTaWRlIH0sXG4gICAgICAgIHJlc3VsdCxcbiAgICAgIH0gPSByZWN0LmNvbnRhaW5zKHBvaW50KVxuXG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIGJsb2NrRWxlbSA9IGVsZW1cbiAgICAgICAgYmxvY2tOb2RlID0gJGdldE5vZGVCeUtleShrZXkpXG4gICAgICAgIHByZXZJbmRleCA9IGluZGV4XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGlmIChkaXJlY3Rpb24gPT09IEluZGV0ZXJtaW5hdGUpIHtcbiAgICAgICAgaWYgKGlzT25Ub3BTaWRlKSB7XG4gICAgICAgICAgZGlyZWN0aW9uID0gVXB3YXJkXG4gICAgICAgIH0gZWxzZSBpZiAoaXNPbkJvdHRvbVNpZGUpIHtcbiAgICAgICAgICBkaXJlY3Rpb24gPSBEb3dud2FyZFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHN0b3Agc2VhcmNoIGJsb2NrIGVsZW1lbnRcbiAgICAgICAgICBkaXJlY3Rpb24gPSBJbmZpbml0eVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGluZGV4ICs9IGRpcmVjdGlvblxuICAgIH1cbiAgfSlcblxuICByZXR1cm4ge1xuICAgIGJsb2NrRWxlbSxcbiAgICBibG9ja05vZGUsXG4gIH1cbn1cblxuZnVuY3Rpb24gdXNlQWRkQmxvY2tIYW5kbGUoXG4gIGVkaXRvcjogTGV4aWNhbEVkaXRvcixcbiAgYW5jaG9yRWxlbTogSFRNTEVsZW1lbnQsXG4gIGlzRWRpdGFibGU6IGJvb2xlYW4sXG4pOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IHNjcm9sbGVyRWxlbSA9IGFuY2hvckVsZW0ucGFyZW50RWxlbWVudFxuXG4gIGNvbnN0IG1lbnVSZWYgPSB1c2VSZWY8SFRNTEJ1dHRvbkVsZW1lbnQ+KG51bGwpXG4gIGNvbnN0IFtob3ZlcmVkRWxlbWVudCwgc2V0SG92ZXJlZEVsZW1lbnRdID0gdXNlU3RhdGU8e1xuICAgIGVsZW06IEhUTUxFbGVtZW50XG4gICAgbm9kZTogTGV4aWNhbE5vZGVcbiAgfSB8IG51bGw+KG51bGwpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBmdW5jdGlvbiBvbkRvY3VtZW50TW91c2VNb3ZlKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXRcbiAgICAgIGlmICghaXNIVE1MRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBsZXQgZGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtID0gMFxuICAgICAgLy8gQ2FsY3VsYXRlIGRpc3RhbmNlIGJldHdlZW4gc2Nyb2xsZXJFbGVtIGFuZCB0YXJnZXQgaWYgdGFyZ2V0IGlzIG5vdCBpbiBzY3JvbGxlckVsZW1cbiAgICAgIGlmIChzY3JvbGxlckVsZW0gJiYgIXNjcm9sbGVyRWxlbS5jb250YWlucyh0YXJnZXQpKSB7XG4gICAgICAgIGNvbnN0IHsgYm90dG9tLCBsZWZ0LCByaWdodCwgdG9wIH0gPSBzY3JvbGxlckVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgY29uc3QgeyBwYWdlWCwgcGFnZVkgfSA9IGV2ZW50XG4gICAgICAgIGNvbnN0IGhvcml6b250YWxCdWZmZXIgPSA1MFxuICAgICAgICBjb25zdCB2ZXJ0aWNhbEJ1ZmZlciA9IDI1XG4gICAgICAgIGNvbnN0IGFkanVzdGVkVG9wID0gdG9wICsgd2luZG93LnNjcm9sbFlcbiAgICAgICAgY29uc3QgYWRqdXN0ZWRCb3R0b20gPSBib3R0b20gKyB3aW5kb3cuc2Nyb2xsWVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwYWdlWSA8IGFkanVzdGVkVG9wIC0gdmVydGljYWxCdWZmZXIgfHxcbiAgICAgICAgICBwYWdlWSA+IGFkanVzdGVkQm90dG9tICsgdmVydGljYWxCdWZmZXIgfHxcbiAgICAgICAgICBwYWdlWCA8IGxlZnQgLSBob3Jpem9udGFsQnVmZmVyIHx8XG4gICAgICAgICAgcGFnZVggPiByaWdodCArIGhvcml6b250YWxCdWZmZXJcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKGhvdmVyZWRFbGVtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBzZXRIb3ZlcmVkRWxlbWVudChudWxsKVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoaXMgaXMgdXNlZCB0byBhbGxvdyB0aGUgX2VtcHR5QmxvY2tFbGVtIHRvIGJlIGZvdW5kIHdoZW4gdGhlIG1vdXNlIGlzIGluIHRoZVxuICAgICAgICAvLyBidWZmZXIgem9uZSBhcm91bmQgdGhlIHNjcm9sbGVyRWxlbS5cbiAgICAgICAgaWYgKHBhZ2VYIDwgbGVmdCB8fCBwYWdlWCA+IHJpZ2h0KSB7XG4gICAgICAgICAgZGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtID0gcGFnZVggPCBsZWZ0ID8gcGFnZVggLSBsZWZ0IDogcGFnZVggLSByaWdodFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc09uSGFuZGxlRWxlbWVudCh0YXJnZXQsIEFERF9CTE9DS19NRU5VX0NMQVNTTkFNRSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBjb25zdCB7IGJsb2NrRWxlbTogX2VtcHR5QmxvY2tFbGVtLCBibG9ja05vZGUgfSA9IGdldEJsb2NrRWxlbWVudChcbiAgICAgICAgYW5jaG9yRWxlbSxcbiAgICAgICAgZWRpdG9yLFxuICAgICAgICBldmVudCxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIC1kaXN0YW5jZUZyb21TY3JvbGxlckVsZW0sXG4gICAgICApXG4gICAgICBpZiAoIV9lbXB0eUJsb2NrRWxlbSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmIChob3ZlcmVkRWxlbWVudD8ubm9kZSAhPT0gYmxvY2tOb2RlIHx8IGhvdmVyZWRFbGVtZW50Py5lbGVtICE9PSBfZW1wdHlCbG9ja0VsZW0pIHtcbiAgICAgICAgc2V0SG92ZXJlZEVsZW1lbnQoe1xuICAgICAgICAgIGVsZW06IF9lbXB0eUJsb2NrRWxlbSxcbiAgICAgICAgICBub2RlOiBibG9ja05vZGUsXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2luY2UgdGhlIGRyYWdnYWJsZUJsb2NrRWxlbSBpcyBvdXRzaWRlIHRoZSBhY3R1YWwgZWRpdG9yLCB3ZSBuZWVkIHRvIGxpc3RlbiB0byB0aGUgZG9jdW1lbnRcbiAgICAvLyB0byBiZSBhYmxlIHRvIGRldGVjdCB3aGVuIHRoZSBtb3VzZSBpcyBvdXRzaWRlIHRoZSBlZGl0b3IgYW5kIHJlc3BlY3QgYSBidWZmZXIgYXJvdW5kXG4gICAgLy8gdGhlIHNjcm9sbGVyRWxlbSB0byBhdm9pZCB0aGUgZHJhZ2dhYmxlQmxvY2tFbGVtIGRpc2FwcGVhcmluZyB0b28gZWFybHkuXG4gICAgZG9jdW1lbnQ/LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uRG9jdW1lbnRNb3VzZU1vdmUpXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZG9jdW1lbnQ/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uRG9jdW1lbnRNb3VzZU1vdmUpXG4gICAgfVxuICB9LCBbc2Nyb2xsZXJFbGVtLCBhbmNob3JFbGVtLCBlZGl0b3IsIGhvdmVyZWRFbGVtZW50XSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChtZW51UmVmLmN1cnJlbnQgJiYgaG92ZXJlZEVsZW1lbnQ/Lm5vZGUpIHtcbiAgICAgIGVkaXRvci5nZXRFZGl0b3JTdGF0ZSgpLnJlYWQoKCkgPT4ge1xuICAgICAgICAvLyBDaGVjayBpZiBibG9ja05vZGUgaXMgYW4gZW1wdHkgdGV4dCBub2RlXG4gICAgICAgIGxldCBpc0VtcHR5UGFyYWdyYXBoID0gdHJ1ZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgaG92ZXJlZEVsZW1lbnQubm9kZS5nZXRUeXBlKCkgIT09ICdwYXJhZ3JhcGgnIHx8XG4gICAgICAgICAgaG92ZXJlZEVsZW1lbnQubm9kZS5nZXRUZXh0Q29udGVudCgpICE9PSAnJ1xuICAgICAgICApIHtcbiAgICAgICAgICBpc0VtcHR5UGFyYWdyYXBoID0gZmFsc2VcbiAgICAgICAgfVxuXG4gICAgICAgIHNldEhhbmRsZVBvc2l0aW9uKFxuICAgICAgICAgIGhvdmVyZWRFbGVtZW50Py5lbGVtLFxuICAgICAgICAgIG1lbnVSZWYuY3VycmVudCxcbiAgICAgICAgICBhbmNob3JFbGVtLFxuICAgICAgICAgIGlzRW1wdHlQYXJhZ3JhcGggPyBTUEFDRSA6IFNQQUNFIC0gMjAsXG4gICAgICAgIClcbiAgICAgIH0pXG4gICAgfVxuICB9LCBbYW5jaG9yRWxlbSwgaG92ZXJlZEVsZW1lbnQsIGVkaXRvcl0pXG5cbiAgY29uc3QgaGFuZGxlQWRkQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICAoZXZlbnQpID0+IHtcbiAgICAgIGxldCBob3ZlcmVkRWxlbWVudFRvVXNlID0gaG92ZXJlZEVsZW1lbnRcbiAgICAgIGlmICghaG92ZXJlZEVsZW1lbnRUb1VzZT8ubm9kZSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gMS4gVXBkYXRlIGhvdmVyZWRFbGVtZW50Lm5vZGUgdG8gYSBuZXcgcGFyYWdyYXBoIG5vZGUgaWYgdGhlIGhvdmVyZWRFbGVtZW50Lm5vZGUgaXMgbm90IGEgcGFyYWdyYXBoIG5vZGVcbiAgICAgIGVkaXRvci51cGRhdGUoKCkgPT4ge1xuICAgICAgICAvLyBDaGVjayBpZiBibG9ja05vZGUgaXMgYW4gZW1wdHkgdGV4dCBub2RlXG4gICAgICAgIGxldCBpc0VtcHR5UGFyYWdyYXBoID0gdHJ1ZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgaG92ZXJlZEVsZW1lbnRUb1VzZS5ub2RlLmdldFR5cGUoKSAhPT0gJ3BhcmFncmFwaCcgfHxcbiAgICAgICAgICBob3ZlcmVkRWxlbWVudFRvVXNlLm5vZGUuZ2V0VGV4dENvbnRlbnQoKSAhPT0gJydcbiAgICAgICAgKSB7XG4gICAgICAgICAgaXNFbXB0eVBhcmFncmFwaCA9IGZhbHNlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzRW1wdHlQYXJhZ3JhcGgpIHtcbiAgICAgICAgICBjb25zdCBuZXdQYXJhZ3JhcGggPSAkY3JlYXRlUGFyYWdyYXBoTm9kZSgpXG4gICAgICAgICAgaG92ZXJlZEVsZW1lbnRUb1VzZS5ub2RlLmluc2VydEFmdGVyKG5ld1BhcmFncmFwaClcblxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaG92ZXJlZEVsZW1lbnRUb1VzZSA9IHtcbiAgICAgICAgICAgICAgZWxlbTogZWRpdG9yLmdldEVsZW1lbnRCeUtleShuZXdQYXJhZ3JhcGguZ2V0S2V5KCkpLFxuICAgICAgICAgICAgICBub2RlOiBuZXdQYXJhZ3JhcGgsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRIb3ZlcmVkRWxlbWVudChob3ZlcmVkRWxlbWVudFRvVXNlKVxuICAgICAgICAgIH0sIDApXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIC8vIDIuIEZvY3VzIG9uIHRoZSBuZXcgcGFyYWdyYXBoIG5vZGVcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBlZGl0b3IudXBkYXRlKCgpID0+IHtcbiAgICAgICAgICBlZGl0b3IuZm9jdXMoKVxuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgaG92ZXJlZEVsZW1lbnRUb1VzZS5ub2RlICYmXG4gICAgICAgICAgICAnc2VsZWN0JyBpbiBob3ZlcmVkRWxlbWVudFRvVXNlLm5vZGUgJiZcbiAgICAgICAgICAgIHR5cGVvZiBob3ZlcmVkRWxlbWVudFRvVXNlLm5vZGUuc2VsZWN0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBob3ZlcmVkRWxlbWVudFRvVXNlLm5vZGUuc2VsZWN0KClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9LCAxKVxuXG4gICAgICAvLyBNYWtlIHN1cmUgdGhpcyBpcyBjYWxsZWQgQUZURVIgdGhlIGZvY3VzaW5nIGhhcyBiZWVuIHByb2Nlc3NlZCBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gT3RoZXJ3aXNlLCB0aGlzIHdvbid0IHdvcmtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBlZGl0b3IuZGlzcGF0Y2hDb21tYW5kKEVOQUJMRV9TTEFTSF9NRU5VX0NPTU1BTkQsIHtcbiAgICAgICAgICBub2RlOiBob3ZlcmVkRWxlbWVudFRvVXNlLm5vZGUgYXMgUGFyYWdyYXBoTm9kZSxcbiAgICAgICAgfSlcbiAgICAgIH0sIDIpXG5cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfSxcbiAgICBbZWRpdG9yLCBob3ZlcmVkRWxlbWVudF0sXG4gIClcblxuICByZXR1cm4gY3JlYXRlUG9ydGFsKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxidXR0b25cbiAgICAgICAgY2xhc3NOYW1lPVwiaWNvbiBhZGQtYmxvY2stbWVudVwiXG4gICAgICAgIG9uQ2xpY2s9eyhldmVudCkgPT4ge1xuICAgICAgICAgIGhhbmRsZUFkZENsaWNrKGV2ZW50KVxuICAgICAgICB9fVxuICAgICAgICByZWY9e21lbnVSZWZ9XG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17aXNFZGl0YWJsZSA/ICdpY29uJyA6ICcnfSAvPlxuICAgICAgPC9idXR0b24+XG4gICAgPC9SZWFjdC5GcmFnbWVudD4sXG4gICAgYW5jaG9yRWxlbSxcbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gQWRkQmxvY2tIYW5kbGVQbHVnaW4oe1xuICBhbmNob3JFbGVtID0gZG9jdW1lbnQuYm9keSxcbn06IHtcbiAgYW5jaG9yRWxlbT86IEhUTUxFbGVtZW50XG59KTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbZWRpdG9yXSA9IHVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKVxuICByZXR1cm4gdXNlQWRkQmxvY2tIYW5kbGUoZWRpdG9yLCBhbmNob3JFbGVtLCBlZGl0b3IuX2VkaXRhYmxlKVxufVxuIl0sIm5hbWVzIjpbInVzZUxleGljYWxDb21wb3NlckNvbnRleHQiLCIkY3JlYXRlUGFyYWdyYXBoTm9kZSIsIiRnZXROb2RlQnlLZXkiLCJSZWFjdCIsInVzZUNhbGxiYWNrIiwidXNlRWZmZWN0IiwidXNlUmVmIiwidXNlU3RhdGUiLCJjcmVhdGVQb3J0YWwiLCJpc0hUTUxFbGVtZW50IiwiUG9pbnQiLCJSZWN0IiwiRU5BQkxFX1NMQVNIX01FTlVfQ09NTUFORCIsImdldENvbGxhcHNlZE1hcmdpbnMiLCJnZXRUb3BMZXZlbE5vZGVLZXlzIiwiaXNPbkhhbmRsZUVsZW1lbnQiLCJzZXRIYW5kbGVQb3NpdGlvbiIsIlNQQUNFIiwiQUREX0JMT0NLX01FTlVfQ0xBU1NOQU1FIiwiRG93bndhcmQiLCJVcHdhcmQiLCJJbmRldGVybWluYXRlIiwicHJldkluZGV4IiwiSW5maW5pdHkiLCJnZXRDdXJyZW50SW5kZXgiLCJrZXlzTGVuZ3RoIiwiTWF0aCIsImZsb29yIiwiZ2V0QmxvY2tFbGVtZW50IiwiYW5jaG9yRWxlbSIsImVkaXRvciIsImV2ZW50IiwidXNlRWRnZUFzRGVmYXVsdCIsImhvcml6b250YWxPZmZzZXQiLCJhbmNob3JFbGVtZW50UmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvcExldmVsTm9kZUtleXMiLCJibG9ja0VsZW0iLCJibG9ja05vZGUiLCJnZXRFZGl0b3JTdGF0ZSIsInJlYWQiLCJmaXJzdE5vZGUiLCJsYXN0Tm9kZSIsImdldEVsZW1lbnRCeUtleSIsImxlbmd0aCIsImZpcnN0Tm9kZVJlY3QiLCJsYXN0Tm9kZVJlY3QiLCJ5IiwidG9wIiwiYm90dG9tIiwiaW5kZXgiLCJkaXJlY3Rpb24iLCJrZXkiLCJlbGVtIiwicG9pbnQiLCJ4IiwiZG9tUmVjdCIsImZyb21ET00iLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5Ub3AiLCJyZWN0IiwiZ2VuZXJhdGVOZXdSZWN0IiwibGVmdCIsInJpZ2h0IiwicmVhc29uIiwiaXNPbkJvdHRvbVNpZGUiLCJpc09uVG9wU2lkZSIsInJlc3VsdCIsImNvbnRhaW5zIiwidXNlQWRkQmxvY2tIYW5kbGUiLCJpc0VkaXRhYmxlIiwic2Nyb2xsZXJFbGVtIiwicGFyZW50RWxlbWVudCIsIm1lbnVSZWYiLCJob3ZlcmVkRWxlbWVudCIsInNldEhvdmVyZWRFbGVtZW50IiwiZG9jdW1lbnQiLCJvbkRvY3VtZW50TW91c2VNb3ZlIiwidGFyZ2V0IiwiZGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtIiwicGFnZVgiLCJwYWdlWSIsImhvcml6b250YWxCdWZmZXIiLCJ2ZXJ0aWNhbEJ1ZmZlciIsImFkanVzdGVkVG9wIiwid2luZG93Iiwic2Nyb2xsWSIsImFkanVzdGVkQm90dG9tIiwiX2VtcHR5QmxvY2tFbGVtIiwibm9kZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY3VycmVudCIsImlzRW1wdHlQYXJhZ3JhcGgiLCJnZXRUeXBlIiwiZ2V0VGV4dENvbnRlbnQiLCJoYW5kbGVBZGRDbGljayIsImhvdmVyZWRFbGVtZW50VG9Vc2UiLCJ1cGRhdGUiLCJuZXdQYXJhZ3JhcGgiLCJpbnNlcnRBZnRlciIsInNldFRpbWVvdXQiLCJnZXRLZXkiLCJmb2N1cyIsInNlbGVjdCIsImRpc3BhdGNoQ29tbWFuZCIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsIkZyYWdtZW50IiwiYnV0dG9uIiwiY2xhc3NOYW1lIiwib25DbGljayIsInJlZiIsInR5cGUiLCJkaXYiLCJBZGRCbG9ja0hhbmRsZVBsdWdpbiIsImJvZHkiLCJfZWRpdGFibGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/AddBlockHandlePlugin/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/getBoundingRectWithoutTransform.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/getBoundingRectWithoutTransform.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBoundingClientRectWithoutTransform: () => (/* binding */ getBoundingClientRectWithoutTransform)\n/* harmony export */ });\nfunction getBoundingClientRectWithoutTransform(elem) {\n    const rect = elem.getBoundingClientRect();\n    // Extract the translation value from the transform style\n    const transformValue = getComputedStyle(elem).getPropertyValue('transform');\n    if (!transformValue || transformValue === 'none') {\n        return rect;\n    }\n    const lastNumberOfTransformValue = transformValue.split(',').pop();\n    rect.y = rect.y - Number(lastNumberOfTransformValue.replace(')', ''));\n    // Return the original bounding rect if no translation is applied\n    return rect;\n}\n\n//# sourceMappingURL=getBoundingRectWithoutTransform.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvRHJhZ2dhYmxlQmxvY2tQbHVnaW4vZ2V0Qm91bmRpbmdSZWN0V2l0aG91dFRyYW5zZm9ybS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvRHJhZ2dhYmxlQmxvY2tQbHVnaW4vZ2V0Qm91bmRpbmdSZWN0V2l0aG91dFRyYW5zZm9ybS5qcz9mMzMzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3RXaXRob3V0VHJhbnNmb3JtKGVsZW0pIHtcbiAgICBjb25zdCByZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAvLyBFeHRyYWN0IHRoZSB0cmFuc2xhdGlvbiB2YWx1ZSBmcm9tIHRoZSB0cmFuc2Zvcm0gc3R5bGVcbiAgICBjb25zdCB0cmFuc2Zvcm1WYWx1ZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbSkuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJyk7XG4gICAgaWYgKCF0cmFuc2Zvcm1WYWx1ZSB8fCB0cmFuc2Zvcm1WYWx1ZSA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHJldHVybiByZWN0O1xuICAgIH1cbiAgICBjb25zdCBsYXN0TnVtYmVyT2ZUcmFuc2Zvcm1WYWx1ZSA9IHRyYW5zZm9ybVZhbHVlLnNwbGl0KCcsJykucG9wKCk7XG4gICAgcmVjdC55ID0gcmVjdC55IC0gTnVtYmVyKGxhc3ROdW1iZXJPZlRyYW5zZm9ybVZhbHVlLnJlcGxhY2UoJyknLCAnJykpO1xuICAgIC8vIFJldHVybiB0aGUgb3JpZ2luYWwgYm91bmRpbmcgcmVjdCBpZiBubyB0cmFuc2xhdGlvbiBpcyBhcHBsaWVkXG4gICAgcmV0dXJuIHJlY3Q7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEJvdW5kaW5nUmVjdFdpdGhvdXRUcmFuc2Zvcm0uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/getBoundingRectWithoutTransform.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/getNodeCloseToPoint.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/getNodeCloseToPoint.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNodeCloseToPoint: () => (/* binding */ getNodeCloseToPoint)\n/* harmony export */ });\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/* harmony import */ var _utils_point_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/point.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/utils/point.js\");\n/* harmony import */ var _utils_rect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/rect.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/utils/rect.js\");\n/* harmony import */ var _utils_getCollapsedMargins_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getCollapsedMargins.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/getCollapsedMargins.js\");\n/* harmony import */ var _utils_getTopLevelNodeKeys_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getTopLevelNodeKeys.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/getTopLevelNodeKeys.js\");\n/* harmony import */ var _getBoundingRectWithoutTransform_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getBoundingRectWithoutTransform.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/getBoundingRectWithoutTransform.js\");\n\n\n\n\n\n\n// Directions\nconst Downward = 1;\nconst Upward = -1;\nconst Indeterminate = 0;\nconst cache = {\n    props: null,\n    result: null\n};\nfunction isPointClose(previous, current, threshold = 20) {\n    const dx = previous.x - current.x;\n    const dy = previous.y - current.y;\n    return dx * dx + dy * dy <= threshold * threshold;\n}\nfunction getNodeCloseToPoint(props) {\n    const { anchorElem, cache_threshold = 20, editor, fuzzy = false, horizontalOffset = 0, point: { x, y }, startIndex = 0, useEdgeAsDefault = false, verbose = false } = props;\n    // Use cache\n    if (cache_threshold > 0 && cache.props && cache.result && cache.props.fuzzy === props.fuzzy && cache.props.horizontalOffset === props.horizontalOffset && cache.props.useEdgeAsDefault === props.useEdgeAsDefault && isPointClose(cache.props.point, props.point, cache_threshold)) {\n        if (verbose) {\n        //console.log('Returning cached result')\n        }\n        return cache.result;\n    }\n    const anchorElementRect = anchorElem.getBoundingClientRect();\n    const topLevelNodeKeys = (0,_utils_getTopLevelNodeKeys_js__WEBPACK_IMPORTED_MODULE_3__.getTopLevelNodeKeys)(editor);\n    const closestBlockElem = {\n        blockElem: null,\n        blockNode: null,\n        distance: Infinity,\n        foundAtIndex: -1,\n        isFoundNodeEmptyParagraph: false\n    };\n    // Return null if matching block element is the first or last node\n    editor.getEditorState().read(()=>{\n        if (useEdgeAsDefault) {\n            const [firstNode, lastNode] = [\n                editor.getElementByKey(topLevelNodeKeys[0]),\n                editor.getElementByKey(topLevelNodeKeys[topLevelNodeKeys.length - 1])\n            ];\n            const [firstNodeRect, lastNodeRect] = [\n                (0,_getBoundingRectWithoutTransform_js__WEBPACK_IMPORTED_MODULE_4__.getBoundingClientRectWithoutTransform)(firstNode),\n                (0,_getBoundingRectWithoutTransform_js__WEBPACK_IMPORTED_MODULE_4__.getBoundingClientRectWithoutTransform)(lastNode)\n            ];\n            if (firstNodeRect && lastNodeRect) {\n                if (y < firstNodeRect.top) {\n                    closestBlockElem.blockElem = firstNode;\n                    closestBlockElem.distance = firstNodeRect.top - y;\n                    closestBlockElem.blockNode = (0,lexical__WEBPACK_IMPORTED_MODULE_5__.$getNodeByKey)(topLevelNodeKeys[0]);\n                    closestBlockElem.foundAtIndex = 0;\n                } else if (y > lastNodeRect.bottom) {\n                    closestBlockElem.distance = y - lastNodeRect.bottom;\n                    closestBlockElem.blockNode = (0,lexical__WEBPACK_IMPORTED_MODULE_5__.$getNodeByKey)(topLevelNodeKeys[topLevelNodeKeys.length - 1]);\n                    closestBlockElem.blockElem = lastNode;\n                    closestBlockElem.foundAtIndex = topLevelNodeKeys.length - 1;\n                }\n                if (closestBlockElem?.blockElem) {\n                    if (verbose) {\n                    //console.log('useEdgeAsDefault', useEdgeAsDefault)\n                    }\n                    return {\n                        blockElem: null,\n                        isFoundNodeEmptyParagraph: false\n                    };\n                }\n            }\n        }\n        // Find matching block element\n        let index = startIndex;\n        let direction = Indeterminate;\n        if (verbose) {\n        //console.log('start index', startIndex)\n        }\n        while(index >= 0 && index < topLevelNodeKeys.length){\n            const key = topLevelNodeKeys[index];\n            const elem = editor.getElementByKey(key);\n            if (elem === null) {\n                break;\n            }\n            const point = new _utils_point_js__WEBPACK_IMPORTED_MODULE_0__.Point(x + horizontalOffset, y);\n            //const domRect = Rect.fromDOM(elem)\n            // Do not consider transform of blocks when calculating distance\n            const domRect = _utils_rect_js__WEBPACK_IMPORTED_MODULE_1__.Rect.fromDOMRect((0,_getBoundingRectWithoutTransform_js__WEBPACK_IMPORTED_MODULE_4__.getBoundingClientRectWithoutTransform)(elem));\n            const { marginBottom, marginTop } = (0,_utils_getCollapsedMargins_js__WEBPACK_IMPORTED_MODULE_2__.getCollapsedMargins)(elem);\n            const rect = domRect.generateNewRect({\n                bottom: domRect.bottom + marginBottom,\n                left: anchorElementRect.left,\n                right: anchorElementRect.right,\n                top: domRect.top - marginTop\n            });\n            const { distance, isOnBottomSide, isOnTopSide } = rect.distanceFromPoint(point);\n            if (verbose) {\n            //console.log('distance', distance)\n            }\n            if (distance === 0) {\n                closestBlockElem.blockElem = elem;\n                closestBlockElem.blockNode = (0,lexical__WEBPACK_IMPORTED_MODULE_5__.$getNodeByKey)(key);\n                closestBlockElem.foundAtIndex = index;\n                closestBlockElem.distance = distance;\n                // Check if blockNode is an empty text node\n                if (closestBlockElem.blockNode && closestBlockElem.blockNode.getType() === 'paragraph' && closestBlockElem.blockNode.getTextContent() === '') {\n                    if (!fuzzy) {\n                        closestBlockElem.blockElem = null;\n                        closestBlockElem.blockNode = null;\n                    }\n                    closestBlockElem.isFoundNodeEmptyParagraph = true;\n                }\n                break;\n            } else if (fuzzy) {\n                if (distance < closestBlockElem.distance) {\n                    closestBlockElem.blockElem = elem;\n                    closestBlockElem.blockNode = (0,lexical__WEBPACK_IMPORTED_MODULE_5__.$getNodeByKey)(key);\n                    closestBlockElem.distance = distance;\n                    closestBlockElem.foundAtIndex = index;\n                }\n            }\n            if (direction === Indeterminate) {\n                if (isOnTopSide) {\n                    direction = Upward;\n                } else if (isOnBottomSide) {\n                    direction = Downward;\n                } else {\n                    // stop search block element\n                    direction = Infinity;\n                }\n            }\n            index += direction;\n        }\n    });\n    // Store in cache before returning\n    cache.props = props;\n    cache.result = {\n        blockElem: closestBlockElem.blockElem,\n        blockNode: closestBlockElem.blockNode,\n        foundAtIndex: closestBlockElem.foundAtIndex,\n        isFoundNodeEmptyParagraph: closestBlockElem.isFoundNodeEmptyParagraph\n    };\n    return {\n        blockElem: closestBlockElem.blockElem,\n        blockNode: closestBlockElem.blockNode,\n        foundAtIndex: closestBlockElem.foundAtIndex,\n        isFoundNodeEmptyParagraph: closestBlockElem.isFoundNodeEmptyParagraph\n    };\n}\n\n//# sourceMappingURL=getNodeCloseToPoint.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/getNodeCloseToPoint.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/highlightElemOriginalPosition.js":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/highlightElemOriginalPosition.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   highlightElemOriginalPosition: () => (/* binding */ highlightElemOriginalPosition)\n/* harmony export */ });\n/* harmony import */ var _getBoundingRectWithoutTransform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingRectWithoutTransform.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/getBoundingRectWithoutTransform.js\");\n\nfunction highlightElemOriginalPosition(debugHighlightRef, htmlElem, anchorElem) {\n    if (!debugHighlightRef.current) {\n        // If the ref doesn't point to an existing element, we can't set styles\n        return;\n    }\n    const { left: anchorLeft, top: anchorTop } = anchorElem.getBoundingClientRect();\n    // Get computed styles of the given element\n    const boundingRect = (0,_getBoundingRectWithoutTransform_js__WEBPACK_IMPORTED_MODULE_0__.getBoundingClientRectWithoutTransform)(htmlElem);\n    // Extract necessary styles (ignoring transform)\n    const width = boundingRect.width;\n    const height = boundingRect.height;\n    const top = boundingRect.top - anchorTop;\n    const left = boundingRect.left - anchorLeft;\n    debugHighlightRef.current.style.border = '2px solid green';\n    debugHighlightRef.current.style.boxSizing = 'border-box';\n    debugHighlightRef.current.style.height = height + 'px';\n    debugHighlightRef.current.style.pointerEvents = 'none';\n    debugHighlightRef.current.style.position = 'absolute';\n    debugHighlightRef.current.style.top = top + 'px';\n    debugHighlightRef.current.style.left = left + 'px';\n    debugHighlightRef.current.style.width = width + 'px';\n    debugHighlightRef.current.style.zIndex = '1000';\n    debugHighlightRef.current.style.opacity = '0.5';\n}\n\n//# sourceMappingURL=highlightElemOriginalPosition.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvRHJhZ2dhYmxlQmxvY2tQbHVnaW4vaGlnaGxpZ2h0RWxlbU9yaWdpbmFsUG9zaXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkY7QUFDdEY7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUNBQW1DO0FBQy9DO0FBQ0EseUJBQXlCLDBHQUFxQztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHBheWxvYWRjbXMvcmljaHRleHQtbGV4aWNhbC9kaXN0L2ZpZWxkL2xleGljYWwvcGx1Z2lucy9oYW5kbGVzL0RyYWdnYWJsZUJsb2NrUGx1Z2luL2hpZ2hsaWdodEVsZW1PcmlnaW5hbFBvc2l0aW9uLmpzPzYxNzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Qm91bmRpbmdDbGllbnRSZWN0V2l0aG91dFRyYW5zZm9ybSB9IGZyb20gJy4vZ2V0Qm91bmRpbmdSZWN0V2l0aG91dFRyYW5zZm9ybS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gaGlnaGxpZ2h0RWxlbU9yaWdpbmFsUG9zaXRpb24oZGVidWdIaWdobGlnaHRSZWYsIGh0bWxFbGVtLCBhbmNob3JFbGVtKSB7XG4gICAgaWYgKCFkZWJ1Z0hpZ2hsaWdodFJlZi5jdXJyZW50KSB7XG4gICAgICAgIC8vIElmIHRoZSByZWYgZG9lc24ndCBwb2ludCB0byBhbiBleGlzdGluZyBlbGVtZW50LCB3ZSBjYW4ndCBzZXQgc3R5bGVzXG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgeyBsZWZ0OiBhbmNob3JMZWZ0LCB0b3A6IGFuY2hvclRvcCB9ID0gYW5jaG9yRWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAvLyBHZXQgY29tcHV0ZWQgc3R5bGVzIG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gICAgY29uc3QgYm91bmRpbmdSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0V2l0aG91dFRyYW5zZm9ybShodG1sRWxlbSk7XG4gICAgLy8gRXh0cmFjdCBuZWNlc3Nhcnkgc3R5bGVzIChpZ25vcmluZyB0cmFuc2Zvcm0pXG4gICAgY29uc3Qgd2lkdGggPSBib3VuZGluZ1JlY3Qud2lkdGg7XG4gICAgY29uc3QgaGVpZ2h0ID0gYm91bmRpbmdSZWN0LmhlaWdodDtcbiAgICBjb25zdCB0b3AgPSBib3VuZGluZ1JlY3QudG9wIC0gYW5jaG9yVG9wO1xuICAgIGNvbnN0IGxlZnQgPSBib3VuZGluZ1JlY3QubGVmdCAtIGFuY2hvckxlZnQ7XG4gICAgZGVidWdIaWdobGlnaHRSZWYuY3VycmVudC5zdHlsZS5ib3JkZXIgPSAnMnB4IHNvbGlkIGdyZWVuJztcbiAgICBkZWJ1Z0hpZ2hsaWdodFJlZi5jdXJyZW50LnN0eWxlLmJveFNpemluZyA9ICdib3JkZXItYm94JztcbiAgICBkZWJ1Z0hpZ2hsaWdodFJlZi5jdXJyZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG4gICAgZGVidWdIaWdobGlnaHRSZWYuY3VycmVudC5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xuICAgIGRlYnVnSGlnaGxpZ2h0UmVmLmN1cnJlbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIGRlYnVnSGlnaGxpZ2h0UmVmLmN1cnJlbnQuc3R5bGUudG9wID0gdG9wICsgJ3B4JztcbiAgICBkZWJ1Z0hpZ2hsaWdodFJlZi5jdXJyZW50LnN0eWxlLmxlZnQgPSBsZWZ0ICsgJ3B4JztcbiAgICBkZWJ1Z0hpZ2hsaWdodFJlZi5jdXJyZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuICAgIGRlYnVnSGlnaGxpZ2h0UmVmLmN1cnJlbnQuc3R5bGUuekluZGV4ID0gJzEwMDAnO1xuICAgIGRlYnVnSGlnaGxpZ2h0UmVmLmN1cnJlbnQuc3R5bGUub3BhY2l0eSA9ICcwLjUnO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1oaWdobGlnaHRFbGVtT3JpZ2luYWxQb3NpdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/highlightElemOriginalPosition.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/index.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/index.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DraggableBlockPlugin: () => (/* binding */ DraggableBlockPlugin)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var _lexical_rich_text__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @lexical/rich-text */ \"(app-pages-browser)/./node_modules/@lexical/rich-text/LexicalRichText.dev.mjs\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _utils_guard_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/guard.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/utils/guard.js\");\n/* harmony import */ var _utils_point_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/point.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/utils/point.js\");\n/* harmony import */ var _utils_getTopLevelNodeKeys_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/getTopLevelNodeKeys.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/getTopLevelNodeKeys.js\");\n/* harmony import */ var _utils_isOnHandleElement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/isOnHandleElement.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/isOnHandleElement.js\");\n/* harmony import */ var _utils_setHandlePosition_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/setHandlePosition.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/setHandlePosition.js\");\n/* harmony import */ var _getBoundingRectWithoutTransform_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./getBoundingRectWithoutTransform.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/getBoundingRectWithoutTransform.js\");\n/* harmony import */ var _getNodeCloseToPoint_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./getNodeCloseToPoint.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/getNodeCloseToPoint.js\");\n/* harmony import */ var _index_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./index.scss */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/index.scss\");\n/* harmony import */ var _setTargetLine_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./setTargetLine.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/setTargetLine.js\");\n/* __next_internal_client_entry_do_not_use__ DraggableBlockPlugin auto */ var _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst SPACE = -24;\nconst DRAGGABLE_BLOCK_MENU_CLASSNAME = \"draggable-block-menu\";\nconst DRAG_DATA_FORMAT = \"application/x-lexical-drag-block\";\nlet prevIndex = Infinity;\nfunction getCurrentIndex(keysLength) {\n    if (keysLength === 0) {\n        return Infinity;\n    }\n    if (prevIndex >= 0 && prevIndex < keysLength) {\n        return prevIndex;\n    }\n    return Math.floor(keysLength / 2);\n}\nfunction setDragImage(dataTransfer, draggableBlockElem) {\n    const { transform } = draggableBlockElem.style;\n    // Remove dragImage borders\n    dataTransfer.setDragImage(draggableBlockElem, 0, 0);\n    setTimeout(()=>{\n        draggableBlockElem.style.transform = transform;\n    });\n}\nfunction hideTargetLine(targetLineElem, lastTargetBlockElem) {\n    if (targetLineElem) {\n        targetLineElem.style.opacity = \"0\";\n    }\n    if (lastTargetBlockElem) {\n        lastTargetBlockElem.style.opacity = \"\";\n        lastTargetBlockElem.style.transform = \"\";\n        // Delete marginBottom and marginTop values we set\n        lastTargetBlockElem.style.marginBottom = \"\";\n        lastTargetBlockElem.style.marginTop = \"\";\n    //lastTargetBlockElem.style.border = 'none'\n    }\n}\nfunction useDraggableBlockMenu(editor, anchorElem, isEditable) {\n    _s();\n    const scrollerElem = anchorElem.parentElement;\n    const menuRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const targetLineRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const debugHighlightRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const isDraggingBlockRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const [draggableBlockElem, setDraggableBlockElem] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [lastTargetBlockElem, setLastTargetBlockElem] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const calculateDistanceFromScrollerElem = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(pageX, pageY, target) {\n        let horizontalBuffer = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 50, verticalBuffer = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 25;\n        let distanceFromScrollerElem = 0;\n        // Calculate distance between scrollerElem and target if target is not in scrollerElem\n        if (scrollerElem && !scrollerElem.contains(target)) {\n            const { bottom, left, right, top } = scrollerElem.getBoundingClientRect();\n            const adjustedTop = top + window.scrollY;\n            const adjustedBottom = bottom + window.scrollY;\n            if (pageY < adjustedTop - verticalBuffer || pageY > adjustedBottom + verticalBuffer || pageX < left - horizontalBuffer || pageX > right + horizontalBuffer) {\n                setDraggableBlockElem(null);\n                return distanceFromScrollerElem;\n            }\n            // This is used to allow the _draggableBlockElem to be found when the mouse is in the\n            // buffer zone around the scrollerElem.\n            if (pageX < left || pageX > right) {\n                distanceFromScrollerElem = pageX < left ? pageX - left : pageX - right;\n            }\n        }\n        return distanceFromScrollerElem;\n    }, [\n        scrollerElem\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var // Since the draggableBlockElem is outside the actual editor, we need to listen to the document\n        // to be able to detect when the mouse is outside the editor and respect a buffer around the\n        // the scrollerElem to avoid the draggableBlockElem disappearing too early.\n        _document;\n        /**\n     * Handles positioning of the drag handle\n     */ function onDocumentMouseMove(event) {\n            const target = event.target;\n            if (!(0,_utils_guard_js__WEBPACK_IMPORTED_MODULE_2__.isHTMLElement)(target)) {\n                return;\n            }\n            const distanceFromScrollerElem = calculateDistanceFromScrollerElem(event.pageX, event.pageY, target);\n            if ((0,_utils_isOnHandleElement_js__WEBPACK_IMPORTED_MODULE_5__.isOnHandleElement)(target, DRAGGABLE_BLOCK_MENU_CLASSNAME)) {\n                return;\n            }\n            const topLevelNodeKeys = (0,_utils_getTopLevelNodeKeys_js__WEBPACK_IMPORTED_MODULE_4__.getTopLevelNodeKeys)(editor);\n            const { blockElem: _draggableBlockElem, foundAtIndex, isFoundNodeEmptyParagraph } = (0,_getNodeCloseToPoint_js__WEBPACK_IMPORTED_MODULE_8__.getNodeCloseToPoint)({\n                anchorElem,\n                cache_threshold: 0,\n                editor,\n                horizontalOffset: -distanceFromScrollerElem,\n                point: new _utils_point_js__WEBPACK_IMPORTED_MODULE_3__.Point(event.x, event.y),\n                startIndex: getCurrentIndex(topLevelNodeKeys.length),\n                useEdgeAsDefault: false\n            });\n            //if (DEBUG && _draggableBlockElem) {\n            //targetBlockElem.style.border = '3px solid red'\n            // highlightElemOriginalPosition(debugHighlightRef, _draggableBlockElem, anchorElem)\n            //}\n            prevIndex = foundAtIndex;\n            if (!_draggableBlockElem && !isFoundNodeEmptyParagraph) {\n                return;\n            }\n            if (draggableBlockElem !== _draggableBlockElem) {\n                setDraggableBlockElem(_draggableBlockElem);\n            }\n        }\n        (_document = document) === null || _document === void 0 ? void 0 : _document.addEventListener(\"mousemove\", onDocumentMouseMove);\n        return ()=>{\n            var _document;\n            (_document = document) === null || _document === void 0 ? void 0 : _document.removeEventListener(\"mousemove\", onDocumentMouseMove);\n        };\n    }, [\n        scrollerElem,\n        anchorElem,\n        editor,\n        calculateDistanceFromScrollerElem,\n        draggableBlockElem\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (menuRef.current) {\n            (0,_utils_setHandlePosition_js__WEBPACK_IMPORTED_MODULE_6__.setHandlePosition)(draggableBlockElem, menuRef.current, anchorElem, SPACE);\n        }\n    }, [\n        anchorElem,\n        draggableBlockElem\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        function onDragover(event) {\n            if (!isDraggingBlockRef.current) {\n                return false;\n            }\n            const [isFileTransfer] = (0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_11__.eventFiles)(event);\n            if (isFileTransfer) {\n                return false;\n            }\n            const { pageY, target } = event;\n            if (!(0,_utils_guard_js__WEBPACK_IMPORTED_MODULE_2__.isHTMLElement)(target)) {\n                return false;\n            }\n            const distanceFromScrollerElem = calculateDistanceFromScrollerElem(event.pageX, event.pageY, target, 100, 50);\n            const topLevelNodeKeys = (0,_utils_getTopLevelNodeKeys_js__WEBPACK_IMPORTED_MODULE_4__.getTopLevelNodeKeys)(editor);\n            const { blockElem: targetBlockElem, foundAtIndex, isFoundNodeEmptyParagraph } = (0,_getNodeCloseToPoint_js__WEBPACK_IMPORTED_MODULE_8__.getNodeCloseToPoint)({\n                anchorElem,\n                editor,\n                fuzzy: true,\n                horizontalOffset: -distanceFromScrollerElem,\n                point: new _utils_point_js__WEBPACK_IMPORTED_MODULE_3__.Point(event.x, event.y),\n                startIndex: getCurrentIndex(topLevelNodeKeys.length),\n                useEdgeAsDefault: true,\n                verbose: true\n            });\n            prevIndex = foundAtIndex;\n            const targetLineElem = targetLineRef.current;\n            // targetBlockElem === null shouldn't happen\n            if (targetBlockElem === null || targetLineElem === null) {\n                return false;\n            }\n            if (draggableBlockElem !== targetBlockElem) {\n                (0,_setTargetLine_js__WEBPACK_IMPORTED_MODULE_10__.setTargetLine)(SPACE, targetLineElem, targetBlockElem, lastTargetBlockElem, pageY, anchorElem, event, debugHighlightRef, isFoundNodeEmptyParagraph);\n                // Prevent default event to be able to trigger onDrop events\n                // Calling preventDefault() adds the green plus icon to the cursor,\n                // indicating that the drop is allowed.\n                event.preventDefault();\n            } else {\n                hideTargetLine(targetLineElem, lastTargetBlockElem);\n            }\n            setLastTargetBlockElem(targetBlockElem);\n            return true;\n        }\n        function onDrop(event) {\n            if (!isDraggingBlockRef.current) {\n                return false;\n            }\n            const [isFileTransfer] = (0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_11__.eventFiles)(event);\n            if (isFileTransfer) {\n                return false;\n            }\n            const { dataTransfer, pageY, target } = event;\n            const dragData = (dataTransfer === null || dataTransfer === void 0 ? void 0 : dataTransfer.getData(DRAG_DATA_FORMAT)) || \"\";\n            editor.update(()=>{\n                const draggedNode = (0,lexical__WEBPACK_IMPORTED_MODULE_12__.$getNodeByKey)(dragData);\n                if (!draggedNode) {\n                    return false;\n                }\n                if (!(0,_utils_guard_js__WEBPACK_IMPORTED_MODULE_2__.isHTMLElement)(target)) {\n                    return false;\n                }\n                const distanceFromScrollerElem = calculateDistanceFromScrollerElem(event.pageX, event.pageY, target, 100, 50);\n                const { blockElem: targetBlockElem, isFoundNodeEmptyParagraph } = (0,_getNodeCloseToPoint_js__WEBPACK_IMPORTED_MODULE_8__.getNodeCloseToPoint)({\n                    anchorElem,\n                    editor,\n                    fuzzy: true,\n                    horizontalOffset: -distanceFromScrollerElem,\n                    point: new _utils_point_js__WEBPACK_IMPORTED_MODULE_3__.Point(event.x, event.y),\n                    useEdgeAsDefault: true\n                });\n                if (!targetBlockElem) {\n                    return false;\n                }\n                const targetNode = (0,lexical__WEBPACK_IMPORTED_MODULE_12__.$getNearestNodeFromDOMNode)(targetBlockElem);\n                if (!targetNode) {\n                    return false;\n                }\n                if (targetNode === draggedNode) {\n                    return true;\n                }\n                const { height: targetBlockElemHeight, top: targetBlockElemTop } = (0,_getBoundingRectWithoutTransform_js__WEBPACK_IMPORTED_MODULE_7__.getBoundingClientRectWithoutTransform)(targetBlockElem);\n                const mouseY = pageY;\n                const isBelow = mouseY >= targetBlockElemTop + targetBlockElemHeight / 2 + window.scrollY;\n                if (!isFoundNodeEmptyParagraph) {\n                    if (isBelow) {\n                        // below targetBlockElem\n                        targetNode.insertAfter(draggedNode);\n                    } else {\n                        // above targetBlockElem\n                        targetNode.insertBefore(draggedNode);\n                    }\n                } else {\n                    //\n                    targetNode.insertBefore(draggedNode);\n                    targetNode.remove();\n                }\n                /*\n        if (pageY >= targetBlockElemTop + targetBlockElemHeight / 2) {\n          targetNode.insertAfter(draggedNode)\n        } else {\n          targetNode.insertBefore(draggedNode)\n        }*/ if (draggableBlockElem !== null) {\n                    setDraggableBlockElem(null);\n                }\n            });\n            return true;\n        }\n        // register onDragover event listeners:\n        document.addEventListener(\"dragover\", onDragover);\n        // register onDrop event listeners:\n        document.addEventListener(\"drop\", onDrop);\n        return ()=>{\n            document.removeEventListener(\"dragover\", onDragover);\n            document.removeEventListener(\"drop\", onDrop);\n        };\n    }, [\n        anchorElem,\n        editor,\n        lastTargetBlockElem,\n        calculateDistanceFromScrollerElem,\n        draggableBlockElem\n    ]);\n    function onDragStart(event) {\n        const dataTransfer = event.dataTransfer;\n        if (!dataTransfer || !draggableBlockElem) {\n            return;\n        }\n        setDragImage(dataTransfer, draggableBlockElem);\n        let nodeKey = \"\";\n        editor.update(()=>{\n            const node = (0,lexical__WEBPACK_IMPORTED_MODULE_12__.$getNearestNodeFromDOMNode)(draggableBlockElem);\n            if (node) {\n                nodeKey = node.getKey();\n            }\n        });\n        isDraggingBlockRef.current = true;\n        dataTransfer.setData(DRAG_DATA_FORMAT, nodeKey);\n    }\n    function onDragEnd() {\n        isDraggingBlockRef.current = false;\n        hideTargetLine(targetLineRef.current, lastTargetBlockElem);\n    }\n    return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"icon draggable-block-menu\",\n        draggable: true,\n        onDragEnd: onDragEnd,\n        onDragStart: onDragStart,\n        ref: menuRef\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: isEditable ? \"icon\" : \"\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"draggable-block-target-line\",\n        ref: targetLineRef\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"debug-highlight\",\n        ref: debugHighlightRef\n    })), anchorElem);\n}\n_s(useDraggableBlockMenu, \"dbdQNkfWacCQJtKmGK9JrVGLTf8=\");\nfunction DraggableBlockPlugin(param) {\n    let { anchorElem = document.body } = param;\n    _s1();\n    const [editor] = (0,_lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_13__.useLexicalComposerContext)();\n    return useDraggableBlockMenu(editor, anchorElem, editor._editable);\n} //# sourceMappingURL=index.js.map\n_s1(DraggableBlockPlugin, \"XpApwb5MJzEe17m3kMOQE+TL+Eo=\", false, function() {\n    return [\n        _lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_13__.useLexicalComposerContext,\n        useDraggableBlockMenu\n    ];\n});\n_c = DraggableBlockPlugin;\nvar _c;\n$RefreshReg$(_c, \"DraggableBlockPlugin\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/setTargetLine.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/setTargetLine.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setTargetLine: () => (/* binding */ setTargetLine)\n/* harmony export */ });\n/* harmony import */ var _utils_getCollapsedMargins_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getCollapsedMargins.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/getCollapsedMargins.js\");\n/* harmony import */ var _getBoundingRectWithoutTransform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getBoundingRectWithoutTransform.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/getBoundingRectWithoutTransform.js\");\n/* harmony import */ var _highlightElemOriginalPosition_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./highlightElemOriginalPosition.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/highlightElemOriginalPosition.js\");\n\n\n\nconst TARGET_LINE_HALF_HEIGHT = 25;\nconst TEXT_BOX_HORIZONTAL_PADDING = -24;\nconst DEBUG = false;\nfunction setTargetLine(SPACE, targetLineElem, targetBlockElem, lastTargetBlockElem, mouseY, anchorElem, event, debugHighlightRef, isFoundNodeEmptyParagraph = false) {\n    const { height: targetBlockElemHeight, top: targetBlockElemTop } = (0,_getBoundingRectWithoutTransform_js__WEBPACK_IMPORTED_MODULE_1__.getBoundingClientRectWithoutTransform)(targetBlockElem);\n    const { top: anchorTop, width: anchorWidth } = anchorElem.getBoundingClientRect();\n    const { marginBottom, marginTop } = (0,_utils_getCollapsedMargins_js__WEBPACK_IMPORTED_MODULE_0__.getCollapsedMargins)(targetBlockElem);\n    let lineTop = targetBlockElemTop;\n    const isBelow = mouseY >= targetBlockElemTop + targetBlockElemHeight / 2 + window.scrollY;\n    if (!isFoundNodeEmptyParagraph) {\n        if (isBelow) {\n            // below targetBlockElem\n            lineTop += targetBlockElemHeight + marginBottom / 2;\n        } else {\n            // above targetBlockElem\n            lineTop -= marginTop / 2;\n        }\n    } else {\n        lineTop += targetBlockElemHeight / 2;\n    }\n    const targetElemTranslate = 0;\n    let targetElemTranslate2 = 0;\n    if (!isFoundNodeEmptyParagraph) {\n        if (isBelow) {\n            targetElemTranslate2 = -TARGET_LINE_HALF_HEIGHT;\n        } else {\n            targetElemTranslate2 = TARGET_LINE_HALF_HEIGHT;\n        }\n    }\n    let top = lineTop - anchorTop + targetElemTranslate2;\n    if (!isBelow) {\n        top -= TARGET_LINE_HALF_HEIGHT * 2;\n    }\n    const left = TEXT_BOX_HORIZONTAL_PADDING - SPACE;\n    targetLineElem.style.transform = `translate(${left}px, ${top}px)`;\n    targetLineElem.style.width = `${anchorWidth - (TEXT_BOX_HORIZONTAL_PADDING - SPACE) * 2}px`;\n    targetLineElem.style.opacity = '.4';\n    /**\n   * Move around element below or above the line (= the target / targetBlockElem)\n   */ //targetBlockElem.style.opacity = '0.4'\n    if (!isFoundNodeEmptyParagraph) {\n        // move lastTargetBlockElem down 50px to make space for targetLineElem (which is 50px height)\n        targetBlockElem.style.transform = `translate(0, ${targetElemTranslate}px)`;\n        if (isBelow) {\n            // add to existing marginBottom plus the height of targetLineElem\n            targetBlockElem.style.marginBottom = TARGET_LINE_HALF_HEIGHT * 2 + 'px';\n        } else {\n            targetBlockElem.style.marginTop = TARGET_LINE_HALF_HEIGHT * 2 + 'px';\n        }\n    }\n    if (DEBUG) {\n        //targetBlockElem.style.border = '3px solid red'\n        (0,_highlightElemOriginalPosition_js__WEBPACK_IMPORTED_MODULE_2__.highlightElemOriginalPosition)(debugHighlightRef, targetBlockElem, anchorElem);\n    }\n    if (lastTargetBlockElem && lastTargetBlockElem !== targetBlockElem) {\n        lastTargetBlockElem.style.opacity = '';\n        lastTargetBlockElem.style.transform = '';\n        // Delete marginBottom and marginTop values we set\n        lastTargetBlockElem.style.marginBottom = '';\n        lastTargetBlockElem.style.marginTop = '';\n    //lastTargetBlockElem.style.border = 'none'\n    }\n}\n\n//# sourceMappingURL=setTargetLine.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvRHJhZ2dhYmxlQmxvY2tQbHVnaW4vc2V0VGFyZ2V0TGluZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNFO0FBQ3VCO0FBQ1Y7QUFDbkY7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLHlEQUF5RCxFQUFFLDBHQUFxQztBQUM1RyxZQUFZLHFDQUFxQztBQUNqRCxZQUFZLDBCQUEwQixFQUFFLGtGQUFtQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsS0FBSyxNQUFNLElBQUk7QUFDakUsb0NBQW9DLHdEQUF3RDtBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsb0JBQW9CO0FBQzlFO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxnR0FBNkI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BwYXlsb2FkY21zL3JpY2h0ZXh0LWxleGljYWwvZGlzdC9maWVsZC9sZXhpY2FsL3BsdWdpbnMvaGFuZGxlcy9EcmFnZ2FibGVCbG9ja1BsdWdpbi9zZXRUYXJnZXRMaW5lLmpzP2ViZTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Q29sbGFwc2VkTWFyZ2lucyB9IGZyb20gJy4uL3V0aWxzL2dldENvbGxhcHNlZE1hcmdpbnMuanMnO1xuaW1wb3J0IHsgZ2V0Qm91bmRpbmdDbGllbnRSZWN0V2l0aG91dFRyYW5zZm9ybSB9IGZyb20gJy4vZ2V0Qm91bmRpbmdSZWN0V2l0aG91dFRyYW5zZm9ybS5qcyc7XG5pbXBvcnQgeyBoaWdobGlnaHRFbGVtT3JpZ2luYWxQb3NpdGlvbiB9IGZyb20gJy4vaGlnaGxpZ2h0RWxlbU9yaWdpbmFsUG9zaXRpb24uanMnO1xuY29uc3QgVEFSR0VUX0xJTkVfSEFMRl9IRUlHSFQgPSAyNTtcbmNvbnN0IFRFWFRfQk9YX0hPUklaT05UQUxfUEFERElORyA9IC0yNDtcbmNvbnN0IERFQlVHID0gZmFsc2U7XG5leHBvcnQgZnVuY3Rpb24gc2V0VGFyZ2V0TGluZShTUEFDRSwgdGFyZ2V0TGluZUVsZW0sIHRhcmdldEJsb2NrRWxlbSwgbGFzdFRhcmdldEJsb2NrRWxlbSwgbW91c2VZLCBhbmNob3JFbGVtLCBldmVudCwgZGVidWdIaWdobGlnaHRSZWYsIGlzRm91bmROb2RlRW1wdHlQYXJhZ3JhcGggPSBmYWxzZSkge1xuICAgIGNvbnN0IHsgaGVpZ2h0OiB0YXJnZXRCbG9ja0VsZW1IZWlnaHQsIHRvcDogdGFyZ2V0QmxvY2tFbGVtVG9wIH0gPSBnZXRCb3VuZGluZ0NsaWVudFJlY3RXaXRob3V0VHJhbnNmb3JtKHRhcmdldEJsb2NrRWxlbSk7XG4gICAgY29uc3QgeyB0b3A6IGFuY2hvclRvcCwgd2lkdGg6IGFuY2hvcldpZHRoIH0gPSBhbmNob3JFbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHsgbWFyZ2luQm90dG9tLCBtYXJnaW5Ub3AgfSA9IGdldENvbGxhcHNlZE1hcmdpbnModGFyZ2V0QmxvY2tFbGVtKTtcbiAgICBsZXQgbGluZVRvcCA9IHRhcmdldEJsb2NrRWxlbVRvcDtcbiAgICBjb25zdCBpc0JlbG93ID0gbW91c2VZID49IHRhcmdldEJsb2NrRWxlbVRvcCArIHRhcmdldEJsb2NrRWxlbUhlaWdodCAvIDIgKyB3aW5kb3cuc2Nyb2xsWTtcbiAgICBpZiAoIWlzRm91bmROb2RlRW1wdHlQYXJhZ3JhcGgpIHtcbiAgICAgICAgaWYgKGlzQmVsb3cpIHtcbiAgICAgICAgICAgIC8vIGJlbG93IHRhcmdldEJsb2NrRWxlbVxuICAgICAgICAgICAgbGluZVRvcCArPSB0YXJnZXRCbG9ja0VsZW1IZWlnaHQgKyBtYXJnaW5Cb3R0b20gLyAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYWJvdmUgdGFyZ2V0QmxvY2tFbGVtXG4gICAgICAgICAgICBsaW5lVG9wIC09IG1hcmdpblRvcCAvIDI7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBsaW5lVG9wICs9IHRhcmdldEJsb2NrRWxlbUhlaWdodCAvIDI7XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldEVsZW1UcmFuc2xhdGUgPSAwO1xuICAgIGxldCB0YXJnZXRFbGVtVHJhbnNsYXRlMiA9IDA7XG4gICAgaWYgKCFpc0ZvdW5kTm9kZUVtcHR5UGFyYWdyYXBoKSB7XG4gICAgICAgIGlmIChpc0JlbG93KSB7XG4gICAgICAgICAgICB0YXJnZXRFbGVtVHJhbnNsYXRlMiA9IC1UQVJHRVRfTElORV9IQUxGX0hFSUdIVDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldEVsZW1UcmFuc2xhdGUyID0gVEFSR0VUX0xJTkVfSEFMRl9IRUlHSFQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHRvcCA9IGxpbmVUb3AgLSBhbmNob3JUb3AgKyB0YXJnZXRFbGVtVHJhbnNsYXRlMjtcbiAgICBpZiAoIWlzQmVsb3cpIHtcbiAgICAgICAgdG9wIC09IFRBUkdFVF9MSU5FX0hBTEZfSEVJR0hUICogMjtcbiAgICB9XG4gICAgY29uc3QgbGVmdCA9IFRFWFRfQk9YX0hPUklaT05UQUxfUEFERElORyAtIFNQQUNFO1xuICAgIHRhcmdldExpbmVFbGVtLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHtsZWZ0fXB4LCAke3RvcH1weClgO1xuICAgIHRhcmdldExpbmVFbGVtLnN0eWxlLndpZHRoID0gYCR7YW5jaG9yV2lkdGggLSAoVEVYVF9CT1hfSE9SSVpPTlRBTF9QQURESU5HIC0gU1BBQ0UpICogMn1weGA7XG4gICAgdGFyZ2V0TGluZUVsZW0uc3R5bGUub3BhY2l0eSA9ICcuNCc7XG4gICAgLyoqXG4gICAqIE1vdmUgYXJvdW5kIGVsZW1lbnQgYmVsb3cgb3IgYWJvdmUgdGhlIGxpbmUgKD0gdGhlIHRhcmdldCAvIHRhcmdldEJsb2NrRWxlbSlcbiAgICovIC8vdGFyZ2V0QmxvY2tFbGVtLnN0eWxlLm9wYWNpdHkgPSAnMC40J1xuICAgIGlmICghaXNGb3VuZE5vZGVFbXB0eVBhcmFncmFwaCkge1xuICAgICAgICAvLyBtb3ZlIGxhc3RUYXJnZXRCbG9ja0VsZW0gZG93biA1MHB4IHRvIG1ha2Ugc3BhY2UgZm9yIHRhcmdldExpbmVFbGVtICh3aGljaCBpcyA1MHB4IGhlaWdodClcbiAgICAgICAgdGFyZ2V0QmxvY2tFbGVtLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoMCwgJHt0YXJnZXRFbGVtVHJhbnNsYXRlfXB4KWA7XG4gICAgICAgIGlmIChpc0JlbG93KSB7XG4gICAgICAgICAgICAvLyBhZGQgdG8gZXhpc3RpbmcgbWFyZ2luQm90dG9tIHBsdXMgdGhlIGhlaWdodCBvZiB0YXJnZXRMaW5lRWxlbVxuICAgICAgICAgICAgdGFyZ2V0QmxvY2tFbGVtLnN0eWxlLm1hcmdpbkJvdHRvbSA9IFRBUkdFVF9MSU5FX0hBTEZfSEVJR0hUICogMiArICdweCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRCbG9ja0VsZW0uc3R5bGUubWFyZ2luVG9wID0gVEFSR0VUX0xJTkVfSEFMRl9IRUlHSFQgKiAyICsgJ3B4JztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgLy90YXJnZXRCbG9ja0VsZW0uc3R5bGUuYm9yZGVyID0gJzNweCBzb2xpZCByZWQnXG4gICAgICAgIGhpZ2hsaWdodEVsZW1PcmlnaW5hbFBvc2l0aW9uKGRlYnVnSGlnaGxpZ2h0UmVmLCB0YXJnZXRCbG9ja0VsZW0sIGFuY2hvckVsZW0pO1xuICAgIH1cbiAgICBpZiAobGFzdFRhcmdldEJsb2NrRWxlbSAmJiBsYXN0VGFyZ2V0QmxvY2tFbGVtICE9PSB0YXJnZXRCbG9ja0VsZW0pIHtcbiAgICAgICAgbGFzdFRhcmdldEJsb2NrRWxlbS5zdHlsZS5vcGFjaXR5ID0gJyc7XG4gICAgICAgIGxhc3RUYXJnZXRCbG9ja0VsZW0uc3R5bGUudHJhbnNmb3JtID0gJyc7XG4gICAgICAgIC8vIERlbGV0ZSBtYXJnaW5Cb3R0b20gYW5kIG1hcmdpblRvcCB2YWx1ZXMgd2Ugc2V0XG4gICAgICAgIGxhc3RUYXJnZXRCbG9ja0VsZW0uc3R5bGUubWFyZ2luQm90dG9tID0gJyc7XG4gICAgICAgIGxhc3RUYXJnZXRCbG9ja0VsZW0uc3R5bGUubWFyZ2luVG9wID0gJyc7XG4gICAgLy9sYXN0VGFyZ2V0QmxvY2tFbGVtLnN0eWxlLmJvcmRlciA9ICdub25lJ1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2V0VGFyZ2V0TGluZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/DraggableBlockPlugin/setTargetLine.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/doesLineHeightAffectElement.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/doesLineHeightAffectElement.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   doesLineHeightAffectElement: () => (/* binding */ doesLineHeightAffectElement)\n/* harmony export */ });\nconst replacedElements = [\n    'IMG',\n    'INPUT',\n    'TEXTAREA',\n    'SELECT',\n    'BUTTON',\n    'VIDEO',\n    'OBJECT',\n    'EMBED',\n    'IFRAME',\n    'HR'\n];\n/**\n * From ChatGPT, only that verified it works for HR elements.\n *\n * HTML Elements can have CSS lineHeight applied to them, but it doesn't always affect the visual layout.\n * This function checks if the line-height property has an effect on the element's layout.\n * @param htmlElem\n */ function doesLineHeightAffectElement(htmlElem) {\n    if (!htmlElem) return false;\n    // Check for replaced elements, elements that typically don't support line-height adjustments,\n    // and elements without visible content\n    if (replacedElements.includes(htmlElem.tagName) || htmlElem.offsetHeight === 0 || htmlElem.offsetWidth === 0) {\n        return false;\n    }\n    // Check for specific CSS properties that negate line-height's visual effects\n    const style = window.getComputedStyle(htmlElem);\n    if (style.display === 'table-cell' || style.position === 'absolute' || style.visibility === 'hidden' || style.opacity === '0') {\n        return false;\n    }\n    // This is a basic check, and there can be more complex scenarios where line-height doesn't have an effect.\n    return true;\n}\n\n//# sourceMappingURL=doesLineHeightAffectElement.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvdXRpbHMvZG9lc0xpbmVIZWlnaHRBZmZlY3RFbGVtZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHBheWxvYWRjbXMvcmljaHRleHQtbGV4aWNhbC9kaXN0L2ZpZWxkL2xleGljYWwvcGx1Z2lucy9oYW5kbGVzL3V0aWxzL2RvZXNMaW5lSGVpZ2h0QWZmZWN0RWxlbWVudC5qcz83YTU4Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlcGxhY2VkRWxlbWVudHMgPSBbXG4gICAgJ0lNRycsXG4gICAgJ0lOUFVUJyxcbiAgICAnVEVYVEFSRUEnLFxuICAgICdTRUxFQ1QnLFxuICAgICdCVVRUT04nLFxuICAgICdWSURFTycsXG4gICAgJ09CSkVDVCcsXG4gICAgJ0VNQkVEJyxcbiAgICAnSUZSQU1FJyxcbiAgICAnSFInXG5dO1xuLyoqXG4gKiBGcm9tIENoYXRHUFQsIG9ubHkgdGhhdCB2ZXJpZmllZCBpdCB3b3JrcyBmb3IgSFIgZWxlbWVudHMuXG4gKlxuICogSFRNTCBFbGVtZW50cyBjYW4gaGF2ZSBDU1MgbGluZUhlaWdodCBhcHBsaWVkIHRvIHRoZW0sIGJ1dCBpdCBkb2Vzbid0IGFsd2F5cyBhZmZlY3QgdGhlIHZpc3VhbCBsYXlvdXQuXG4gKiBUaGlzIGZ1bmN0aW9uIGNoZWNrcyBpZiB0aGUgbGluZS1oZWlnaHQgcHJvcGVydHkgaGFzIGFuIGVmZmVjdCBvbiB0aGUgZWxlbWVudCdzIGxheW91dC5cbiAqIEBwYXJhbSBodG1sRWxlbVxuICovIGV4cG9ydCBmdW5jdGlvbiBkb2VzTGluZUhlaWdodEFmZmVjdEVsZW1lbnQoaHRtbEVsZW0pIHtcbiAgICBpZiAoIWh0bWxFbGVtKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gQ2hlY2sgZm9yIHJlcGxhY2VkIGVsZW1lbnRzLCBlbGVtZW50cyB0aGF0IHR5cGljYWxseSBkb24ndCBzdXBwb3J0IGxpbmUtaGVpZ2h0IGFkanVzdG1lbnRzLFxuICAgIC8vIGFuZCBlbGVtZW50cyB3aXRob3V0IHZpc2libGUgY29udGVudFxuICAgIGlmIChyZXBsYWNlZEVsZW1lbnRzLmluY2x1ZGVzKGh0bWxFbGVtLnRhZ05hbWUpIHx8IGh0bWxFbGVtLm9mZnNldEhlaWdodCA9PT0gMCB8fCBodG1sRWxlbS5vZmZzZXRXaWR0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIENoZWNrIGZvciBzcGVjaWZpYyBDU1MgcHJvcGVydGllcyB0aGF0IG5lZ2F0ZSBsaW5lLWhlaWdodCdzIHZpc3VhbCBlZmZlY3RzXG4gICAgY29uc3Qgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShodG1sRWxlbSk7XG4gICAgaWYgKHN0eWxlLmRpc3BsYXkgPT09ICd0YWJsZS1jZWxsJyB8fCBzdHlsZS5wb3NpdGlvbiA9PT0gJ2Fic29sdXRlJyB8fCBzdHlsZS52aXNpYmlsaXR5ID09PSAnaGlkZGVuJyB8fCBzdHlsZS5vcGFjaXR5ID09PSAnMCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBUaGlzIGlzIGEgYmFzaWMgY2hlY2ssIGFuZCB0aGVyZSBjYW4gYmUgbW9yZSBjb21wbGV4IHNjZW5hcmlvcyB3aGVyZSBsaW5lLWhlaWdodCBkb2Vzbid0IGhhdmUgYW4gZWZmZWN0LlxuICAgIHJldHVybiB0cnVlO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kb2VzTGluZUhlaWdodEFmZmVjdEVsZW1lbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/doesLineHeightAffectElement.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/getCollapsedMargins.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/getCollapsedMargins.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCollapsedMargins: () => (/* binding */ getCollapsedMargins)\n/* harmony export */ });\nfunction getCollapsedMargins(elem) {\n    const getMargin = (element, margin)=>element ? parseFloat(window.getComputedStyle(element)[margin]) : 0;\n    const { marginBottom, marginTop } = window.getComputedStyle(elem);\n    const prevElemSiblingMarginBottom = getMargin(elem.previousElementSibling, 'marginBottom');\n    const nextElemSiblingMarginTop = getMargin(elem.nextElementSibling, 'marginTop');\n    const collapsedTopMargin = Math.max(parseFloat(marginTop), prevElemSiblingMarginBottom);\n    const collapsedBottomMargin = Math.max(parseFloat(marginBottom), nextElemSiblingMarginTop);\n    return {\n        marginBottom: collapsedBottomMargin,\n        marginTop: collapsedTopMargin\n    };\n}\n\n//# sourceMappingURL=getCollapsedMargins.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvdXRpbHMvZ2V0Q29sbGFwc2VkTWFyZ2lucy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBLFlBQVksMEJBQTBCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHBheWxvYWRjbXMvcmljaHRleHQtbGV4aWNhbC9kaXN0L2ZpZWxkL2xleGljYWwvcGx1Z2lucy9oYW5kbGVzL3V0aWxzL2dldENvbGxhcHNlZE1hcmdpbnMuanM/MDJiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2V0Q29sbGFwc2VkTWFyZ2lucyhlbGVtKSB7XG4gICAgY29uc3QgZ2V0TWFyZ2luID0gKGVsZW1lbnQsIG1hcmdpbik9PmVsZW1lbnQgPyBwYXJzZUZsb2F0KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpW21hcmdpbl0pIDogMDtcbiAgICBjb25zdCB7IG1hcmdpbkJvdHRvbSwgbWFyZ2luVG9wIH0gPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTtcbiAgICBjb25zdCBwcmV2RWxlbVNpYmxpbmdNYXJnaW5Cb3R0b20gPSBnZXRNYXJnaW4oZWxlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLCAnbWFyZ2luQm90dG9tJyk7XG4gICAgY29uc3QgbmV4dEVsZW1TaWJsaW5nTWFyZ2luVG9wID0gZ2V0TWFyZ2luKGVsZW0ubmV4dEVsZW1lbnRTaWJsaW5nLCAnbWFyZ2luVG9wJyk7XG4gICAgY29uc3QgY29sbGFwc2VkVG9wTWFyZ2luID0gTWF0aC5tYXgocGFyc2VGbG9hdChtYXJnaW5Ub3ApLCBwcmV2RWxlbVNpYmxpbmdNYXJnaW5Cb3R0b20pO1xuICAgIGNvbnN0IGNvbGxhcHNlZEJvdHRvbU1hcmdpbiA9IE1hdGgubWF4KHBhcnNlRmxvYXQobWFyZ2luQm90dG9tKSwgbmV4dEVsZW1TaWJsaW5nTWFyZ2luVG9wKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBtYXJnaW5Cb3R0b206IGNvbGxhcHNlZEJvdHRvbU1hcmdpbixcbiAgICAgICAgbWFyZ2luVG9wOiBjb2xsYXBzZWRUb3BNYXJnaW5cbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRDb2xsYXBzZWRNYXJnaW5zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/getCollapsedMargins.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/getTopLevelNodeKeys.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/getTopLevelNodeKeys.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTopLevelNodeKeys: () => (/* binding */ getTopLevelNodeKeys)\n/* harmony export */ });\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n\nfunction getTopLevelNodeKeys(editor) {\n    return editor.getEditorState().read(()=>(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$getRoot)().getChildrenKeys());\n}\n\n//# sourceMappingURL=getTopLevelNodeKeys.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvdXRpbHMvZ2V0VG9wTGV2ZWxOb2RlS2V5cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFtQztBQUM1QjtBQUNQLDRDQUE0QyxpREFBUTtBQUNwRDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHBheWxvYWRjbXMvcmljaHRleHQtbGV4aWNhbC9kaXN0L2ZpZWxkL2xleGljYWwvcGx1Z2lucy9oYW5kbGVzL3V0aWxzL2dldFRvcExldmVsTm9kZUtleXMuanM/MWQ4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyAkZ2V0Um9vdCB9IGZyb20gJ2xleGljYWwnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRvcExldmVsTm9kZUtleXMoZWRpdG9yKSB7XG4gICAgcmV0dXJuIGVkaXRvci5nZXRFZGl0b3JTdGF0ZSgpLnJlYWQoKCk9PiRnZXRSb290KCkuZ2V0Q2hpbGRyZW5LZXlzKCkpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRUb3BMZXZlbE5vZGVLZXlzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/getTopLevelNodeKeys.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/isOnHandleElement.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/isOnHandleElement.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isOnHandleElement: () => (/* binding */ isOnHandleElement)\n/* harmony export */ });\nfunction isOnHandleElement(element, handleElementClassName) {\n    return !!element.closest(`.${handleElementClassName}`);\n}\n\n//# sourceMappingURL=isOnHandleElement.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvdXRpbHMvaXNPbkhhbmRsZUVsZW1lbnQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1AsaUNBQWlDLHVCQUF1QjtBQUN4RDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHBheWxvYWRjbXMvcmljaHRleHQtbGV4aWNhbC9kaXN0L2ZpZWxkL2xleGljYWwvcGx1Z2lucy9oYW5kbGVzL3V0aWxzL2lzT25IYW5kbGVFbGVtZW50LmpzPzNiY2IiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzT25IYW5kbGVFbGVtZW50KGVsZW1lbnQsIGhhbmRsZUVsZW1lbnRDbGFzc05hbWUpIHtcbiAgICByZXR1cm4gISFlbGVtZW50LmNsb3Nlc3QoYC4ke2hhbmRsZUVsZW1lbnRDbGFzc05hbWV9YCk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzT25IYW5kbGVFbGVtZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/isOnHandleElement.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/setHandlePosition.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/setHandlePosition.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setHandlePosition: () => (/* binding */ setHandlePosition)\n/* harmony export */ });\n/* harmony import */ var _doesLineHeightAffectElement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./doesLineHeightAffectElement.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/doesLineHeightAffectElement.js\");\n\nfunction setHandlePosition(targetElem, handleElem, anchorElem, leftOffset = 0) {\n    if (!targetElem) {\n        handleElem.style.opacity = '0';\n        handleElem.style.transform = 'translate(-10000px, -10000px)';\n        return;\n    }\n    const targetRect = targetElem.getBoundingClientRect();\n    const targetStyle = window.getComputedStyle(targetElem);\n    const floatingElemRect = handleElem.getBoundingClientRect();\n    const anchorElementRect = anchorElem.getBoundingClientRect();\n    let top;\n    const shouldDisplayHandleInCenter = targetRect.height < 60;\n    if (!shouldDisplayHandleInCenter) {\n        // No need to let line height affect the re-positioning of the floating element if line height has no\n        // visual effect on the element. Otherwise, the floating element will be positioned incorrectly.\n        const actualLineHeight = (0,_doesLineHeightAffectElement_js__WEBPACK_IMPORTED_MODULE_0__.doesLineHeightAffectElement)(targetElem) ? parseInt(targetStyle.lineHeight, 10) : 0;\n        top = targetRect.top + (actualLineHeight - floatingElemRect.height) / 2 - anchorElementRect.top;\n    } else {\n        top = targetRect.top - floatingElemRect.height / 2 - anchorElementRect.top + targetRect.height / 2;\n    }\n    const left = leftOffset;\n    handleElem.style.opacity = '1';\n    handleElem.style.transform = `translate(${left}px, ${top}px)`;\n}\n\n//# sourceMappingURL=setHandlePosition.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvdXRpbHMvc2V0SGFuZGxlUG9zaXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0U7QUFDeEU7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLDRGQUEyQjtBQUM1RDtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxLQUFLLE1BQU0sSUFBSTtBQUM3RDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHBheWxvYWRjbXMvcmljaHRleHQtbGV4aWNhbC9kaXN0L2ZpZWxkL2xleGljYWwvcGx1Z2lucy9oYW5kbGVzL3V0aWxzL3NldEhhbmRsZVBvc2l0aW9uLmpzPzZjODAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZG9lc0xpbmVIZWlnaHRBZmZlY3RFbGVtZW50IH0gZnJvbSAnLi9kb2VzTGluZUhlaWdodEFmZmVjdEVsZW1lbnQuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHNldEhhbmRsZVBvc2l0aW9uKHRhcmdldEVsZW0sIGhhbmRsZUVsZW0sIGFuY2hvckVsZW0sIGxlZnRPZmZzZXQgPSAwKSB7XG4gICAgaWYgKCF0YXJnZXRFbGVtKSB7XG4gICAgICAgIGhhbmRsZUVsZW0uc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICAgICAgaGFuZGxlRWxlbS5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKC0xMDAwMHB4LCAtMTAwMDBweCknO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldFJlY3QgPSB0YXJnZXRFbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHRhcmdldFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGFyZ2V0RWxlbSk7XG4gICAgY29uc3QgZmxvYXRpbmdFbGVtUmVjdCA9IGhhbmRsZUVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgYW5jaG9yRWxlbWVudFJlY3QgPSBhbmNob3JFbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGxldCB0b3A7XG4gICAgY29uc3Qgc2hvdWxkRGlzcGxheUhhbmRsZUluQ2VudGVyID0gdGFyZ2V0UmVjdC5oZWlnaHQgPCA2MDtcbiAgICBpZiAoIXNob3VsZERpc3BsYXlIYW5kbGVJbkNlbnRlcikge1xuICAgICAgICAvLyBObyBuZWVkIHRvIGxldCBsaW5lIGhlaWdodCBhZmZlY3QgdGhlIHJlLXBvc2l0aW9uaW5nIG9mIHRoZSBmbG9hdGluZyBlbGVtZW50IGlmIGxpbmUgaGVpZ2h0IGhhcyBub1xuICAgICAgICAvLyB2aXN1YWwgZWZmZWN0IG9uIHRoZSBlbGVtZW50LiBPdGhlcndpc2UsIHRoZSBmbG9hdGluZyBlbGVtZW50IHdpbGwgYmUgcG9zaXRpb25lZCBpbmNvcnJlY3RseS5cbiAgICAgICAgY29uc3QgYWN0dWFsTGluZUhlaWdodCA9IGRvZXNMaW5lSGVpZ2h0QWZmZWN0RWxlbWVudCh0YXJnZXRFbGVtKSA/IHBhcnNlSW50KHRhcmdldFN0eWxlLmxpbmVIZWlnaHQsIDEwKSA6IDA7XG4gICAgICAgIHRvcCA9IHRhcmdldFJlY3QudG9wICsgKGFjdHVhbExpbmVIZWlnaHQgLSBmbG9hdGluZ0VsZW1SZWN0LmhlaWdodCkgLyAyIC0gYW5jaG9yRWxlbWVudFJlY3QudG9wO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRvcCA9IHRhcmdldFJlY3QudG9wIC0gZmxvYXRpbmdFbGVtUmVjdC5oZWlnaHQgLyAyIC0gYW5jaG9yRWxlbWVudFJlY3QudG9wICsgdGFyZ2V0UmVjdC5oZWlnaHQgLyAyO1xuICAgIH1cbiAgICBjb25zdCBsZWZ0ID0gbGVmdE9mZnNldDtcbiAgICBoYW5kbGVFbGVtLnN0eWxlLm9wYWNpdHkgPSAnMSc7XG4gICAgaGFuZGxlRWxlbS5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7bGVmdH1weCwgJHt0b3B9cHgpYDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2V0SGFuZGxlUG9zaXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/plugins/handles/utils/setHandlePosition.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/ui/ContentEditable.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/ui/ContentEditable.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LexicalContentEditable: () => (/* binding */ LexicalContentEditable)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalContentEditable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lexical/react/LexicalContentEditable.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalContentEditable.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _ContentEditable_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ContentEditable.scss */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/ui/ContentEditable.scss\");\n\n\n\nfunction LexicalContentEditable({ className }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_lexical_react_LexicalContentEditable_js__WEBPACK_IMPORTED_MODULE_2__.ContentEditable, {\n        className: className ?? 'ContentEditable__root'\n    });\n}\n\n//# sourceMappingURL=ContentEditable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC91aS9Db250ZW50RWRpdGFibGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyRTtBQUM1QztBQUNDO0FBQ3pCLGtDQUFrQyxXQUFXO0FBQ3BELHlCQUF5QixnREFBbUIsQ0FBQyxxRkFBZTtBQUM1RDtBQUNBLEtBQUs7QUFDTDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHBheWxvYWRjbXMvcmljaHRleHQtbGV4aWNhbC9kaXN0L2ZpZWxkL2xleGljYWwvdWkvQ29udGVudEVkaXRhYmxlLmpzP2U2M2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udGVudEVkaXRhYmxlIH0gZnJvbSAnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbnRlbnRFZGl0YWJsZS5qcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgJy4vQ29udGVudEVkaXRhYmxlLnNjc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIExleGljYWxDb250ZW50RWRpdGFibGUoeyBjbGFzc05hbWUgfSkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGVudEVkaXRhYmxlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lID8/ICdDb250ZW50RWRpdGFibGVfX3Jvb3QnXG4gICAgfSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnRlbnRFZGl0YWJsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/ui/ContentEditable.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/utils/guard.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/utils/guard.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isHTMLElement: () => (/* binding */ isHTMLElement)\n/* harmony export */ });\nfunction isHTMLElement(x) {\n    return x instanceof HTMLElement;\n}\n\n//# sourceMappingURL=guard.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC91dGlscy9ndWFyZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC91dGlscy9ndWFyZC5qcz9lMjNjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc0hUTUxFbGVtZW50KHgpIHtcbiAgICByZXR1cm4geCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ndWFyZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/utils/guard.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/utils/point.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/utils/point.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Point: () => (/* binding */ Point),\n/* harmony export */   isPoint: () => (/* binding */ isPoint)\n/* harmony export */ });\nclass Point {\n    _x;\n    _y;\n    constructor(x, y){\n        this._x = x;\n        this._y = y;\n    }\n    calcDeltaXTo({ x }) {\n        return this.x - x;\n    }\n    calcDeltaYTo({ y }) {\n        return this.y - y;\n    }\n    calcDistanceTo(point) {\n        return Math.sqrt(Math.pow(this.calcDeltaXTo(point), 2) + Math.pow(this.calcDeltaYTo(point), 2));\n    }\n    calcHorizontalDistanceTo(point) {\n        return Math.abs(this.calcDeltaXTo(point));\n    }\n    calcVerticalDistance(point) {\n        return Math.abs(this.calcDeltaYTo(point));\n    }\n    equals({ x, y }) {\n        return this.x === x && this.y === y;\n    }\n    get x() {\n        return this._x;\n    }\n    get y() {\n        return this._y;\n    }\n}\nfunction isPoint(x) {\n    return x instanceof Point;\n}\n\n//# sourceMappingURL=point.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC91dGlscy9wb2ludC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLEdBQUc7QUFDdEI7QUFDQTtBQUNBLG1CQUFtQixHQUFHO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZmllbGQvbGV4aWNhbC91dGlscy9wb2ludC5qcz9lNjI2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBQb2ludCB7XG4gICAgX3g7XG4gICAgX3k7XG4gICAgY29uc3RydWN0b3IoeCwgeSl7XG4gICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICB0aGlzLl95ID0geTtcbiAgICB9XG4gICAgY2FsY0RlbHRhWFRvKHsgeCB9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnggLSB4O1xuICAgIH1cbiAgICBjYWxjRGVsdGFZVG8oeyB5IH0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueSAtIHk7XG4gICAgfVxuICAgIGNhbGNEaXN0YW5jZVRvKHBvaW50KSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3codGhpcy5jYWxjRGVsdGFYVG8ocG9pbnQpLCAyKSArIE1hdGgucG93KHRoaXMuY2FsY0RlbHRhWVRvKHBvaW50KSwgMikpO1xuICAgIH1cbiAgICBjYWxjSG9yaXpvbnRhbERpc3RhbmNlVG8ocG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKHRoaXMuY2FsY0RlbHRhWFRvKHBvaW50KSk7XG4gICAgfVxuICAgIGNhbGNWZXJ0aWNhbERpc3RhbmNlKHBvaW50KSB7XG4gICAgICAgIHJldHVybiBNYXRoLmFicyh0aGlzLmNhbGNEZWx0YVlUbyhwb2ludCkpO1xuICAgIH1cbiAgICBlcXVhbHMoeyB4LCB5IH0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueCA9PT0geCAmJiB0aGlzLnkgPT09IHk7XG4gICAgfVxuICAgIGdldCB4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5feDtcbiAgICB9XG4gICAgZ2V0IHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1BvaW50KHgpIHtcbiAgICByZXR1cm4geCBpbnN0YW5jZW9mIFBvaW50O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb2ludC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/utils/point.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/utils/rect.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/utils/rect.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Rect: () => (/* binding */ Rect)\n/* harmony export */ });\n/* harmony import */ var _point_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./point.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/utils/point.js\");\n\nclass Rect {\n    _bottom;\n    _left;\n    _right;\n    _top;\n    constructor(left, top, right, bottom){\n        const [physicTop, physicBottom] = top <= bottom ? [\n            top,\n            bottom\n        ] : [\n            bottom,\n            top\n        ];\n        const [physicLeft, physicRight] = left <= right ? [\n            left,\n            right\n        ] : [\n            right,\n            left\n        ];\n        this._top = physicTop;\n        this._right = physicRight;\n        this._left = physicLeft;\n        this._bottom = physicBottom;\n    }\n    static fromDOM(dom) {\n        const { height, left, top, width } = dom.getBoundingClientRect();\n        return Rect.fromLWTH(left, width, top, height);\n    }\n    static fromDOMRect(domRect) {\n        const { height, left, top, width } = domRect;\n        return Rect.fromLWTH(left, width, top, height);\n    }\n    static fromLTRB(left, top, right, bottom) {\n        return new Rect(left, top, right, bottom);\n    }\n    static fromLWTH(left, width, top, height) {\n        return new Rect(left, top, left + width, top + height);\n    }\n    static fromPoints(startPoint, endPoint) {\n        const { x: left, y: top } = startPoint;\n        const { x: right, y: bottom } = endPoint;\n        return Rect.fromLTRB(left, top, right, bottom);\n    }\n    contains(target) {\n        if ((0,_point_js__WEBPACK_IMPORTED_MODULE_0__.isPoint)(target)) {\n            const { x, y } = target;\n            const isOnTopSide = y < this._top;\n            const isOnBottomSide = y > this._bottom;\n            const isOnLeftSide = x < this._left;\n            const isOnRightSide = x > this._right;\n            const result = !isOnTopSide && !isOnBottomSide && !isOnLeftSide && !isOnRightSide;\n            return {\n                reason: {\n                    isOnBottomSide,\n                    isOnLeftSide,\n                    isOnRightSide,\n                    isOnTopSide\n                },\n                result\n            };\n        }\n        const { bottom, left, right, top } = target;\n        return top >= this._top && top <= this._bottom && bottom >= this._top && bottom <= this._bottom && left >= this._left && left <= this._right && right >= this._left && right <= this._right;\n    }\n    distanceFromPoint(point) {\n        const containsResult = this.contains(point);\n        if (containsResult.result) {\n            return {\n                distance: 0,\n                isOnBottomSide: containsResult.reason.isOnBottomSide,\n                isOnLeftSide: containsResult.reason.isOnLeftSide,\n                isOnRightSide: containsResult.reason.isOnRightSide,\n                isOnTopSide: containsResult.reason.isOnTopSide\n            };\n        }\n        let dx = 0 // Horizontal distance to the closest edge\n        ;\n        let dy = 0 // Vertical distance to the closest edge\n        ;\n        // If the point is to the left of the rectangle\n        if (point.x < this._left) {\n            dx = this._left - point.x;\n        } else if (point.x > this._right) {\n            dx = point.x - this._right;\n        }\n        // If the point is above the rectangle\n        if (point.y < this._top) {\n            dy = this._top - point.y;\n        } else if (point.y > this._bottom) {\n            dy = point.y - this._bottom;\n        }\n        // Use the Pythagorean theorem to calculate the distance\n        return {\n            distance: Math.sqrt(dx * dx + dy * dy),\n            isOnBottomSide: point.y > this._bottom,\n            isOnLeftSide: point.x < this._left,\n            isOnRightSide: point.x > this._right,\n            isOnTopSide: point.y < this._top\n        };\n    }\n    equals({ bottom, left, right, top }) {\n        return top === this._top && bottom === this._bottom && left === this._left && right === this._right;\n    }\n    generateNewRect({ bottom = this.bottom, left = this.left, right = this.right, top = this.top }) {\n        return new Rect(left, top, right, bottom);\n    }\n    intersectsWith(rect) {\n        const { height: h1, left: x1, top: y1, width: w1 } = rect;\n        const { height: h2, left: x2, top: y2, width: w2 } = this;\n        const maxX = x1 + w1 >= x2 + w2 ? x1 + w1 : x2 + w2;\n        const maxY = y1 + h1 >= y2 + h2 ? y1 + h1 : y2 + h2;\n        const minX = x1 <= x2 ? x1 : x2;\n        const minY = y1 <= y2 ? y1 : y2;\n        return maxX - minX <= w1 + w2 && maxY - minY <= h1 + h2;\n    }\n    get bottom() {\n        return this._bottom;\n    }\n    get height() {\n        return Math.abs(this._bottom - this._top);\n    }\n    get left() {\n        return this._left;\n    }\n    get right() {\n        return this._right;\n    }\n    get top() {\n        return this._top;\n    }\n    get width() {\n        return Math.abs(this._left - this._right);\n    }\n}\n\n//# sourceMappingURL=rect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/field/lexical/utils/rect.js\n"));

/***/ })

}]);